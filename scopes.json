{ scopes: 
   [ { type: 'global',
       set: 
        { __data: 
           { '$app': 
              { name: 'app',
                identifiers: [ { type: 'Identifier', name: 'app' } ],
                references: [],
                defs: 
                 [ { type: 'Variable',
                     name: { type: 'Identifier', name: 'app' },
                     node: 
                      { type: 'VariableDeclarator',
                        id: { type: 'Identifier', name: 'app' },
                        init: 
                         { type: 'CallExpression',
                           callee: 
                            { type: 'CallExpression',
                              callee: { type: 'Identifier', name: 'require' },
                              arguments: [ { type: 'Literal', value: 'express', raw: '\'express\'' } ] },
                           arguments: [] } },
                     index: 0,
                     parent: 
                      { type: 'VariableDeclaration',
                        declarations: 
                         [ { type: 'VariableDeclarator',
                             id: { type: 'Identifier', name: 'app' },
                             init: 
                              { type: 'CallExpression',
                                callee: 
                                 { type: 'CallExpression',
                                   callee: { type: 'Identifier', name: 'require' },
                                   arguments: [ { type: 'Literal', value: 'express', raw: '\'express\'' } ] },
                                arguments: [] } } ],
                        kind: 'var' } } ],
                tainted: false,
                stack: true,
                scope: [Circular] },
             '$_rep': 
              { name: '_rep',
                identifiers: [ { type: 'Identifier', name: '_rep' } ],
                references: [],
                defs: 
                 [ { type: 'Variable',
                     name: { type: 'Identifier', name: '_rep' },
                     node: 
                      { type: 'VariableDeclarator',
                        id: { type: 'Identifier', name: '_rep' },
                        init: { type: 'Literal', value: 42, raw: '42' } },
                     index: 0,
                     parent: 
                      { type: 'VariableDeclaration',
                        declarations: 
                         [ { type: 'VariableDeclarator',
                             id: { type: 'Identifier', name: '_rep' },
                             init: { type: 'Literal', value: 42, raw: '42' } } ],
                        kind: 'var' } } ],
                tainted: false,
                stack: true,
                scope: [Circular] } } },
       taints: { __data: {} },
       dynamic: true,
       block: 
        { type: 'Program',
          body: 
           [ { type: 'VariableDeclaration',
               declarations: 
                [ { type: 'VariableDeclarator',
                    id: { type: 'Identifier', name: 'app' },
                    init: 
                     { type: 'CallExpression',
                       callee: 
                        { type: 'CallExpression',
                          callee: { type: 'Identifier', name: 'require' },
                          arguments: [ { type: 'Literal', value: 'express', raw: '\'express\'' } ] },
                       arguments: [] } } ],
               kind: 'var' },
             { type: 'VariableDeclaration',
               declarations: 
                [ { type: 'VariableDeclarator',
                    id: { type: 'Identifier', name: '_rep' },
                    init: { type: 'Literal', value: 42, raw: '42' } } ],
               kind: 'var' },
             { type: 'ExpressionStatement',
               expression: 
                { type: 'CallExpression',
                  callee: 
                   { type: 'MemberExpression',
                     computed: false,
                     object: { type: 'Identifier', name: 'app' },
                     property: { type: 'Identifier', name: 'get' } },
                  arguments: 
                   [ { type: 'Literal', value: '/A', raw: '"/A"' },
                     { type: 'FunctionExpression',
                       id: { type: 'Identifier', name: 'replyA' },
                       params: 
                        [ { type: 'Identifier', name: 'req' },
                          { type: 'Identifier', name: 'res' } ],
                       defaults: [],
                       body: 
                        { type: 'BlockStatement',
                          body: 
                           [ { type: 'ExpressionStatement',
                               expression: 
                                { type: 'CallExpression',
                                  callee: 
                                   { type: 'MemberExpression',
                                     computed: false,
                                     object: { type: 'Identifier', name: 'res' },
                                     property: { type: 'Identifier', name: 'send' } },
                                  arguments: 
                                   [ { type: 'BinaryExpression',
                                       operator: '+',
                                       left: { type: 'Literal', value: '', raw: '""' },
                                       right: { type: 'Identifier', name: '_rep' } } ] } },
                             { type: 'ExpressionStatement',
                               expression: 
                                { type: 'AssignmentExpression',
                                  operator: '+=',
                                  left: { type: 'Identifier', name: '_rep' },
                                  right: { type: 'Literal', value: 1, raw: '1' } } } ] },
                       rest: null,
                       generator: false,
                       expression: false } ] } },
             { type: 'ExpressionStatement',
               expression: 
                { type: 'CallExpression',
                  callee: 
                   { type: 'MemberExpression',
                     computed: false,
                     object: { type: 'Identifier', name: 'app' },
                     property: { type: 'Identifier', name: 'get' } },
                  arguments: 
                   [ { type: 'Literal', value: '/B', raw: '"/B"' },
                     { type: 'FunctionExpression',
                       id: { type: 'Identifier', name: 'replyB' },
                       params: 
                        [ { type: 'Identifier', name: 'req' },
                          { type: 'Identifier', name: 'res' } ],
                       defaults: [],
                       body: 
                        { type: 'BlockStatement',
                          body: 
                           [ { type: 'ExpressionStatement',
                               expression: 
                                { type: 'CallExpression',
                                  callee: 
                                   { type: 'MemberExpression',
                                     computed: false,
                                     object: { type: 'Identifier', name: 'res' },
                                     property: { type: 'Identifier', name: 'send' } },
                                  arguments: 
                                   [ { type: 'BinaryExpression',
                                       operator: '+',
                                       left: { type: 'Literal', value: '', raw: '""' },
                                       right: { type: 'Identifier', name: '_rep' } } ] } },
                             { type: 'ExpressionStatement',
                               expression: 
                                { type: 'AssignmentExpression',
                                  operator: '+=',
                                  left: { type: 'Identifier', name: '_rep' },
                                  right: { type: 'Literal', value: 2, raw: '2' } } } ] },
                       rest: null,
                       generator: false,
                       expression: false } ] } },
             { type: 'IfStatement',
               test: 
                { type: 'UnaryExpression',
                  operator: '!',
                  argument: 
                   { type: 'MemberExpression',
                     computed: false,
                     object: { type: 'Identifier', name: 'module' },
                     property: { type: 'Identifier', name: 'parent' } },
                  prefix: true },
               consequent: 
                { type: 'BlockStatement',
                  body: 
                   [ { type: 'ExpressionStatement',
                       expression: 
                        { type: 'CallExpression',
                          callee: 
                           { type: 'MemberExpression',
                             computed: false,
                             object: { type: 'Identifier', name: 'app' },
                             property: { type: 'Identifier', name: 'listen' } },
                          arguments: [ { type: 'Literal', value: 8080, raw: '8080' } ] } },
                     { type: 'ExpressionStatement',
                       expression: 
                        { type: 'CallExpression',
                          callee: 
                           { type: 'MemberExpression',
                             computed: false,
                             object: { type: 'Identifier', name: 'console' },
                             property: { type: 'Identifier', name: 'log' } },
                          arguments: 
                           [ { type: 'Literal',
                               value: '>> listening 8080',
                               raw: '">> listening 8080"' } ] } } ] },
               alternate: null },
             { type: 'ExpressionStatement',
               expression: 
                { type: 'AssignmentExpression',
                  operator: '=',
                  left: 
                   { type: 'MemberExpression',
                     computed: false,
                     object: { type: 'Identifier', name: 'exports' },
                     property: { type: 'Identifier', name: 'app' } },
                  right: { type: 'Identifier', name: 'app' } } } ] },
       through: 
        [ { identifier: { type: 'Identifier', name: 'app' },
            from: [Circular],
            tainted: false,
            resolved: null,
            flag: 2,
            writeExpr: 
             { type: 'CallExpression',
               callee: 
                { type: 'CallExpression',
                  callee: { type: 'Identifier', name: 'require' },
                  arguments: [ { type: 'Literal', value: 'express', raw: '\'express\'' } ] },
               arguments: [] },
            __maybeImplicitGlobal: false },
          { identifier: { type: 'Identifier', name: 'require' },
            from: [Circular],
            tainted: false,
            resolved: null,
            flag: 1,
            __maybeImplicitGlobal: undefined },
          { identifier: { type: 'Identifier', name: '_rep' },
            from: [Circular],
            tainted: false,
            resolved: null,
            flag: 2,
            writeExpr: { type: 'Literal', value: 42, raw: '42' },
            __maybeImplicitGlobal: false },
          { identifier: { type: 'Identifier', name: 'app' },
            from: [Circular],
            tainted: false,
            resolved: null,
            flag: 1,
            __maybeImplicitGlobal: undefined },
          { identifier: { type: 'Identifier', name: '_rep' },
            from: 
             { type: 'function',
               set: 
                { __data: 
                   { '$arguments': 
                      { name: 'arguments',
                        identifiers: [],
                        references: [],
                        defs: [],
                        tainted: false,
                        stack: true,
                        scope: [Circular] },
                     '$req': 
                      { name: 'req',
                        identifiers: [ { type: 'Identifier', name: 'req' } ],
                        references: [],
                        defs: 
                         [ { type: 'Parameter',
                             name: { type: 'Identifier', name: 'req' },
                             node: 
                              { type: 'FunctionExpression',
                                id: { type: 'Identifier', name: 'replyA' },
                                params: 
                                 [ { type: 'Identifier', name: 'req' },
                                   { type: 'Identifier', name: 'res' } ],
                                defaults: [],
                                body: 
                                 { type: 'BlockStatement',
                                   body: 
                                    [ { type: 'ExpressionStatement',
                                        expression: 
                                         { type: 'CallExpression',
                                           callee: 
                                            { type: 'MemberExpression',
                                              computed: false,
                                              object: { type: 'Identifier', name: 'res' },
                                              property: { type: 'Identifier', name: 'send' } },
                                           arguments: 
                                            [ { type: 'BinaryExpression',
                                                operator: '+',
                                                left: { type: 'Literal', value: '', raw: '""' },
                                                right: { type: 'Identifier', name: '_rep' } } ] } },
                                      { type: 'ExpressionStatement',
                                        expression: 
                                         { type: 'AssignmentExpression',
                                           operator: '+=',
                                           left: { type: 'Identifier', name: '_rep' },
                                           right: { type: 'Literal', value: 1, raw: '1' } } } ] },
                                rest: null,
                                generator: false,
                                expression: false },
                             index: 0 } ],
                        tainted: false,
                        stack: true,
                        scope: [Circular] },
                     '$res': 
                      { name: 'res',
                        identifiers: [ { type: 'Identifier', name: 'res' } ],
                        references: 
                         [ { identifier: { type: 'Identifier', name: 'res' },
                             from: [Circular],
                             tainted: false,
                             resolved: [Circular],
                             flag: 1,
                             __maybeImplicitGlobal: undefined } ],
                        defs: 
                         [ { type: 'Parameter',
                             name: { type: 'Identifier', name: 'res' },
                             node: 
                              { type: 'FunctionExpression',
                                id: { type: 'Identifier', name: 'replyA' },
                                params: 
                                 [ { type: 'Identifier', name: 'req' },
                                   { type: 'Identifier', name: 'res' } ],
                                defaults: [],
                                body: 
                                 { type: 'BlockStatement',
                                   body: 
                                    [ { type: 'ExpressionStatement',
                                        expression: 
                                         { type: 'CallExpression',
                                           callee: 
                                            { type: 'MemberExpression',
                                              computed: false,
                                              object: { type: 'Identifier', name: 'res' },
                                              property: { type: 'Identifier', name: 'send' } },
                                           arguments: 
                                            [ { type: 'BinaryExpression',
                                                operator: '+',
                                                left: { type: 'Literal', value: '', raw: '""' },
                                                right: { type: 'Identifier', name: '_rep' } } ] } },
                                      { type: 'ExpressionStatement',
                                        expression: 
                                         { type: 'AssignmentExpression',
                                           operator: '+=',
                                           left: { type: 'Identifier', name: '_rep' },
                                           right: { type: 'Literal', value: 1, raw: '1' } } } ] },
                                rest: null,
                                generator: false,
                                expression: false },
                             index: 1 } ],
                        tainted: false,
                        stack: true,
                        scope: [Circular] } } },
               taints: { __data: { '$arguments': true } },
               dynamic: false,
               block: 
                { type: 'FunctionExpression',
                  id: { type: 'Identifier', name: 'replyA' },
                  params: 
                   [ { type: 'Identifier', name: 'req' },
                     { type: 'Identifier', name: 'res' } ],
                  defaults: [],
                  body: 
                   { type: 'BlockStatement',
                     body: 
                      [ { type: 'ExpressionStatement',
                          expression: 
                           { type: 'CallExpression',
                             callee: 
                              { type: 'MemberExpression',
                                computed: false,
                                object: { type: 'Identifier', name: 'res' },
                                property: { type: 'Identifier', name: 'send' } },
                             arguments: 
                              [ { type: 'BinaryExpression',
                                  operator: '+',
                                  left: { type: 'Literal', value: '', raw: '""' },
                                  right: { type: 'Identifier', name: '_rep' } } ] } },
                        { type: 'ExpressionStatement',
                          expression: 
                           { type: 'AssignmentExpression',
                             operator: '+=',
                             left: { type: 'Identifier', name: '_rep' },
                             right: { type: 'Literal', value: 1, raw: '1' } } } ] },
                  rest: null,
                  generator: false,
                  expression: false },
               through: 
                [ [Circular],
                  { identifier: { type: 'Identifier', name: '_rep' },
                    from: [Circular],
                    tainted: false,
                    resolved: null,
                    flag: 3,
                    writeExpr: { type: 'Literal', value: 1, raw: '1' },
                    __maybeImplicitGlobal: undefined } ],
               variables: 
                [ { name: 'arguments',
                    identifiers: [],
                    references: [],
                    defs: [],
                    tainted: false,
                    stack: true,
                    scope: [Circular] },
                  { name: 'req',
                    identifiers: [ { type: 'Identifier', name: 'req' } ],
                    references: [],
                    defs: 
                     [ { type: 'Parameter',
                         name: { type: 'Identifier', name: 'req' },
                         node: 
                          { type: 'FunctionExpression',
                            id: { type: 'Identifier', name: 'replyA' },
                            params: 
                             [ { type: 'Identifier', name: 'req' },
                               { type: 'Identifier', name: 'res' } ],
                            defaults: [],
                            body: 
                             { type: 'BlockStatement',
                               body: 
                                [ { type: 'ExpressionStatement',
                                    expression: 
                                     { type: 'CallExpression',
                                       callee: 
                                        { type: 'MemberExpression',
                                          computed: false,
                                          object: { type: 'Identifier', name: 'res' },
                                          property: { type: 'Identifier', name: 'send' } },
                                       arguments: 
                                        [ { type: 'BinaryExpression',
                                            operator: '+',
                                            left: { type: 'Literal', value: '', raw: '""' },
                                            right: { type: 'Identifier', name: '_rep' } } ] } },
                                  { type: 'ExpressionStatement',
                                    expression: 
                                     { type: 'AssignmentExpression',
                                       operator: '+=',
                                       left: { type: 'Identifier', name: '_rep' },
                                       right: { type: 'Literal', value: 1, raw: '1' } } } ] },
                            rest: null,
                            generator: false,
                            expression: false },
                         index: 0 } ],
                    tainted: false,
                    stack: true,
                    scope: [Circular] },
                  { name: 'res',
                    identifiers: [ { type: 'Identifier', name: 'res' } ],
                    references: 
                     [ { identifier: { type: 'Identifier', name: 'res' },
                         from: [Circular],
                         tainted: false,
                         resolved: [Circular],
                         flag: 1,
                         __maybeImplicitGlobal: undefined } ],
                    defs: 
                     [ { type: 'Parameter',
                         name: { type: 'Identifier', name: 'res' },
                         node: 
                          { type: 'FunctionExpression',
                            id: { type: 'Identifier', name: 'replyA' },
                            params: 
                             [ { type: 'Identifier', name: 'req' },
                               { type: 'Identifier', name: 'res' } ],
                            defaults: [],
                            body: 
                             { type: 'BlockStatement',
                               body: 
                                [ { type: 'ExpressionStatement',
                                    expression: 
                                     { type: 'CallExpression',
                                       callee: 
                                        { type: 'MemberExpression',
                                          computed: false,
                                          object: { type: 'Identifier', name: 'res' },
                                          property: { type: 'Identifier', name: 'send' } },
                                       arguments: 
                                        [ { type: 'BinaryExpression',
                                            operator: '+',
                                            left: { type: 'Literal', value: '', raw: '""' },
                                            right: { type: 'Identifier', name: '_rep' } } ] } },
                                  { type: 'ExpressionStatement',
                                    expression: 
                                     { type: 'AssignmentExpression',
                                       operator: '+=',
                                       left: { type: 'Identifier', name: '_rep' },
                                       right: { type: 'Literal', value: 1, raw: '1' } } } ] },
                            rest: null,
                            generator: false,
                            expression: false },
                         index: 1 } ],
                    tainted: false,
                    stack: true,
                    scope: [Circular] } ],
               references: 
                [ { identifier: { type: 'Identifier', name: 'res' },
                    from: [Circular],
                    tainted: false,
                    resolved: 
                     { name: 'res',
                       identifiers: [ { type: 'Identifier', name: 'res' } ],
                       references: [ [Circular] ],
                       defs: 
                        [ { type: 'Parameter',
                            name: { type: 'Identifier', name: 'res' },
                            node: 
                             { type: 'FunctionExpression',
                               id: { type: 'Identifier', name: 'replyA' },
                               params: 
                                [ { type: 'Identifier', name: 'req' },
                                  { type: 'Identifier', name: 'res' } ],
                               defaults: [],
                               body: 
                                { type: 'BlockStatement',
                                  body: 
                                   [ { type: 'ExpressionStatement',
                                       expression: 
                                        { type: 'CallExpression',
                                          callee: 
                                           { type: 'MemberExpression',
                                             computed: false,
                                             object: { type: 'Identifier', name: 'res' },
                                             property: { type: 'Identifier', name: 'send' } },
                                          arguments: 
                                           [ { type: 'BinaryExpression',
                                               operator: '+',
                                               left: { type: 'Literal', value: '', raw: '""' },
                                               right: { type: 'Identifier', name: '_rep' } } ] } },
                                     { type: 'ExpressionStatement',
                                       expression: 
                                        { type: 'AssignmentExpression',
                                          operator: '+=',
                                          left: { type: 'Identifier', name: '_rep' },
                                          right: { type: 'Literal', value: 1, raw: '1' } } } ] },
                               rest: null,
                               generator: false,
                               expression: false },
                            index: 1 } ],
                       tainted: false,
                       stack: true,
                       scope: [Circular] },
                    flag: 1,
                    __maybeImplicitGlobal: undefined },
                  [Circular],
                  { identifier: { type: 'Identifier', name: '_rep' },
                    from: [Circular],
                    tainted: false,
                    resolved: null,
                    flag: 3,
                    writeExpr: { type: 'Literal', value: 1, raw: '1' },
                    __maybeImplicitGlobal: undefined } ],
               left: null,
               variableScope: [Circular],
               functionExpressionScope: false,
               directCallToEvalScope: false,
               thisFound: false,
               upper: 
                { type: 'function',
                  set: 
                   { __data: 
                      { '$replyA': 
                         { name: 'replyA',
                           identifiers: [ { type: 'Identifier', name: 'replyA' } ],
                           references: [],
                           defs: 
                            [ { type: 'FunctionName',
                                name: { type: 'Identifier', name: 'replyA' },
                                node: 
                                 { type: 'FunctionExpression',
                                   id: { type: 'Identifier', name: 'replyA' },
                                   params: 
                                    [ { type: 'Identifier', name: 'req' },
                                      { type: 'Identifier', name: 'res' } ],
                                   defaults: [],
                                   body: 
                                    { type: 'BlockStatement',
                                      body: 
                                       [ { type: 'ExpressionStatement',
                                           expression: 
                                            { type: 'CallExpression',
                                              callee: 
                                               { type: 'MemberExpression',
                                                 computed: false,
                                                 object: { type: 'Identifier', name: 'res' },
                                                 property: { type: 'Identifier', name: 'send' } },
                                              arguments: 
                                               [ { type: 'BinaryExpression',
                                                   operator: '+',
                                                   left: { type: 'Literal', value: '', raw: '""' },
                                                   right: { type: 'Identifier', name: '_rep' } } ] } },
                                         { type: 'ExpressionStatement',
                                           expression: 
                                            { type: 'AssignmentExpression',
                                              operator: '+=',
                                              left: { type: 'Identifier', name: '_rep' },
                                              right: { type: 'Literal', value: 1, raw: '1' } } } ] },
                                   rest: null,
                                   generator: false,
                                   expression: false } } ],
                           tainted: false,
                           stack: true,
                           scope: [Circular] } } },
                  taints: { __data: {} },
                  dynamic: false,
                  block: 
                   { type: 'FunctionExpression',
                     id: { type: 'Identifier', name: 'replyA' },
                     params: 
                      [ { type: 'Identifier', name: 'req' },
                        { type: 'Identifier', name: 'res' } ],
                     defaults: [],
                     body: 
                      { type: 'BlockStatement',
                        body: 
                         [ { type: 'ExpressionStatement',
                             expression: 
                              { type: 'CallExpression',
                                callee: 
                                 { type: 'MemberExpression',
                                   computed: false,
                                   object: { type: 'Identifier', name: 'res' },
                                   property: { type: 'Identifier', name: 'send' } },
                                arguments: 
                                 [ { type: 'BinaryExpression',
                                     operator: '+',
                                     left: { type: 'Literal', value: '', raw: '""' },
                                     right: { type: 'Identifier', name: '_rep' } } ] } },
                           { type: 'ExpressionStatement',
                             expression: 
                              { type: 'AssignmentExpression',
                                operator: '+=',
                                left: { type: 'Identifier', name: '_rep' },
                                right: { type: 'Literal', value: 1, raw: '1' } } } ] },
                     rest: null,
                     generator: false,
                     expression: false },
                  through: 
                   [ [Circular],
                     { identifier: { type: 'Identifier', name: '_rep' },
                       from: [Circular],
                       tainted: false,
                       resolved: null,
                       flag: 3,
                       writeExpr: { type: 'Literal', value: 1, raw: '1' },
                       __maybeImplicitGlobal: undefined } ],
                  variables: 
                   [ { name: 'replyA',
                       identifiers: [ { type: 'Identifier', name: 'replyA' } ],
                       references: [],
                       defs: 
                        [ { type: 'FunctionName',
                            name: { type: 'Identifier', name: 'replyA' },
                            node: 
                             { type: 'FunctionExpression',
                               id: { type: 'Identifier', name: 'replyA' },
                               params: 
                                [ { type: 'Identifier', name: 'req' },
                                  { type: 'Identifier', name: 'res' } ],
                               defaults: [],
                               body: 
                                { type: 'BlockStatement',
                                  body: 
                                   [ { type: 'ExpressionStatement',
                                       expression: 
                                        { type: 'CallExpression',
                                          callee: 
                                           { type: 'MemberExpression',
                                             computed: false,
                                             object: { type: 'Identifier', name: 'res' },
                                             property: { type: 'Identifier', name: 'send' } },
                                          arguments: 
                                           [ { type: 'BinaryExpression',
                                               operator: '+',
                                               left: { type: 'Literal', value: '', raw: '""' },
                                               right: { type: 'Identifier', name: '_rep' } } ] } },
                                     { type: 'ExpressionStatement',
                                       expression: 
                                        { type: 'AssignmentExpression',
                                          operator: '+=',
                                          left: { type: 'Identifier', name: '_rep' },
                                          right: { type: 'Literal', value: 1, raw: '1' } } } ] },
                               rest: null,
                               generator: false,
                               expression: false } } ],
                       tainted: false,
                       stack: true,
                       scope: [Circular] } ],
                  references: [],
                  left: null,
                  variableScope: [Circular],
                  functionExpressionScope: true,
                  directCallToEvalScope: false,
                  thisFound: false,
                  upper: [Circular],
                  isStrict: false,
                  childScopes: [ [Circular] ] },
               isStrict: false,
               childScopes: [] },
            tainted: false,
            resolved: null,
            flag: 1,
            __maybeImplicitGlobal: undefined },
          { identifier: { type: 'Identifier', name: '_rep' },
            from: 
             { type: 'function',
               set: 
                { __data: 
                   { '$arguments': 
                      { name: 'arguments',
                        identifiers: [],
                        references: [],
                        defs: [],
                        tainted: false,
                        stack: true,
                        scope: [Circular] },
                     '$req': 
                      { name: 'req',
                        identifiers: [ { type: 'Identifier', name: 'req' } ],
                        references: [],
                        defs: 
                         [ { type: 'Parameter',
                             name: { type: 'Identifier', name: 'req' },
                             node: 
                              { type: 'FunctionExpression',
                                id: { type: 'Identifier', name: 'replyA' },
                                params: 
                                 [ { type: 'Identifier', name: 'req' },
                                   { type: 'Identifier', name: 'res' } ],
                                defaults: [],
                                body: 
                                 { type: 'BlockStatement',
                                   body: 
                                    [ { type: 'ExpressionStatement',
                                        expression: 
                                         { type: 'CallExpression',
                                           callee: 
                                            { type: 'MemberExpression',
                                              computed: false,
                                              object: { type: 'Identifier', name: 'res' },
                                              property: { type: 'Identifier', name: 'send' } },
                                           arguments: 
                                            [ { type: 'BinaryExpression',
                                                operator: '+',
                                                left: { type: 'Literal', value: '', raw: '""' },
                                                right: { type: 'Identifier', name: '_rep' } } ] } },
                                      { type: 'ExpressionStatement',
                                        expression: 
                                         { type: 'AssignmentExpression',
                                           operator: '+=',
                                           left: { type: 'Identifier', name: '_rep' },
                                           right: { type: 'Literal', value: 1, raw: '1' } } } ] },
                                rest: null,
                                generator: false,
                                expression: false },
                             index: 0 } ],
                        tainted: false,
                        stack: true,
                        scope: [Circular] },
                     '$res': 
                      { name: 'res',
                        identifiers: [ { type: 'Identifier', name: 'res' } ],
                        references: 
                         [ { identifier: { type: 'Identifier', name: 'res' },
                             from: [Circular],
                             tainted: false,
                             resolved: [Circular],
                             flag: 1,
                             __maybeImplicitGlobal: undefined } ],
                        defs: 
                         [ { type: 'Parameter',
                             name: { type: 'Identifier', name: 'res' },
                             node: 
                              { type: 'FunctionExpression',
                                id: { type: 'Identifier', name: 'replyA' },
                                params: 
                                 [ { type: 'Identifier', name: 'req' },
                                   { type: 'Identifier', name: 'res' } ],
                                defaults: [],
                                body: 
                                 { type: 'BlockStatement',
                                   body: 
                                    [ { type: 'ExpressionStatement',
                                        expression: 
                                         { type: 'CallExpression',
                                           callee: 
                                            { type: 'MemberExpression',
                                              computed: false,
                                              object: { type: 'Identifier', name: 'res' },
                                              property: { type: 'Identifier', name: 'send' } },
                                           arguments: 
                                            [ { type: 'BinaryExpression',
                                                operator: '+',
                                                left: { type: 'Literal', value: '', raw: '""' },
                                                right: { type: 'Identifier', name: '_rep' } } ] } },
                                      { type: 'ExpressionStatement',
                                        expression: 
                                         { type: 'AssignmentExpression',
                                           operator: '+=',
                                           left: { type: 'Identifier', name: '_rep' },
                                           right: { type: 'Literal', value: 1, raw: '1' } } } ] },
                                rest: null,
                                generator: false,
                                expression: false },
                             index: 1 } ],
                        tainted: false,
                        stack: true,
                        scope: [Circular] } } },
               taints: { __data: { '$arguments': true } },
               dynamic: false,
               block: 
                { type: 'FunctionExpression',
                  id: { type: 'Identifier', name: 'replyA' },
                  params: 
                   [ { type: 'Identifier', name: 'req' },
                     { type: 'Identifier', name: 'res' } ],
                  defaults: [],
                  body: 
                   { type: 'BlockStatement',
                     body: 
                      [ { type: 'ExpressionStatement',
                          expression: 
                           { type: 'CallExpression',
                             callee: 
                              { type: 'MemberExpression',
                                computed: false,
                                object: { type: 'Identifier', name: 'res' },
                                property: { type: 'Identifier', name: 'send' } },
                             arguments: 
                              [ { type: 'BinaryExpression',
                                  operator: '+',
                                  left: { type: 'Literal', value: '', raw: '""' },
                                  right: { type: 'Identifier', name: '_rep' } } ] } },
                        { type: 'ExpressionStatement',
                          expression: 
                           { type: 'AssignmentExpression',
                             operator: '+=',
                             left: { type: 'Identifier', name: '_rep' },
                             right: { type: 'Literal', value: 1, raw: '1' } } } ] },
                  rest: null,
                  generator: false,
                  expression: false },
               through: 
                [ { identifier: { type: 'Identifier', name: '_rep' },
                    from: [Circular],
                    tainted: false,
                    resolved: null,
                    flag: 1,
                    __maybeImplicitGlobal: undefined },
                  [Circular] ],
               variables: 
                [ { name: 'arguments',
                    identifiers: [],
                    references: [],
                    defs: [],
                    tainted: false,
                    stack: true,
                    scope: [Circular] },
                  { name: 'req',
                    identifiers: [ { type: 'Identifier', name: 'req' } ],
                    references: [],
                    defs: 
                     [ { type: 'Parameter',
                         name: { type: 'Identifier', name: 'req' },
                         node: 
                          { type: 'FunctionExpression',
                            id: { type: 'Identifier', name: 'replyA' },
                            params: 
                             [ { type: 'Identifier', name: 'req' },
                               { type: 'Identifier', name: 'res' } ],
                            defaults: [],
                            body: 
                             { type: 'BlockStatement',
                               body: 
                                [ { type: 'ExpressionStatement',
                                    expression: 
                                     { type: 'CallExpression',
                                       callee: 
                                        { type: 'MemberExpression',
                                          computed: false,
                                          object: { type: 'Identifier', name: 'res' },
                                          property: { type: 'Identifier', name: 'send' } },
                                       arguments: 
                                        [ { type: 'BinaryExpression',
                                            operator: '+',
                                            left: { type: 'Literal', value: '', raw: '""' },
                                            right: { type: 'Identifier', name: '_rep' } } ] } },
                                  { type: 'ExpressionStatement',
                                    expression: 
                                     { type: 'AssignmentExpression',
                                       operator: '+=',
                                       left: { type: 'Identifier', name: '_rep' },
                                       right: { type: 'Literal', value: 1, raw: '1' } } } ] },
                            rest: null,
                            generator: false,
                            expression: false },
                         index: 0 } ],
                    tainted: false,
                    stack: true,
                    scope: [Circular] },
                  { name: 'res',
                    identifiers: [ { type: 'Identifier', name: 'res' } ],
                    references: 
                     [ { identifier: { type: 'Identifier', name: 'res' },
                         from: [Circular],
                         tainted: false,
                         resolved: [Circular],
                         flag: 1,
                         __maybeImplicitGlobal: undefined } ],
                    defs: 
                     [ { type: 'Parameter',
                         name: { type: 'Identifier', name: 'res' },
                         node: 
                          { type: 'FunctionExpression',
                            id: { type: 'Identifier', name: 'replyA' },
                            params: 
                             [ { type: 'Identifier', name: 'req' },
                               { type: 'Identifier', name: 'res' } ],
                            defaults: [],
                            body: 
                             { type: 'BlockStatement',
                               body: 
                                [ { type: 'ExpressionStatement',
                                    expression: 
                                     { type: 'CallExpression',
                                       callee: 
                                        { type: 'MemberExpression',
                                          computed: false,
                                          object: { type: 'Identifier', name: 'res' },
                                          property: { type: 'Identifier', name: 'send' } },
                                       arguments: 
                                        [ { type: 'BinaryExpression',
                                            operator: '+',
                                            left: { type: 'Literal', value: '', raw: '""' },
                                            right: { type: 'Identifier', name: '_rep' } } ] } },
                                  { type: 'ExpressionStatement',
                                    expression: 
                                     { type: 'AssignmentExpression',
                                       operator: '+=',
                                       left: { type: 'Identifier', name: '_rep' },
                                       right: { type: 'Literal', value: 1, raw: '1' } } } ] },
                            rest: null,
                            generator: false,
                            expression: false },
                         index: 1 } ],
                    tainted: false,
                    stack: true,
                    scope: [Circular] } ],
               references: 
                [ { identifier: { type: 'Identifier', name: 'res' },
                    from: [Circular],
                    tainted: false,
                    resolved: 
                     { name: 'res',
                       identifiers: [ { type: 'Identifier', name: 'res' } ],
                       references: [ [Circular] ],
                       defs: 
                        [ { type: 'Parameter',
                            name: { type: 'Identifier', name: 'res' },
                            node: 
                             { type: 'FunctionExpression',
                               id: { type: 'Identifier', name: 'replyA' },
                               params: 
                                [ { type: 'Identifier', name: 'req' },
                                  { type: 'Identifier', name: 'res' } ],
                               defaults: [],
                               body: 
                                { type: 'BlockStatement',
                                  body: 
                                   [ { type: 'ExpressionStatement',
                                       expression: 
                                        { type: 'CallExpression',
                                          callee: 
                                           { type: 'MemberExpression',
                                             computed: false,
                                             object: { type: 'Identifier', name: 'res' },
                                             property: { type: 'Identifier', name: 'send' } },
                                          arguments: 
                                           [ { type: 'BinaryExpression',
                                               operator: '+',
                                               left: { type: 'Literal', value: '', raw: '""' },
                                               right: { type: 'Identifier', name: '_rep' } } ] } },
                                     { type: 'ExpressionStatement',
                                       expression: 
                                        { type: 'AssignmentExpression',
                                          operator: '+=',
                                          left: { type: 'Identifier', name: '_rep' },
                                          right: { type: 'Literal', value: 1, raw: '1' } } } ] },
                               rest: null,
                               generator: false,
                               expression: false },
                            index: 1 } ],
                       tainted: false,
                       stack: true,
                       scope: [Circular] },
                    flag: 1,
                    __maybeImplicitGlobal: undefined },
                  { identifier: { type: 'Identifier', name: '_rep' },
                    from: [Circular],
                    tainted: false,
                    resolved: null,
                    flag: 1,
                    __maybeImplicitGlobal: undefined },
                  [Circular] ],
               left: null,
               variableScope: [Circular],
               functionExpressionScope: false,
               directCallToEvalScope: false,
               thisFound: false,
               upper: 
                { type: 'function',
                  set: 
                   { __data: 
                      { '$replyA': 
                         { name: 'replyA',
                           identifiers: [ { type: 'Identifier', name: 'replyA' } ],
                           references: [],
                           defs: 
                            [ { type: 'FunctionName',
                                name: { type: 'Identifier', name: 'replyA' },
                                node: 
                                 { type: 'FunctionExpression',
                                   id: { type: 'Identifier', name: 'replyA' },
                                   params: 
                                    [ { type: 'Identifier', name: 'req' },
                                      { type: 'Identifier', name: 'res' } ],
                                   defaults: [],
                                   body: 
                                    { type: 'BlockStatement',
                                      body: 
                                       [ { type: 'ExpressionStatement',
                                           expression: 
                                            { type: 'CallExpression',
                                              callee: 
                                               { type: 'MemberExpression',
                                                 computed: false,
                                                 object: { type: 'Identifier', name: 'res' },
                                                 property: { type: 'Identifier', name: 'send' } },
                                              arguments: 
                                               [ { type: 'BinaryExpression',
                                                   operator: '+',
                                                   left: { type: 'Literal', value: '', raw: '""' },
                                                   right: { type: 'Identifier', name: '_rep' } } ] } },
                                         { type: 'ExpressionStatement',
                                           expression: 
                                            { type: 'AssignmentExpression',
                                              operator: '+=',
                                              left: { type: 'Identifier', name: '_rep' },
                                              right: { type: 'Literal', value: 1, raw: '1' } } } ] },
                                   rest: null,
                                   generator: false,
                                   expression: false } } ],
                           tainted: false,
                           stack: true,
                           scope: [Circular] } } },
                  taints: { __data: {} },
                  dynamic: false,
                  block: 
                   { type: 'FunctionExpression',
                     id: { type: 'Identifier', name: 'replyA' },
                     params: 
                      [ { type: 'Identifier', name: 'req' },
                        { type: 'Identifier', name: 'res' } ],
                     defaults: [],
                     body: 
                      { type: 'BlockStatement',
                        body: 
                         [ { type: 'ExpressionStatement',
                             expression: 
                              { type: 'CallExpression',
                                callee: 
                                 { type: 'MemberExpression',
                                   computed: false,
                                   object: { type: 'Identifier', name: 'res' },
                                   property: { type: 'Identifier', name: 'send' } },
                                arguments: 
                                 [ { type: 'BinaryExpression',
                                     operator: '+',
                                     left: { type: 'Literal', value: '', raw: '""' },
                                     right: { type: 'Identifier', name: '_rep' } } ] } },
                           { type: 'ExpressionStatement',
                             expression: 
                              { type: 'AssignmentExpression',
                                operator: '+=',
                                left: { type: 'Identifier', name: '_rep' },
                                right: { type: 'Literal', value: 1, raw: '1' } } } ] },
                     rest: null,
                     generator: false,
                     expression: false },
                  through: 
                   [ { identifier: { type: 'Identifier', name: '_rep' },
                       from: [Circular],
                       tainted: false,
                       resolved: null,
                       flag: 1,
                       __maybeImplicitGlobal: undefined },
                     [Circular] ],
                  variables: 
                   [ { name: 'replyA',
                       identifiers: [ { type: 'Identifier', name: 'replyA' } ],
                       references: [],
                       defs: 
                        [ { type: 'FunctionName',
                            name: { type: 'Identifier', name: 'replyA' },
                            node: 
                             { type: 'FunctionExpression',
                               id: { type: 'Identifier', name: 'replyA' },
                               params: 
                                [ { type: 'Identifier', name: 'req' },
                                  { type: 'Identifier', name: 'res' } ],
                               defaults: [],
                               body: 
                                { type: 'BlockStatement',
                                  body: 
                                   [ { type: 'ExpressionStatement',
                                       expression: 
                                        { type: 'CallExpression',
                                          callee: 
                                           { type: 'MemberExpression',
                                             computed: false,
                                             object: { type: 'Identifier', name: 'res' },
                                             property: { type: 'Identifier', name: 'send' } },
                                          arguments: 
                                           [ { type: 'BinaryExpression',
                                               operator: '+',
                                               left: { type: 'Literal', value: '', raw: '""' },
                                               right: { type: 'Identifier', name: '_rep' } } ] } },
                                     { type: 'ExpressionStatement',
                                       expression: 
                                        { type: 'AssignmentExpression',
                                          operator: '+=',
                                          left: { type: 'Identifier', name: '_rep' },
                                          right: { type: 'Literal', value: 1, raw: '1' } } } ] },
                               rest: null,
                               generator: false,
                               expression: false } } ],
                       tainted: false,
                       stack: true,
                       scope: [Circular] } ],
                  references: [],
                  left: null,
                  variableScope: [Circular],
                  functionExpressionScope: true,
                  directCallToEvalScope: false,
                  thisFound: false,
                  upper: [Circular],
                  isStrict: false,
                  childScopes: [ [Circular] ] },
               isStrict: false,
               childScopes: [] },
            tainted: false,
            resolved: null,
            flag: 3,
            writeExpr: { type: 'Literal', value: 1, raw: '1' },
            __maybeImplicitGlobal: undefined },
          { identifier: { type: 'Identifier', name: 'app' },
            from: [Circular],
            tainted: false,
            resolved: null,
            flag: 1,
            __maybeImplicitGlobal: undefined },
          { identifier: { type: 'Identifier', name: '_rep' },
            from: 
             { type: 'function',
               set: 
                { __data: 
                   { '$arguments': 
                      { name: 'arguments',
                        identifiers: [],
                        references: [],
                        defs: [],
                        tainted: false,
                        stack: true,
                        scope: [Circular] },
                     '$req': 
                      { name: 'req',
                        identifiers: [ { type: 'Identifier', name: 'req' } ],
                        references: [],
                        defs: 
                         [ { type: 'Parameter',
                             name: { type: 'Identifier', name: 'req' },
                             node: 
                              { type: 'FunctionExpression',
                                id: { type: 'Identifier', name: 'replyB' },
                                params: 
                                 [ { type: 'Identifier', name: 'req' },
                                   { type: 'Identifier', name: 'res' } ],
                                defaults: [],
                                body: 
                                 { type: 'BlockStatement',
                                   body: 
                                    [ { type: 'ExpressionStatement',
                                        expression: 
                                         { type: 'CallExpression',
                                           callee: 
                                            { type: 'MemberExpression',
                                              computed: false,
                                              object: { type: 'Identifier', name: 'res' },
                                              property: { type: 'Identifier', name: 'send' } },
                                           arguments: 
                                            [ { type: 'BinaryExpression',
                                                operator: '+',
                                                left: { type: 'Literal', value: '', raw: '""' },
                                                right: { type: 'Identifier', name: '_rep' } } ] } },
                                      { type: 'ExpressionStatement',
                                        expression: 
                                         { type: 'AssignmentExpression',
                                           operator: '+=',
                                           left: { type: 'Identifier', name: '_rep' },
                                           right: { type: 'Literal', value: 2, raw: '2' } } } ] },
                                rest: null,
                                generator: false,
                                expression: false },
                             index: 0 } ],
                        tainted: false,
                        stack: true,
                        scope: [Circular] },
                     '$res': 
                      { name: 'res',
                        identifiers: [ { type: 'Identifier', name: 'res' } ],
                        references: 
                         [ { identifier: { type: 'Identifier', name: 'res' },
                             from: [Circular],
                             tainted: false,
                             resolved: [Circular],
                             flag: 1,
                             __maybeImplicitGlobal: undefined } ],
                        defs: 
                         [ { type: 'Parameter',
                             name: { type: 'Identifier', name: 'res' },
                             node: 
                              { type: 'FunctionExpression',
                                id: { type: 'Identifier', name: 'replyB' },
                                params: 
                                 [ { type: 'Identifier', name: 'req' },
                                   { type: 'Identifier', name: 'res' } ],
                                defaults: [],
                                body: 
                                 { type: 'BlockStatement',
                                   body: 
                                    [ { type: 'ExpressionStatement',
                                        expression: 
                                         { type: 'CallExpression',
                                           callee: 
                                            { type: 'MemberExpression',
                                              computed: false,
                                              object: { type: 'Identifier', name: 'res' },
                                              property: { type: 'Identifier', name: 'send' } },
                                           arguments: 
                                            [ { type: 'BinaryExpression',
                                                operator: '+',
                                                left: { type: 'Literal', value: '', raw: '""' },
                                                right: { type: 'Identifier', name: '_rep' } } ] } },
                                      { type: 'ExpressionStatement',
                                        expression: 
                                         { type: 'AssignmentExpression',
                                           operator: '+=',
                                           left: { type: 'Identifier', name: '_rep' },
                                           right: { type: 'Literal', value: 2, raw: '2' } } } ] },
                                rest: null,
                                generator: false,
                                expression: false },
                             index: 1 } ],
                        tainted: false,
                        stack: true,
                        scope: [Circular] } } },
               taints: { __data: { '$arguments': true } },
               dynamic: false,
               block: 
                { type: 'FunctionExpression',
                  id: { type: 'Identifier', name: 'replyB' },
                  params: 
                   [ { type: 'Identifier', name: 'req' },
                     { type: 'Identifier', name: 'res' } ],
                  defaults: [],
                  body: 
                   { type: 'BlockStatement',
                     body: 
                      [ { type: 'ExpressionStatement',
                          expression: 
                           { type: 'CallExpression',
                             callee: 
                              { type: 'MemberExpression',
                                computed: false,
                                object: { type: 'Identifier', name: 'res' },
                                property: { type: 'Identifier', name: 'send' } },
                             arguments: 
                              [ { type: 'BinaryExpression',
                                  operator: '+',
                                  left: { type: 'Literal', value: '', raw: '""' },
                                  right: { type: 'Identifier', name: '_rep' } } ] } },
                        { type: 'ExpressionStatement',
                          expression: 
                           { type: 'AssignmentExpression',
                             operator: '+=',
                             left: { type: 'Identifier', name: '_rep' },
                             right: { type: 'Literal', value: 2, raw: '2' } } } ] },
                  rest: null,
                  generator: false,
                  expression: false },
               through: 
                [ [Circular],
                  { identifier: { type: 'Identifier', name: '_rep' },
                    from: [Circular],
                    tainted: false,
                    resolved: null,
                    flag: 3,
                    writeExpr: { type: 'Literal', value: 2, raw: '2' },
                    __maybeImplicitGlobal: undefined } ],
               variables: 
                [ { name: 'arguments',
                    identifiers: [],
                    references: [],
                    defs: [],
                    tainted: false,
                    stack: true,
                    scope: [Circular] },
                  { name: 'req',
                    identifiers: [ { type: 'Identifier', name: 'req' } ],
                    references: [],
                    defs: 
                     [ { type: 'Parameter',
                         name: { type: 'Identifier', name: 'req' },
                         node: 
                          { type: 'FunctionExpression',
                            id: { type: 'Identifier', name: 'replyB' },
                            params: 
                             [ { type: 'Identifier', name: 'req' },
                               { type: 'Identifier', name: 'res' } ],
                            defaults: [],
                            body: 
                             { type: 'BlockStatement',
                               body: 
                                [ { type: 'ExpressionStatement',
                                    expression: 
                                     { type: 'CallExpression',
                                       callee: 
                                        { type: 'MemberExpression',
                                          computed: false,
                                          object: { type: 'Identifier', name: 'res' },
                                          property: { type: 'Identifier', name: 'send' } },
                                       arguments: 
                                        [ { type: 'BinaryExpression',
                                            operator: '+',
                                            left: { type: 'Literal', value: '', raw: '""' },
                                            right: { type: 'Identifier', name: '_rep' } } ] } },
                                  { type: 'ExpressionStatement',
                                    expression: 
                                     { type: 'AssignmentExpression',
                                       operator: '+=',
                                       left: { type: 'Identifier', name: '_rep' },
                                       right: { type: 'Literal', value: 2, raw: '2' } } } ] },
                            rest: null,
                            generator: false,
                            expression: false },
                         index: 0 } ],
                    tainted: false,
                    stack: true,
                    scope: [Circular] },
                  { name: 'res',
                    identifiers: [ { type: 'Identifier', name: 'res' } ],
                    references: 
                     [ { identifier: { type: 'Identifier', name: 'res' },
                         from: [Circular],
                         tainted: false,
                         resolved: [Circular],
                         flag: 1,
                         __maybeImplicitGlobal: undefined } ],
                    defs: 
                     [ { type: 'Parameter',
                         name: { type: 'Identifier', name: 'res' },
                         node: 
                          { type: 'FunctionExpression',
                            id: { type: 'Identifier', name: 'replyB' },
                            params: 
                             [ { type: 'Identifier', name: 'req' },
                               { type: 'Identifier', name: 'res' } ],
                            defaults: [],
                            body: 
                             { type: 'BlockStatement',
                               body: 
                                [ { type: 'ExpressionStatement',
                                    expression: 
                                     { type: 'CallExpression',
                                       callee: 
                                        { type: 'MemberExpression',
                                          computed: false,
                                          object: { type: 'Identifier', name: 'res' },
                                          property: { type: 'Identifier', name: 'send' } },
                                       arguments: 
                                        [ { type: 'BinaryExpression',
                                            operator: '+',
                                            left: { type: 'Literal', value: '', raw: '""' },
                                            right: { type: 'Identifier', name: '_rep' } } ] } },
                                  { type: 'ExpressionStatement',
                                    expression: 
                                     { type: 'AssignmentExpression',
                                       operator: '+=',
                                       left: { type: 'Identifier', name: '_rep' },
                                       right: { type: 'Literal', value: 2, raw: '2' } } } ] },
                            rest: null,
                            generator: false,
                            expression: false },
                         index: 1 } ],
                    tainted: false,
                    stack: true,
                    scope: [Circular] } ],
               references: 
                [ { identifier: { type: 'Identifier', name: 'res' },
                    from: [Circular],
                    tainted: false,
                    resolved: 
                     { name: 'res',
                       identifiers: [ { type: 'Identifier', name: 'res' } ],
                       references: [ [Circular] ],
                       defs: 
                        [ { type: 'Parameter',
                            name: { type: 'Identifier', name: 'res' },
                            node: 
                             { type: 'FunctionExpression',
                               id: { type: 'Identifier', name: 'replyB' },
                               params: 
                                [ { type: 'Identifier', name: 'req' },
                                  { type: 'Identifier', name: 'res' } ],
                               defaults: [],
                               body: 
                                { type: 'BlockStatement',
                                  body: 
                                   [ { type: 'ExpressionStatement',
                                       expression: 
                                        { type: 'CallExpression',
                                          callee: 
                                           { type: 'MemberExpression',
                                             computed: false,
                                             object: { type: 'Identifier', name: 'res' },
                                             property: { type: 'Identifier', name: 'send' } },
                                          arguments: 
                                           [ { type: 'BinaryExpression',
                                               operator: '+',
                                               left: { type: 'Literal', value: '', raw: '""' },
                                               right: { type: 'Identifier', name: '_rep' } } ] } },
                                     { type: 'ExpressionStatement',
                                       expression: 
                                        { type: 'AssignmentExpression',
                                          operator: '+=',
                                          left: { type: 'Identifier', name: '_rep' },
                                          right: { type: 'Literal', value: 2, raw: '2' } } } ] },
                               rest: null,
                               generator: false,
                               expression: false },
                            index: 1 } ],
                       tainted: false,
                       stack: true,
                       scope: [Circular] },
                    flag: 1,
                    __maybeImplicitGlobal: undefined },
                  [Circular],
                  { identifier: { type: 'Identifier', name: '_rep' },
                    from: [Circular],
                    tainted: false,
                    resolved: null,
                    flag: 3,
                    writeExpr: { type: 'Literal', value: 2, raw: '2' },
                    __maybeImplicitGlobal: undefined } ],
               left: null,
               variableScope: [Circular],
               functionExpressionScope: false,
               directCallToEvalScope: false,
               thisFound: false,
               upper: 
                { type: 'function',
                  set: 
                   { __data: 
                      { '$replyB': 
                         { name: 'replyB',
                           identifiers: [ { type: 'Identifier', name: 'replyB' } ],
                           references: [],
                           defs: 
                            [ { type: 'FunctionName',
                                name: { type: 'Identifier', name: 'replyB' },
                                node: 
                                 { type: 'FunctionExpression',
                                   id: { type: 'Identifier', name: 'replyB' },
                                   params: 
                                    [ { type: 'Identifier', name: 'req' },
                                      { type: 'Identifier', name: 'res' } ],
                                   defaults: [],
                                   body: 
                                    { type: 'BlockStatement',
                                      body: 
                                       [ { type: 'ExpressionStatement',
                                           expression: 
                                            { type: 'CallExpression',
                                              callee: 
                                               { type: 'MemberExpression',
                                                 computed: false,
                                                 object: { type: 'Identifier', name: 'res' },
                                                 property: { type: 'Identifier', name: 'send' } },
                                              arguments: 
                                               [ { type: 'BinaryExpression',
                                                   operator: '+',
                                                   left: { type: 'Literal', value: '', raw: '""' },
                                                   right: { type: 'Identifier', name: '_rep' } } ] } },
                                         { type: 'ExpressionStatement',
                                           expression: 
                                            { type: 'AssignmentExpression',
                                              operator: '+=',
                                              left: { type: 'Identifier', name: '_rep' },
                                              right: { type: 'Literal', value: 2, raw: '2' } } } ] },
                                   rest: null,
                                   generator: false,
                                   expression: false } } ],
                           tainted: false,
                           stack: true,
                           scope: [Circular] } } },
                  taints: { __data: {} },
                  dynamic: false,
                  block: 
                   { type: 'FunctionExpression',
                     id: { type: 'Identifier', name: 'replyB' },
                     params: 
                      [ { type: 'Identifier', name: 'req' },
                        { type: 'Identifier', name: 'res' } ],
                     defaults: [],
                     body: 
                      { type: 'BlockStatement',
                        body: 
                         [ { type: 'ExpressionStatement',
                             expression: 
                              { type: 'CallExpression',
                                callee: 
                                 { type: 'MemberExpression',
                                   computed: false,
                                   object: { type: 'Identifier', name: 'res' },
                                   property: { type: 'Identifier', name: 'send' } },
                                arguments: 
                                 [ { type: 'BinaryExpression',
                                     operator: '+',
                                     left: { type: 'Literal', value: '', raw: '""' },
                                     right: { type: 'Identifier', name: '_rep' } } ] } },
                           { type: 'ExpressionStatement',
                             expression: 
                              { type: 'AssignmentExpression',
                                operator: '+=',
                                left: { type: 'Identifier', name: '_rep' },
                                right: { type: 'Literal', value: 2, raw: '2' } } } ] },
                     rest: null,
                     generator: false,
                     expression: false },
                  through: 
                   [ [Circular],
                     { identifier: { type: 'Identifier', name: '_rep' },
                       from: [Circular],
                       tainted: false,
                       resolved: null,
                       flag: 3,
                       writeExpr: { type: 'Literal', value: 2, raw: '2' },
                       __maybeImplicitGlobal: undefined } ],
                  variables: 
                   [ { name: 'replyB',
                       identifiers: [ { type: 'Identifier', name: 'replyB' } ],
                       references: [],
                       defs: 
                        [ { type: 'FunctionName',
                            name: { type: 'Identifier', name: 'replyB' },
                            node: 
                             { type: 'FunctionExpression',
                               id: { type: 'Identifier', name: 'replyB' },
                               params: 
                                [ { type: 'Identifier', name: 'req' },
                                  { type: 'Identifier', name: 'res' } ],
                               defaults: [],
                               body: 
                                { type: 'BlockStatement',
                                  body: 
                                   [ { type: 'ExpressionStatement',
                                       expression: 
                                        { type: 'CallExpression',
                                          callee: 
                                           { type: 'MemberExpression',
                                             computed: false,
                                             object: { type: 'Identifier', name: 'res' },
                                             property: { type: 'Identifier', name: 'send' } },
                                          arguments: 
                                           [ { type: 'BinaryExpression',
                                               operator: '+',
                                               left: { type: 'Literal', value: '', raw: '""' },
                                               right: { type: 'Identifier', name: '_rep' } } ] } },
                                     { type: 'ExpressionStatement',
                                       expression: 
                                        { type: 'AssignmentExpression',
                                          operator: '+=',
                                          left: { type: 'Identifier', name: '_rep' },
                                          right: { type: 'Literal', value: 2, raw: '2' } } } ] },
                               rest: null,
                               generator: false,
                               expression: false } } ],
                       tainted: false,
                       stack: true,
                       scope: [Circular] } ],
                  references: [],
                  left: null,
                  variableScope: [Circular],
                  functionExpressionScope: true,
                  directCallToEvalScope: false,
                  thisFound: false,
                  upper: [Circular],
                  isStrict: false,
                  childScopes: [ [Circular] ] },
               isStrict: false,
               childScopes: [] },
            tainted: false,
            resolved: null,
            flag: 1,
            __maybeImplicitGlobal: undefined },
          { identifier: { type: 'Identifier', name: '_rep' },
            from: 
             { type: 'function',
               set: 
                { __data: 
                   { '$arguments': 
                      { name: 'arguments',
                        identifiers: [],
                        references: [],
                        defs: [],
                        tainted: false,
                        stack: true,
                        scope: [Circular] },
                     '$req': 
                      { name: 'req',
                        identifiers: [ { type: 'Identifier', name: 'req' } ],
                        references: [],
                        defs: 
                         [ { type: 'Parameter',
                             name: { type: 'Identifier', name: 'req' },
                             node: 
                              { type: 'FunctionExpression',
                                id: { type: 'Identifier', name: 'replyB' },
                                params: 
                                 [ { type: 'Identifier', name: 'req' },
                                   { type: 'Identifier', name: 'res' } ],
                                defaults: [],
                                body: 
                                 { type: 'BlockStatement',
                                   body: 
                                    [ { type: 'ExpressionStatement',
                                        expression: 
                                         { type: 'CallExpression',
                                           callee: 
                                            { type: 'MemberExpression',
                                              computed: false,
                                              object: { type: 'Identifier', name: 'res' },
                                              property: { type: 'Identifier', name: 'send' } },
                                           arguments: 
                                            [ { type: 'BinaryExpression',
                                                operator: '+',
                                                left: { type: 'Literal', value: '', raw: '""' },
                                                right: { type: 'Identifier', name: '_rep' } } ] } },
                                      { type: 'ExpressionStatement',
                                        expression: 
                                         { type: 'AssignmentExpression',
                                           operator: '+=',
                                           left: { type: 'Identifier', name: '_rep' },
                                           right: { type: 'Literal', value: 2, raw: '2' } } } ] },
                                rest: null,
                                generator: false,
                                expression: false },
                             index: 0 } ],
                        tainted: false,
                        stack: true,
                        scope: [Circular] },
                     '$res': 
                      { name: 'res',
                        identifiers: [ { type: 'Identifier', name: 'res' } ],
                        references: 
                         [ { identifier: { type: 'Identifier', name: 'res' },
                             from: [Circular],
                             tainted: false,
                             resolved: [Circular],
                             flag: 1,
                             __maybeImplicitGlobal: undefined } ],
                        defs: 
                         [ { type: 'Parameter',
                             name: { type: 'Identifier', name: 'res' },
                             node: 
                              { type: 'FunctionExpression',
                                id: { type: 'Identifier', name: 'replyB' },
                                params: 
                                 [ { type: 'Identifier', name: 'req' },
                                   { type: 'Identifier', name: 'res' } ],
                                defaults: [],
                                body: 
                                 { type: 'BlockStatement',
                                   body: 
                                    [ { type: 'ExpressionStatement',
                                        expression: 
                                         { type: 'CallExpression',
                                           callee: 
                                            { type: 'MemberExpression',
                                              computed: false,
                                              object: { type: 'Identifier', name: 'res' },
                                              property: { type: 'Identifier', name: 'send' } },
                                           arguments: 
                                            [ { type: 'BinaryExpression',
                                                operator: '+',
                                                left: { type: 'Literal', value: '', raw: '""' },
                                                right: { type: 'Identifier', name: '_rep' } } ] } },
                                      { type: 'ExpressionStatement',
                                        expression: 
                                         { type: 'AssignmentExpression',
                                           operator: '+=',
                                           left: { type: 'Identifier', name: '_rep' },
                                           right: { type: 'Literal', value: 2, raw: '2' } } } ] },
                                rest: null,
                                generator: false,
                                expression: false },
                             index: 1 } ],
                        tainted: false,
                        stack: true,
                        scope: [Circular] } } },
               taints: { __data: { '$arguments': true } },
               dynamic: false,
               block: 
                { type: 'FunctionExpression',
                  id: { type: 'Identifier', name: 'replyB' },
                  params: 
                   [ { type: 'Identifier', name: 'req' },
                     { type: 'Identifier', name: 'res' } ],
                  defaults: [],
                  body: 
                   { type: 'BlockStatement',
                     body: 
                      [ { type: 'ExpressionStatement',
                          expression: 
                           { type: 'CallExpression',
                             callee: 
                              { type: 'MemberExpression',
                                computed: false,
                                object: { type: 'Identifier', name: 'res' },
                                property: { type: 'Identifier', name: 'send' } },
                             arguments: 
                              [ { type: 'BinaryExpression',
                                  operator: '+',
                                  left: { type: 'Literal', value: '', raw: '""' },
                                  right: { type: 'Identifier', name: '_rep' } } ] } },
                        { type: 'ExpressionStatement',
                          expression: 
                           { type: 'AssignmentExpression',
                             operator: '+=',
                             left: { type: 'Identifier', name: '_rep' },
                             right: { type: 'Literal', value: 2, raw: '2' } } } ] },
                  rest: null,
                  generator: false,
                  expression: false },
               through: 
                [ { identifier: { type: 'Identifier', name: '_rep' },
                    from: [Circular],
                    tainted: false,
                    resolved: null,
                    flag: 1,
                    __maybeImplicitGlobal: undefined },
                  [Circular] ],
               variables: 
                [ { name: 'arguments',
                    identifiers: [],
                    references: [],
                    defs: [],
                    tainted: false,
                    stack: true,
                    scope: [Circular] },
                  { name: 'req',
                    identifiers: [ { type: 'Identifier', name: 'req' } ],
                    references: [],
                    defs: 
                     [ { type: 'Parameter',
                         name: { type: 'Identifier', name: 'req' },
                         node: 
                          { type: 'FunctionExpression',
                            id: { type: 'Identifier', name: 'replyB' },
                            params: 
                             [ { type: 'Identifier', name: 'req' },
                               { type: 'Identifier', name: 'res' } ],
                            defaults: [],
                            body: 
                             { type: 'BlockStatement',
                               body: 
                                [ { type: 'ExpressionStatement',
                                    expression: 
                                     { type: 'CallExpression',
                                       callee: 
                                        { type: 'MemberExpression',
                                          computed: false,
                                          object: { type: 'Identifier', name: 'res' },
                                          property: { type: 'Identifier', name: 'send' } },
                                       arguments: 
                                        [ { type: 'BinaryExpression',
                                            operator: '+',
                                            left: { type: 'Literal', value: '', raw: '""' },
                                            right: { type: 'Identifier', name: '_rep' } } ] } },
                                  { type: 'ExpressionStatement',
                                    expression: 
                                     { type: 'AssignmentExpression',
                                       operator: '+=',
                                       left: { type: 'Identifier', name: '_rep' },
                                       right: { type: 'Literal', value: 2, raw: '2' } } } ] },
                            rest: null,
                            generator: false,
                            expression: false },
                         index: 0 } ],
                    tainted: false,
                    stack: true,
                    scope: [Circular] },
                  { name: 'res',
                    identifiers: [ { type: 'Identifier', name: 'res' } ],
                    references: 
                     [ { identifier: { type: 'Identifier', name: 'res' },
                         from: [Circular],
                         tainted: false,
                         resolved: [Circular],
                         flag: 1,
                         __maybeImplicitGlobal: undefined } ],
                    defs: 
                     [ { type: 'Parameter',
                         name: { type: 'Identifier', name: 'res' },
                         node: 
                          { type: 'FunctionExpression',
                            id: { type: 'Identifier', name: 'replyB' },
                            params: 
                             [ { type: 'Identifier', name: 'req' },
                               { type: 'Identifier', name: 'res' } ],
                            defaults: [],
                            body: 
                             { type: 'BlockStatement',
                               body: 
                                [ { type: 'ExpressionStatement',
                                    expression: 
                                     { type: 'CallExpression',
                                       callee: 
                                        { type: 'MemberExpression',
                                          computed: false,
                                          object: { type: 'Identifier', name: 'res' },
                                          property: { type: 'Identifier', name: 'send' } },
                                       arguments: 
                                        [ { type: 'BinaryExpression',
                                            operator: '+',
                                            left: { type: 'Literal', value: '', raw: '""' },
                                            right: { type: 'Identifier', name: '_rep' } } ] } },
                                  { type: 'ExpressionStatement',
                                    expression: 
                                     { type: 'AssignmentExpression',
                                       operator: '+=',
                                       left: { type: 'Identifier', name: '_rep' },
                                       right: { type: 'Literal', value: 2, raw: '2' } } } ] },
                            rest: null,
                            generator: false,
                            expression: false },
                         index: 1 } ],
                    tainted: false,
                    stack: true,
                    scope: [Circular] } ],
               references: 
                [ { identifier: { type: 'Identifier', name: 'res' },
                    from: [Circular],
                    tainted: false,
                    resolved: 
                     { name: 'res',
                       identifiers: [ { type: 'Identifier', name: 'res' } ],
                       references: [ [Circular] ],
                       defs: 
                        [ { type: 'Parameter',
                            name: { type: 'Identifier', name: 'res' },
                            node: 
                             { type: 'FunctionExpression',
                               id: { type: 'Identifier', name: 'replyB' },
                               params: 
                                [ { type: 'Identifier', name: 'req' },
                                  { type: 'Identifier', name: 'res' } ],
                               defaults: [],
                               body: 
                                { type: 'BlockStatement',
                                  body: 
                                   [ { type: 'ExpressionStatement',
                                       expression: 
                                        { type: 'CallExpression',
                                          callee: 
                                           { type: 'MemberExpression',
                                             computed: false,
                                             object: { type: 'Identifier', name: 'res' },
                                             property: { type: 'Identifier', name: 'send' } },
                                          arguments: 
                                           [ { type: 'BinaryExpression',
                                               operator: '+',
                                               left: { type: 'Literal', value: '', raw: '""' },
                                               right: { type: 'Identifier', name: '_rep' } } ] } },
                                     { type: 'ExpressionStatement',
                                       expression: 
                                        { type: 'AssignmentExpression',
                                          operator: '+=',
                                          left: { type: 'Identifier', name: '_rep' },
                                          right: { type: 'Literal', value: 2, raw: '2' } } } ] },
                               rest: null,
                               generator: false,
                               expression: false },
                            index: 1 } ],
                       tainted: false,
                       stack: true,
                       scope: [Circular] },
                    flag: 1,
                    __maybeImplicitGlobal: undefined },
                  { identifier: { type: 'Identifier', name: '_rep' },
                    from: [Circular],
                    tainted: false,
                    resolved: null,
                    flag: 1,
                    __maybeImplicitGlobal: undefined },
                  [Circular] ],
               left: null,
               variableScope: [Circular],
               functionExpressionScope: false,
               directCallToEvalScope: false,
               thisFound: false,
               upper: 
                { type: 'function',
                  set: 
                   { __data: 
                      { '$replyB': 
                         { name: 'replyB',
                           identifiers: [ { type: 'Identifier', name: 'replyB' } ],
                           references: [],
                           defs: 
                            [ { type: 'FunctionName',
                                name: { type: 'Identifier', name: 'replyB' },
                                node: 
                                 { type: 'FunctionExpression',
                                   id: { type: 'Identifier', name: 'replyB' },
                                   params: 
                                    [ { type: 'Identifier', name: 'req' },
                                      { type: 'Identifier', name: 'res' } ],
                                   defaults: [],
                                   body: 
                                    { type: 'BlockStatement',
                                      body: 
                                       [ { type: 'ExpressionStatement',
                                           expression: 
                                            { type: 'CallExpression',
                                              callee: 
                                               { type: 'MemberExpression',
                                                 computed: false,
                                                 object: { type: 'Identifier', name: 'res' },
                                                 property: { type: 'Identifier', name: 'send' } },
                                              arguments: 
                                               [ { type: 'BinaryExpression',
                                                   operator: '+',
                                                   left: { type: 'Literal', value: '', raw: '""' },
                                                   right: { type: 'Identifier', name: '_rep' } } ] } },
                                         { type: 'ExpressionStatement',
                                           expression: 
                                            { type: 'AssignmentExpression',
                                              operator: '+=',
                                              left: { type: 'Identifier', name: '_rep' },
                                              right: { type: 'Literal', value: 2, raw: '2' } } } ] },
                                   rest: null,
                                   generator: false,
                                   expression: false } } ],
                           tainted: false,
                           stack: true,
                           scope: [Circular] } } },
                  taints: { __data: {} },
                  dynamic: false,
                  block: 
                   { type: 'FunctionExpression',
                     id: { type: 'Identifier', name: 'replyB' },
                     params: 
                      [ { type: 'Identifier', name: 'req' },
                        { type: 'Identifier', name: 'res' } ],
                     defaults: [],
                     body: 
                      { type: 'BlockStatement',
                        body: 
                         [ { type: 'ExpressionStatement',
                             expression: 
                              { type: 'CallExpression',
                                callee: 
                                 { type: 'MemberExpression',
                                   computed: false,
                                   object: { type: 'Identifier', name: 'res' },
                                   property: { type: 'Identifier', name: 'send' } },
                                arguments: 
                                 [ { type: 'BinaryExpression',
                                     operator: '+',
                                     left: { type: 'Literal', value: '', raw: '""' },
                                     right: { type: 'Identifier', name: '_rep' } } ] } },
                           { type: 'ExpressionStatement',
                             expression: 
                              { type: 'AssignmentExpression',
                                operator: '+=',
                                left: { type: 'Identifier', name: '_rep' },
                                right: { type: 'Literal', value: 2, raw: '2' } } } ] },
                     rest: null,
                     generator: false,
                     expression: false },
                  through: 
                   [ { identifier: { type: 'Identifier', name: '_rep' },
                       from: [Circular],
                       tainted: false,
                       resolved: null,
                       flag: 1,
                       __maybeImplicitGlobal: undefined },
                     [Circular] ],
                  variables: 
                   [ { name: 'replyB',
                       identifiers: [ { type: 'Identifier', name: 'replyB' } ],
                       references: [],
                       defs: 
                        [ { type: 'FunctionName',
                            name: { type: 'Identifier', name: 'replyB' },
                            node: 
                             { type: 'FunctionExpression',
                               id: { type: 'Identifier', name: 'replyB' },
                               params: 
                                [ { type: 'Identifier', name: 'req' },
                                  { type: 'Identifier', name: 'res' } ],
                               defaults: [],
                               body: 
                                { type: 'BlockStatement',
                                  body: 
                                   [ { type: 'ExpressionStatement',
                                       expression: 
                                        { type: 'CallExpression',
                                          callee: 
                                           { type: 'MemberExpression',
                                             computed: false,
                                             object: { type: 'Identifier', name: 'res' },
                                             property: { type: 'Identifier', name: 'send' } },
                                          arguments: 
                                           [ { type: 'BinaryExpression',
                                               operator: '+',
                                               left: { type: 'Literal', value: '', raw: '""' },
                                               right: { type: 'Identifier', name: '_rep' } } ] } },
                                     { type: 'ExpressionStatement',
                                       expression: 
                                        { type: 'AssignmentExpression',
                                          operator: '+=',
                                          left: { type: 'Identifier', name: '_rep' },
                                          right: { type: 'Literal', value: 2, raw: '2' } } } ] },
                               rest: null,
                               generator: false,
                               expression: false } } ],
                       tainted: false,
                       stack: true,
                       scope: [Circular] } ],
                  references: [],
                  left: null,
                  variableScope: [Circular],
                  functionExpressionScope: true,
                  directCallToEvalScope: false,
                  thisFound: false,
                  upper: [Circular],
                  isStrict: false,
                  childScopes: [ [Circular] ] },
               isStrict: false,
               childScopes: [] },
            tainted: false,
            resolved: null,
            flag: 3,
            writeExpr: { type: 'Literal', value: 2, raw: '2' },
            __maybeImplicitGlobal: undefined },
          { identifier: { type: 'Identifier', name: 'module' },
            from: [Circular],
            tainted: false,
            resolved: null,
            flag: 1,
            __maybeImplicitGlobal: undefined },
          { identifier: { type: 'Identifier', name: 'app' },
            from: [Circular],
            tainted: false,
            resolved: null,
            flag: 1,
            __maybeImplicitGlobal: undefined },
          { identifier: { type: 'Identifier', name: 'console' },
            from: [Circular],
            tainted: false,
            resolved: null,
            flag: 1,
            __maybeImplicitGlobal: undefined },
          { identifier: { type: 'Identifier', name: 'app' },
            from: [Circular],
            tainted: false,
            resolved: null,
            flag: 1,
            __maybeImplicitGlobal: undefined },
          { identifier: { type: 'Identifier', name: 'exports' },
            from: [Circular],
            tainted: false,
            resolved: null,
            flag: 1,
            __maybeImplicitGlobal: undefined } ],
       variables: 
        [ { name: 'app',
            identifiers: [ { type: 'Identifier', name: 'app' } ],
            references: [],
            defs: 
             [ { type: 'Variable',
                 name: { type: 'Identifier', name: 'app' },
                 node: 
                  { type: 'VariableDeclarator',
                    id: { type: 'Identifier', name: 'app' },
                    init: 
                     { type: 'CallExpression',
                       callee: 
                        { type: 'CallExpression',
                          callee: { type: 'Identifier', name: 'require' },
                          arguments: [ { type: 'Literal', value: 'express', raw: '\'express\'' } ] },
                       arguments: [] } },
                 index: 0,
                 parent: 
                  { type: 'VariableDeclaration',
                    declarations: 
                     [ { type: 'VariableDeclarator',
                         id: { type: 'Identifier', name: 'app' },
                         init: 
                          { type: 'CallExpression',
                            callee: 
                             { type: 'CallExpression',
                               callee: { type: 'Identifier', name: 'require' },
                               arguments: [ { type: 'Literal', value: 'express', raw: '\'express\'' } ] },
                            arguments: [] } } ],
                    kind: 'var' } } ],
            tainted: false,
            stack: true,
            scope: [Circular] },
          { name: '_rep',
            identifiers: [ { type: 'Identifier', name: '_rep' } ],
            references: [],
            defs: 
             [ { type: 'Variable',
                 name: { type: 'Identifier', name: '_rep' },
                 node: 
                  { type: 'VariableDeclarator',
                    id: { type: 'Identifier', name: '_rep' },
                    init: { type: 'Literal', value: 42, raw: '42' } },
                 index: 0,
                 parent: 
                  { type: 'VariableDeclaration',
                    declarations: 
                     [ { type: 'VariableDeclarator',
                         id: { type: 'Identifier', name: '_rep' },
                         init: { type: 'Literal', value: 42, raw: '42' } } ],
                    kind: 'var' } } ],
            tainted: false,
            stack: true,
            scope: [Circular] } ],
       references: 
        [ { identifier: { type: 'Identifier', name: 'app' },
            from: [Circular],
            tainted: false,
            resolved: null,
            flag: 2,
            writeExpr: 
             { type: 'CallExpression',
               callee: 
                { type: 'CallExpression',
                  callee: { type: 'Identifier', name: 'require' },
                  arguments: [ { type: 'Literal', value: 'express', raw: '\'express\'' } ] },
               arguments: [] },
            __maybeImplicitGlobal: false },
          { identifier: { type: 'Identifier', name: 'require' },
            from: [Circular],
            tainted: false,
            resolved: null,
            flag: 1,
            __maybeImplicitGlobal: undefined },
          { identifier: { type: 'Identifier', name: '_rep' },
            from: [Circular],
            tainted: false,
            resolved: null,
            flag: 2,
            writeExpr: { type: 'Literal', value: 42, raw: '42' },
            __maybeImplicitGlobal: false },
          { identifier: { type: 'Identifier', name: 'app' },
            from: [Circular],
            tainted: false,
            resolved: null,
            flag: 1,
            __maybeImplicitGlobal: undefined },
          { identifier: { type: 'Identifier', name: 'app' },
            from: [Circular],
            tainted: false,
            resolved: null,
            flag: 1,
            __maybeImplicitGlobal: undefined },
          { identifier: { type: 'Identifier', name: 'module' },
            from: [Circular],
            tainted: false,
            resolved: null,
            flag: 1,
            __maybeImplicitGlobal: undefined },
          { identifier: { type: 'Identifier', name: 'app' },
            from: [Circular],
            tainted: false,
            resolved: null,
            flag: 1,
            __maybeImplicitGlobal: undefined },
          { identifier: { type: 'Identifier', name: 'console' },
            from: [Circular],
            tainted: false,
            resolved: null,
            flag: 1,
            __maybeImplicitGlobal: undefined },
          { identifier: { type: 'Identifier', name: 'app' },
            from: [Circular],
            tainted: false,
            resolved: null,
            flag: 1,
            __maybeImplicitGlobal: undefined },
          { identifier: { type: 'Identifier', name: 'exports' },
            from: [Circular],
            tainted: false,
            resolved: null,
            flag: 1,
            __maybeImplicitGlobal: undefined } ],
       left: null,
       variableScope: [Circular],
       functionExpressionScope: false,
       directCallToEvalScope: false,
       thisFound: false,
       upper: null,
       isStrict: false,
       childScopes: 
        [ { type: 'function',
            set: 
             { __data: 
                { '$replyA': 
                   { name: 'replyA',
                     identifiers: [ { type: 'Identifier', name: 'replyA' } ],
                     references: [],
                     defs: 
                      [ { type: 'FunctionName',
                          name: { type: 'Identifier', name: 'replyA' },
                          node: 
                           { type: 'FunctionExpression',
                             id: { type: 'Identifier', name: 'replyA' },
                             params: 
                              [ { type: 'Identifier', name: 'req' },
                                { type: 'Identifier', name: 'res' } ],
                             defaults: [],
                             body: 
                              { type: 'BlockStatement',
                                body: 
                                 [ { type: 'ExpressionStatement',
                                     expression: 
                                      { type: 'CallExpression',
                                        callee: 
                                         { type: 'MemberExpression',
                                           computed: false,
                                           object: { type: 'Identifier', name: 'res' },
                                           property: { type: 'Identifier', name: 'send' } },
                                        arguments: 
                                         [ { type: 'BinaryExpression',
                                             operator: '+',
                                             left: { type: 'Literal', value: '', raw: '""' },
                                             right: { type: 'Identifier', name: '_rep' } } ] } },
                                   { type: 'ExpressionStatement',
                                     expression: 
                                      { type: 'AssignmentExpression',
                                        operator: '+=',
                                        left: { type: 'Identifier', name: '_rep' },
                                        right: { type: 'Literal', value: 1, raw: '1' } } } ] },
                             rest: null,
                             generator: false,
                             expression: false } } ],
                     tainted: false,
                     stack: true,
                     scope: [Circular] } } },
            taints: { __data: {} },
            dynamic: false,
            block: 
             { type: 'FunctionExpression',
               id: { type: 'Identifier', name: 'replyA' },
               params: 
                [ { type: 'Identifier', name: 'req' },
                  { type: 'Identifier', name: 'res' } ],
               defaults: [],
               body: 
                { type: 'BlockStatement',
                  body: 
                   [ { type: 'ExpressionStatement',
                       expression: 
                        { type: 'CallExpression',
                          callee: 
                           { type: 'MemberExpression',
                             computed: false,
                             object: { type: 'Identifier', name: 'res' },
                             property: { type: 'Identifier', name: 'send' } },
                          arguments: 
                           [ { type: 'BinaryExpression',
                               operator: '+',
                               left: { type: 'Literal', value: '', raw: '""' },
                               right: { type: 'Identifier', name: '_rep' } } ] } },
                     { type: 'ExpressionStatement',
                       expression: 
                        { type: 'AssignmentExpression',
                          operator: '+=',
                          left: { type: 'Identifier', name: '_rep' },
                          right: { type: 'Literal', value: 1, raw: '1' } } } ] },
               rest: null,
               generator: false,
               expression: false },
            through: 
             [ { identifier: { type: 'Identifier', name: '_rep' },
                 from: 
                  { type: 'function',
                    set: 
                     { __data: 
                        { '$arguments': 
                           { name: 'arguments',
                             identifiers: [],
                             references: [],
                             defs: [],
                             tainted: false,
                             stack: true,
                             scope: [Circular] },
                          '$req': 
                           { name: 'req',
                             identifiers: [ { type: 'Identifier', name: 'req' } ],
                             references: [],
                             defs: 
                              [ { type: 'Parameter',
                                  name: { type: 'Identifier', name: 'req' },
                                  node: 
                                   { type: 'FunctionExpression',
                                     id: { type: 'Identifier', name: 'replyA' },
                                     params: 
                                      [ { type: 'Identifier', name: 'req' },
                                        { type: 'Identifier', name: 'res' } ],
                                     defaults: [],
                                     body: 
                                      { type: 'BlockStatement',
                                        body: 
                                         [ { type: 'ExpressionStatement',
                                             expression: 
                                              { type: 'CallExpression',
                                                callee: 
                                                 { type: 'MemberExpression',
                                                   computed: false,
                                                   object: { type: 'Identifier', name: 'res' },
                                                   property: { type: 'Identifier', name: 'send' } },
                                                arguments: 
                                                 [ { type: 'BinaryExpression',
                                                     operator: '+',
                                                     left: { type: 'Literal', value: '', raw: '""' },
                                                     right: { type: 'Identifier', name: '_rep' } } ] } },
                                           { type: 'ExpressionStatement',
                                             expression: 
                                              { type: 'AssignmentExpression',
                                                operator: '+=',
                                                left: { type: 'Identifier', name: '_rep' },
                                                right: { type: 'Literal', value: 1, raw: '1' } } } ] },
                                     rest: null,
                                     generator: false,
                                     expression: false },
                                  index: 0 } ],
                             tainted: false,
                             stack: true,
                             scope: [Circular] },
                          '$res': 
                           { name: 'res',
                             identifiers: [ { type: 'Identifier', name: 'res' } ],
                             references: 
                              [ { identifier: { type: 'Identifier', name: 'res' },
                                  from: [Circular],
                                  tainted: false,
                                  resolved: [Circular],
                                  flag: 1,
                                  __maybeImplicitGlobal: undefined } ],
                             defs: 
                              [ { type: 'Parameter',
                                  name: { type: 'Identifier', name: 'res' },
                                  node: 
                                   { type: 'FunctionExpression',
                                     id: { type: 'Identifier', name: 'replyA' },
                                     params: 
                                      [ { type: 'Identifier', name: 'req' },
                                        { type: 'Identifier', name: 'res' } ],
                                     defaults: [],
                                     body: 
                                      { type: 'BlockStatement',
                                        body: 
                                         [ { type: 'ExpressionStatement',
                                             expression: 
                                              { type: 'CallExpression',
                                                callee: 
                                                 { type: 'MemberExpression',
                                                   computed: false,
                                                   object: { type: 'Identifier', name: 'res' },
                                                   property: { type: 'Identifier', name: 'send' } },
                                                arguments: 
                                                 [ { type: 'BinaryExpression',
                                                     operator: '+',
                                                     left: { type: 'Literal', value: '', raw: '""' },
                                                     right: { type: 'Identifier', name: '_rep' } } ] } },
                                           { type: 'ExpressionStatement',
                                             expression: 
                                              { type: 'AssignmentExpression',
                                                operator: '+=',
                                                left: { type: 'Identifier', name: '_rep' },
                                                right: { type: 'Literal', value: 1, raw: '1' } } } ] },
                                     rest: null,
                                     generator: false,
                                     expression: false },
                                  index: 1 } ],
                             tainted: false,
                             stack: true,
                             scope: [Circular] } } },
                    taints: { __data: { '$arguments': true } },
                    dynamic: false,
                    block: 
                     { type: 'FunctionExpression',
                       id: { type: 'Identifier', name: 'replyA' },
                       params: 
                        [ { type: 'Identifier', name: 'req' },
                          { type: 'Identifier', name: 'res' } ],
                       defaults: [],
                       body: 
                        { type: 'BlockStatement',
                          body: 
                           [ { type: 'ExpressionStatement',
                               expression: 
                                { type: 'CallExpression',
                                  callee: 
                                   { type: 'MemberExpression',
                                     computed: false,
                                     object: { type: 'Identifier', name: 'res' },
                                     property: { type: 'Identifier', name: 'send' } },
                                  arguments: 
                                   [ { type: 'BinaryExpression',
                                       operator: '+',
                                       left: { type: 'Literal', value: '', raw: '""' },
                                       right: { type: 'Identifier', name: '_rep' } } ] } },
                             { type: 'ExpressionStatement',
                               expression: 
                                { type: 'AssignmentExpression',
                                  operator: '+=',
                                  left: { type: 'Identifier', name: '_rep' },
                                  right: { type: 'Literal', value: 1, raw: '1' } } } ] },
                       rest: null,
                       generator: false,
                       expression: false },
                    through: 
                     [ [Circular],
                       { identifier: { type: 'Identifier', name: '_rep' },
                         from: [Circular],
                         tainted: false,
                         resolved: null,
                         flag: 3,
                         writeExpr: { type: 'Literal', value: 1, raw: '1' },
                         __maybeImplicitGlobal: undefined } ],
                    variables: 
                     [ { name: 'arguments',
                         identifiers: [],
                         references: [],
                         defs: [],
                         tainted: false,
                         stack: true,
                         scope: [Circular] },
                       { name: 'req',
                         identifiers: [ { type: 'Identifier', name: 'req' } ],
                         references: [],
                         defs: 
                          [ { type: 'Parameter',
                              name: { type: 'Identifier', name: 'req' },
                              node: 
                               { type: 'FunctionExpression',
                                 id: { type: 'Identifier', name: 'replyA' },
                                 params: 
                                  [ { type: 'Identifier', name: 'req' },
                                    { type: 'Identifier', name: 'res' } ],
                                 defaults: [],
                                 body: 
                                  { type: 'BlockStatement',
                                    body: 
                                     [ { type: 'ExpressionStatement',
                                         expression: 
                                          { type: 'CallExpression',
                                            callee: 
                                             { type: 'MemberExpression',
                                               computed: false,
                                               object: { type: 'Identifier', name: 'res' },
                                               property: { type: 'Identifier', name: 'send' } },
                                            arguments: 
                                             [ { type: 'BinaryExpression',
                                                 operator: '+',
                                                 left: { type: 'Literal', value: '', raw: '""' },
                                                 right: { type: 'Identifier', name: '_rep' } } ] } },
                                       { type: 'ExpressionStatement',
                                         expression: 
                                          { type: 'AssignmentExpression',
                                            operator: '+=',
                                            left: { type: 'Identifier', name: '_rep' },
                                            right: { type: 'Literal', value: 1, raw: '1' } } } ] },
                                 rest: null,
                                 generator: false,
                                 expression: false },
                              index: 0 } ],
                         tainted: false,
                         stack: true,
                         scope: [Circular] },
                       { name: 'res',
                         identifiers: [ { type: 'Identifier', name: 'res' } ],
                         references: 
                          [ { identifier: { type: 'Identifier', name: 'res' },
                              from: [Circular],
                              tainted: false,
                              resolved: [Circular],
                              flag: 1,
                              __maybeImplicitGlobal: undefined } ],
                         defs: 
                          [ { type: 'Parameter',
                              name: { type: 'Identifier', name: 'res' },
                              node: 
                               { type: 'FunctionExpression',
                                 id: { type: 'Identifier', name: 'replyA' },
                                 params: 
                                  [ { type: 'Identifier', name: 'req' },
                                    { type: 'Identifier', name: 'res' } ],
                                 defaults: [],
                                 body: 
                                  { type: 'BlockStatement',
                                    body: 
                                     [ { type: 'ExpressionStatement',
                                         expression: 
                                          { type: 'CallExpression',
                                            callee: 
                                             { type: 'MemberExpression',
                                               computed: false,
                                               object: { type: 'Identifier', name: 'res' },
                                               property: { type: 'Identifier', name: 'send' } },
                                            arguments: 
                                             [ { type: 'BinaryExpression',
                                                 operator: '+',
                                                 left: { type: 'Literal', value: '', raw: '""' },
                                                 right: { type: 'Identifier', name: '_rep' } } ] } },
                                       { type: 'ExpressionStatement',
                                         expression: 
                                          { type: 'AssignmentExpression',
                                            operator: '+=',
                                            left: { type: 'Identifier', name: '_rep' },
                                            right: { type: 'Literal', value: 1, raw: '1' } } } ] },
                                 rest: null,
                                 generator: false,
                                 expression: false },
                              index: 1 } ],
                         tainted: false,
                         stack: true,
                         scope: [Circular] } ],
                    references: 
                     [ { identifier: { type: 'Identifier', name: 'res' },
                         from: [Circular],
                         tainted: false,
                         resolved: 
                          { name: 'res',
                            identifiers: [ { type: 'Identifier', name: 'res' } ],
                            references: [ [Circular] ],
                            defs: 
                             [ { type: 'Parameter',
                                 name: { type: 'Identifier', name: 'res' },
                                 node: 
                                  { type: 'FunctionExpression',
                                    id: { type: 'Identifier', name: 'replyA' },
                                    params: 
                                     [ { type: 'Identifier', name: 'req' },
                                       { type: 'Identifier', name: 'res' } ],
                                    defaults: [],
                                    body: 
                                     { type: 'BlockStatement',
                                       body: 
                                        [ { type: 'ExpressionStatement',
                                            expression: 
                                             { type: 'CallExpression',
                                               callee: 
                                                { type: 'MemberExpression',
                                                  computed: false,
                                                  object: { type: 'Identifier', name: 'res' },
                                                  property: { type: 'Identifier', name: 'send' } },
                                               arguments: 
                                                [ { type: 'BinaryExpression',
                                                    operator: '+',
                                                    left: { type: 'Literal', value: '', raw: '""' },
                                                    right: { type: 'Identifier', name: '_rep' } } ] } },
                                          { type: 'ExpressionStatement',
                                            expression: 
                                             { type: 'AssignmentExpression',
                                               operator: '+=',
                                               left: { type: 'Identifier', name: '_rep' },
                                               right: { type: 'Literal', value: 1, raw: '1' } } } ] },
                                    rest: null,
                                    generator: false,
                                    expression: false },
                                 index: 1 } ],
                            tainted: false,
                            stack: true,
                            scope: [Circular] },
                         flag: 1,
                         __maybeImplicitGlobal: undefined },
                       [Circular],
                       { identifier: { type: 'Identifier', name: '_rep' },
                         from: [Circular],
                         tainted: false,
                         resolved: null,
                         flag: 3,
                         writeExpr: { type: 'Literal', value: 1, raw: '1' },
                         __maybeImplicitGlobal: undefined } ],
                    left: null,
                    variableScope: [Circular],
                    functionExpressionScope: false,
                    directCallToEvalScope: false,
                    thisFound: false,
                    upper: [Circular],
                    isStrict: false,
                    childScopes: [] },
                 tainted: false,
                 resolved: null,
                 flag: 1,
                 __maybeImplicitGlobal: undefined },
               { identifier: { type: 'Identifier', name: '_rep' },
                 from: 
                  { type: 'function',
                    set: 
                     { __data: 
                        { '$arguments': 
                           { name: 'arguments',
                             identifiers: [],
                             references: [],
                             defs: [],
                             tainted: false,
                             stack: true,
                             scope: [Circular] },
                          '$req': 
                           { name: 'req',
                             identifiers: [ { type: 'Identifier', name: 'req' } ],
                             references: [],
                             defs: 
                              [ { type: 'Parameter',
                                  name: { type: 'Identifier', name: 'req' },
                                  node: 
                                   { type: 'FunctionExpression',
                                     id: { type: 'Identifier', name: 'replyA' },
                                     params: 
                                      [ { type: 'Identifier', name: 'req' },
                                        { type: 'Identifier', name: 'res' } ],
                                     defaults: [],
                                     body: 
                                      { type: 'BlockStatement',
                                        body: 
                                         [ { type: 'ExpressionStatement',
                                             expression: 
                                              { type: 'CallExpression',
                                                callee: 
                                                 { type: 'MemberExpression',
                                                   computed: false,
                                                   object: { type: 'Identifier', name: 'res' },
                                                   property: { type: 'Identifier', name: 'send' } },
                                                arguments: 
                                                 [ { type: 'BinaryExpression',
                                                     operator: '+',
                                                     left: { type: 'Literal', value: '', raw: '""' },
                                                     right: { type: 'Identifier', name: '_rep' } } ] } },
                                           { type: 'ExpressionStatement',
                                             expression: 
                                              { type: 'AssignmentExpression',
                                                operator: '+=',
                                                left: { type: 'Identifier', name: '_rep' },
                                                right: { type: 'Literal', value: 1, raw: '1' } } } ] },
                                     rest: null,
                                     generator: false,
                                     expression: false },
                                  index: 0 } ],
                             tainted: false,
                             stack: true,
                             scope: [Circular] },
                          '$res': 
                           { name: 'res',
                             identifiers: [ { type: 'Identifier', name: 'res' } ],
                             references: 
                              [ { identifier: { type: 'Identifier', name: 'res' },
                                  from: [Circular],
                                  tainted: false,
                                  resolved: [Circular],
                                  flag: 1,
                                  __maybeImplicitGlobal: undefined } ],
                             defs: 
                              [ { type: 'Parameter',
                                  name: { type: 'Identifier', name: 'res' },
                                  node: 
                                   { type: 'FunctionExpression',
                                     id: { type: 'Identifier', name: 'replyA' },
                                     params: 
                                      [ { type: 'Identifier', name: 'req' },
                                        { type: 'Identifier', name: 'res' } ],
                                     defaults: [],
                                     body: 
                                      { type: 'BlockStatement',
                                        body: 
                                         [ { type: 'ExpressionStatement',
                                             expression: 
                                              { type: 'CallExpression',
                                                callee: 
                                                 { type: 'MemberExpression',
                                                   computed: false,
                                                   object: { type: 'Identifier', name: 'res' },
                                                   property: { type: 'Identifier', name: 'send' } },
                                                arguments: 
                                                 [ { type: 'BinaryExpression',
                                                     operator: '+',
                                                     left: { type: 'Literal', value: '', raw: '""' },
                                                     right: { type: 'Identifier', name: '_rep' } } ] } },
                                           { type: 'ExpressionStatement',
                                             expression: 
                                              { type: 'AssignmentExpression',
                                                operator: '+=',
                                                left: { type: 'Identifier', name: '_rep' },
                                                right: { type: 'Literal', value: 1, raw: '1' } } } ] },
                                     rest: null,
                                     generator: false,
                                     expression: false },
                                  index: 1 } ],
                             tainted: false,
                             stack: true,
                             scope: [Circular] } } },
                    taints: { __data: { '$arguments': true } },
                    dynamic: false,
                    block: 
                     { type: 'FunctionExpression',
                       id: { type: 'Identifier', name: 'replyA' },
                       params: 
                        [ { type: 'Identifier', name: 'req' },
                          { type: 'Identifier', name: 'res' } ],
                       defaults: [],
                       body: 
                        { type: 'BlockStatement',
                          body: 
                           [ { type: 'ExpressionStatement',
                               expression: 
                                { type: 'CallExpression',
                                  callee: 
                                   { type: 'MemberExpression',
                                     computed: false,
                                     object: { type: 'Identifier', name: 'res' },
                                     property: { type: 'Identifier', name: 'send' } },
                                  arguments: 
                                   [ { type: 'BinaryExpression',
                                       operator: '+',
                                       left: { type: 'Literal', value: '', raw: '""' },
                                       right: { type: 'Identifier', name: '_rep' } } ] } },
                             { type: 'ExpressionStatement',
                               expression: 
                                { type: 'AssignmentExpression',
                                  operator: '+=',
                                  left: { type: 'Identifier', name: '_rep' },
                                  right: { type: 'Literal', value: 1, raw: '1' } } } ] },
                       rest: null,
                       generator: false,
                       expression: false },
                    through: 
                     [ { identifier: { type: 'Identifier', name: '_rep' },
                         from: [Circular],
                         tainted: false,
                         resolved: null,
                         flag: 1,
                         __maybeImplicitGlobal: undefined },
                       [Circular] ],
                    variables: 
                     [ { name: 'arguments',
                         identifiers: [],
                         references: [],
                         defs: [],
                         tainted: false,
                         stack: true,
                         scope: [Circular] },
                       { name: 'req',
                         identifiers: [ { type: 'Identifier', name: 'req' } ],
                         references: [],
                         defs: 
                          [ { type: 'Parameter',
                              name: { type: 'Identifier', name: 'req' },
                              node: 
                               { type: 'FunctionExpression',
                                 id: { type: 'Identifier', name: 'replyA' },
                                 params: 
                                  [ { type: 'Identifier', name: 'req' },
                                    { type: 'Identifier', name: 'res' } ],
                                 defaults: [],
                                 body: 
                                  { type: 'BlockStatement',
                                    body: 
                                     [ { type: 'ExpressionStatement',
                                         expression: 
                                          { type: 'CallExpression',
                                            callee: 
                                             { type: 'MemberExpression',
                                               computed: false,
                                               object: { type: 'Identifier', name: 'res' },
                                               property: { type: 'Identifier', name: 'send' } },
                                            arguments: 
                                             [ { type: 'BinaryExpression',
                                                 operator: '+',
                                                 left: { type: 'Literal', value: '', raw: '""' },
                                                 right: { type: 'Identifier', name: '_rep' } } ] } },
                                       { type: 'ExpressionStatement',
                                         expression: 
                                          { type: 'AssignmentExpression',
                                            operator: '+=',
                                            left: { type: 'Identifier', name: '_rep' },
                                            right: { type: 'Literal', value: 1, raw: '1' } } } ] },
                                 rest: null,
                                 generator: false,
                                 expression: false },
                              index: 0 } ],
                         tainted: false,
                         stack: true,
                         scope: [Circular] },
                       { name: 'res',
                         identifiers: [ { type: 'Identifier', name: 'res' } ],
                         references: 
                          [ { identifier: { type: 'Identifier', name: 'res' },
                              from: [Circular],
                              tainted: false,
                              resolved: [Circular],
                              flag: 1,
                              __maybeImplicitGlobal: undefined } ],
                         defs: 
                          [ { type: 'Parameter',
                              name: { type: 'Identifier', name: 'res' },
                              node: 
                               { type: 'FunctionExpression',
                                 id: { type: 'Identifier', name: 'replyA' },
                                 params: 
                                  [ { type: 'Identifier', name: 'req' },
                                    { type: 'Identifier', name: 'res' } ],
                                 defaults: [],
                                 body: 
                                  { type: 'BlockStatement',
                                    body: 
                                     [ { type: 'ExpressionStatement',
                                         expression: 
                                          { type: 'CallExpression',
                                            callee: 
                                             { type: 'MemberExpression',
                                               computed: false,
                                               object: { type: 'Identifier', name: 'res' },
                                               property: { type: 'Identifier', name: 'send' } },
                                            arguments: 
                                             [ { type: 'BinaryExpression',
                                                 operator: '+',
                                                 left: { type: 'Literal', value: '', raw: '""' },
                                                 right: { type: 'Identifier', name: '_rep' } } ] } },
                                       { type: 'ExpressionStatement',
                                         expression: 
                                          { type: 'AssignmentExpression',
                                            operator: '+=',
                                            left: { type: 'Identifier', name: '_rep' },
                                            right: { type: 'Literal', value: 1, raw: '1' } } } ] },
                                 rest: null,
                                 generator: false,
                                 expression: false },
                              index: 1 } ],
                         tainted: false,
                         stack: true,
                         scope: [Circular] } ],
                    references: 
                     [ { identifier: { type: 'Identifier', name: 'res' },
                         from: [Circular],
                         tainted: false,
                         resolved: 
                          { name: 'res',
                            identifiers: [ { type: 'Identifier', name: 'res' } ],
                            references: [ [Circular] ],
                            defs: 
                             [ { type: 'Parameter',
                                 name: { type: 'Identifier', name: 'res' },
                                 node: 
                                  { type: 'FunctionExpression',
                                    id: { type: 'Identifier', name: 'replyA' },
                                    params: 
                                     [ { type: 'Identifier', name: 'req' },
                                       { type: 'Identifier', name: 'res' } ],
                                    defaults: [],
                                    body: 
                                     { type: 'BlockStatement',
                                       body: 
                                        [ { type: 'ExpressionStatement',
                                            expression: 
                                             { type: 'CallExpression',
                                               callee: 
                                                { type: 'MemberExpression',
                                                  computed: false,
                                                  object: { type: 'Identifier', name: 'res' },
                                                  property: { type: 'Identifier', name: 'send' } },
                                               arguments: 
                                                [ { type: 'BinaryExpression',
                                                    operator: '+',
                                                    left: { type: 'Literal', value: '', raw: '""' },
                                                    right: { type: 'Identifier', name: '_rep' } } ] } },
                                          { type: 'ExpressionStatement',
                                            expression: 
                                             { type: 'AssignmentExpression',
                                               operator: '+=',
                                               left: { type: 'Identifier', name: '_rep' },
                                               right: { type: 'Literal', value: 1, raw: '1' } } } ] },
                                    rest: null,
                                    generator: false,
                                    expression: false },
                                 index: 1 } ],
                            tainted: false,
                            stack: true,
                            scope: [Circular] },
                         flag: 1,
                         __maybeImplicitGlobal: undefined },
                       { identifier: { type: 'Identifier', name: '_rep' },
                         from: [Circular],
                         tainted: false,
                         resolved: null,
                         flag: 1,
                         __maybeImplicitGlobal: undefined },
                       [Circular] ],
                    left: null,
                    variableScope: [Circular],
                    functionExpressionScope: false,
                    directCallToEvalScope: false,
                    thisFound: false,
                    upper: [Circular],
                    isStrict: false,
                    childScopes: [] },
                 tainted: false,
                 resolved: null,
                 flag: 3,
                 writeExpr: { type: 'Literal', value: 1, raw: '1' },
                 __maybeImplicitGlobal: undefined } ],
            variables: 
             [ { name: 'replyA',
                 identifiers: [ { type: 'Identifier', name: 'replyA' } ],
                 references: [],
                 defs: 
                  [ { type: 'FunctionName',
                      name: { type: 'Identifier', name: 'replyA' },
                      node: 
                       { type: 'FunctionExpression',
                         id: { type: 'Identifier', name: 'replyA' },
                         params: 
                          [ { type: 'Identifier', name: 'req' },
                            { type: 'Identifier', name: 'res' } ],
                         defaults: [],
                         body: 
                          { type: 'BlockStatement',
                            body: 
                             [ { type: 'ExpressionStatement',
                                 expression: 
                                  { type: 'CallExpression',
                                    callee: 
                                     { type: 'MemberExpression',
                                       computed: false,
                                       object: { type: 'Identifier', name: 'res' },
                                       property: { type: 'Identifier', name: 'send' } },
                                    arguments: 
                                     [ { type: 'BinaryExpression',
                                         operator: '+',
                                         left: { type: 'Literal', value: '', raw: '""' },
                                         right: { type: 'Identifier', name: '_rep' } } ] } },
                               { type: 'ExpressionStatement',
                                 expression: 
                                  { type: 'AssignmentExpression',
                                    operator: '+=',
                                    left: { type: 'Identifier', name: '_rep' },
                                    right: { type: 'Literal', value: 1, raw: '1' } } } ] },
                         rest: null,
                         generator: false,
                         expression: false } } ],
                 tainted: false,
                 stack: true,
                 scope: [Circular] } ],
            references: [],
            left: null,
            variableScope: [Circular],
            functionExpressionScope: true,
            directCallToEvalScope: false,
            thisFound: false,
            upper: [Circular],
            isStrict: false,
            childScopes: 
             [ { type: 'function',
                 set: 
                  { __data: 
                     { '$arguments': 
                        { name: 'arguments',
                          identifiers: [],
                          references: [],
                          defs: [],
                          tainted: false,
                          stack: true,
                          scope: [Circular] },
                       '$req': 
                        { name: 'req',
                          identifiers: [ { type: 'Identifier', name: 'req' } ],
                          references: [],
                          defs: 
                           [ { type: 'Parameter',
                               name: { type: 'Identifier', name: 'req' },
                               node: 
                                { type: 'FunctionExpression',
                                  id: { type: 'Identifier', name: 'replyA' },
                                  params: 
                                   [ { type: 'Identifier', name: 'req' },
                                     { type: 'Identifier', name: 'res' } ],
                                  defaults: [],
                                  body: 
                                   { type: 'BlockStatement',
                                     body: 
                                      [ { type: 'ExpressionStatement',
                                          expression: 
                                           { type: 'CallExpression',
                                             callee: 
                                              { type: 'MemberExpression',
                                                computed: false,
                                                object: { type: 'Identifier', name: 'res' },
                                                property: { type: 'Identifier', name: 'send' } },
                                             arguments: 
                                              [ { type: 'BinaryExpression',
                                                  operator: '+',
                                                  left: { type: 'Literal', value: '', raw: '""' },
                                                  right: { type: 'Identifier', name: '_rep' } } ] } },
                                        { type: 'ExpressionStatement',
                                          expression: 
                                           { type: 'AssignmentExpression',
                                             operator: '+=',
                                             left: { type: 'Identifier', name: '_rep' },
                                             right: { type: 'Literal', value: 1, raw: '1' } } } ] },
                                  rest: null,
                                  generator: false,
                                  expression: false },
                               index: 0 } ],
                          tainted: false,
                          stack: true,
                          scope: [Circular] },
                       '$res': 
                        { name: 'res',
                          identifiers: [ { type: 'Identifier', name: 'res' } ],
                          references: 
                           [ { identifier: { type: 'Identifier', name: 'res' },
                               from: [Circular],
                               tainted: false,
                               resolved: [Circular],
                               flag: 1,
                               __maybeImplicitGlobal: undefined } ],
                          defs: 
                           [ { type: 'Parameter',
                               name: { type: 'Identifier', name: 'res' },
                               node: 
                                { type: 'FunctionExpression',
                                  id: { type: 'Identifier', name: 'replyA' },
                                  params: 
                                   [ { type: 'Identifier', name: 'req' },
                                     { type: 'Identifier', name: 'res' } ],
                                  defaults: [],
                                  body: 
                                   { type: 'BlockStatement',
                                     body: 
                                      [ { type: 'ExpressionStatement',
                                          expression: 
                                           { type: 'CallExpression',
                                             callee: 
                                              { type: 'MemberExpression',
                                                computed: false,
                                                object: { type: 'Identifier', name: 'res' },
                                                property: { type: 'Identifier', name: 'send' } },
                                             arguments: 
                                              [ { type: 'BinaryExpression',
                                                  operator: '+',
                                                  left: { type: 'Literal', value: '', raw: '""' },
                                                  right: { type: 'Identifier', name: '_rep' } } ] } },
                                        { type: 'ExpressionStatement',
                                          expression: 
                                           { type: 'AssignmentExpression',
                                             operator: '+=',
                                             left: { type: 'Identifier', name: '_rep' },
                                             right: { type: 'Literal', value: 1, raw: '1' } } } ] },
                                  rest: null,
                                  generator: false,
                                  expression: false },
                               index: 1 } ],
                          tainted: false,
                          stack: true,
                          scope: [Circular] } } },
                 taints: { __data: { '$arguments': true } },
                 dynamic: false,
                 block: 
                  { type: 'FunctionExpression',
                    id: { type: 'Identifier', name: 'replyA' },
                    params: 
                     [ { type: 'Identifier', name: 'req' },
                       { type: 'Identifier', name: 'res' } ],
                    defaults: [],
                    body: 
                     { type: 'BlockStatement',
                       body: 
                        [ { type: 'ExpressionStatement',
                            expression: 
                             { type: 'CallExpression',
                               callee: 
                                { type: 'MemberExpression',
                                  computed: false,
                                  object: { type: 'Identifier', name: 'res' },
                                  property: { type: 'Identifier', name: 'send' } },
                               arguments: 
                                [ { type: 'BinaryExpression',
                                    operator: '+',
                                    left: { type: 'Literal', value: '', raw: '""' },
                                    right: { type: 'Identifier', name: '_rep' } } ] } },
                          { type: 'ExpressionStatement',
                            expression: 
                             { type: 'AssignmentExpression',
                               operator: '+=',
                               left: { type: 'Identifier', name: '_rep' },
                               right: { type: 'Literal', value: 1, raw: '1' } } } ] },
                    rest: null,
                    generator: false,
                    expression: false },
                 through: 
                  [ { identifier: { type: 'Identifier', name: '_rep' },
                      from: [Circular],
                      tainted: false,
                      resolved: null,
                      flag: 1,
                      __maybeImplicitGlobal: undefined },
                    { identifier: { type: 'Identifier', name: '_rep' },
                      from: [Circular],
                      tainted: false,
                      resolved: null,
                      flag: 3,
                      writeExpr: { type: 'Literal', value: 1, raw: '1' },
                      __maybeImplicitGlobal: undefined } ],
                 variables: 
                  [ { name: 'arguments',
                      identifiers: [],
                      references: [],
                      defs: [],
                      tainted: false,
                      stack: true,
                      scope: [Circular] },
                    { name: 'req',
                      identifiers: [ { type: 'Identifier', name: 'req' } ],
                      references: [],
                      defs: 
                       [ { type: 'Parameter',
                           name: { type: 'Identifier', name: 'req' },
                           node: 
                            { type: 'FunctionExpression',
                              id: { type: 'Identifier', name: 'replyA' },
                              params: 
                               [ { type: 'Identifier', name: 'req' },
                                 { type: 'Identifier', name: 'res' } ],
                              defaults: [],
                              body: 
                               { type: 'BlockStatement',
                                 body: 
                                  [ { type: 'ExpressionStatement',
                                      expression: 
                                       { type: 'CallExpression',
                                         callee: 
                                          { type: 'MemberExpression',
                                            computed: false,
                                            object: { type: 'Identifier', name: 'res' },
                                            property: { type: 'Identifier', name: 'send' } },
                                         arguments: 
                                          [ { type: 'BinaryExpression',
                                              operator: '+',
                                              left: { type: 'Literal', value: '', raw: '""' },
                                              right: { type: 'Identifier', name: '_rep' } } ] } },
                                    { type: 'ExpressionStatement',
                                      expression: 
                                       { type: 'AssignmentExpression',
                                         operator: '+=',
                                         left: { type: 'Identifier', name: '_rep' },
                                         right: { type: 'Literal', value: 1, raw: '1' } } } ] },
                              rest: null,
                              generator: false,
                              expression: false },
                           index: 0 } ],
                      tainted: false,
                      stack: true,
                      scope: [Circular] },
                    { name: 'res',
                      identifiers: [ { type: 'Identifier', name: 'res' } ],
                      references: 
                       [ { identifier: { type: 'Identifier', name: 'res' },
                           from: [Circular],
                           tainted: false,
                           resolved: [Circular],
                           flag: 1,
                           __maybeImplicitGlobal: undefined } ],
                      defs: 
                       [ { type: 'Parameter',
                           name: { type: 'Identifier', name: 'res' },
                           node: 
                            { type: 'FunctionExpression',
                              id: { type: 'Identifier', name: 'replyA' },
                              params: 
                               [ { type: 'Identifier', name: 'req' },
                                 { type: 'Identifier', name: 'res' } ],
                              defaults: [],
                              body: 
                               { type: 'BlockStatement',
                                 body: 
                                  [ { type: 'ExpressionStatement',
                                      expression: 
                                       { type: 'CallExpression',
                                         callee: 
                                          { type: 'MemberExpression',
                                            computed: false,
                                            object: { type: 'Identifier', name: 'res' },
                                            property: { type: 'Identifier', name: 'send' } },
                                         arguments: 
                                          [ { type: 'BinaryExpression',
                                              operator: '+',
                                              left: { type: 'Literal', value: '', raw: '""' },
                                              right: { type: 'Identifier', name: '_rep' } } ] } },
                                    { type: 'ExpressionStatement',
                                      expression: 
                                       { type: 'AssignmentExpression',
                                         operator: '+=',
                                         left: { type: 'Identifier', name: '_rep' },
                                         right: { type: 'Literal', value: 1, raw: '1' } } } ] },
                              rest: null,
                              generator: false,
                              expression: false },
                           index: 1 } ],
                      tainted: false,
                      stack: true,
                      scope: [Circular] } ],
                 references: 
                  [ { identifier: { type: 'Identifier', name: 'res' },
                      from: [Circular],
                      tainted: false,
                      resolved: 
                       { name: 'res',
                         identifiers: [ { type: 'Identifier', name: 'res' } ],
                         references: [ [Circular] ],
                         defs: 
                          [ { type: 'Parameter',
                              name: { type: 'Identifier', name: 'res' },
                              node: 
                               { type: 'FunctionExpression',
                                 id: { type: 'Identifier', name: 'replyA' },
                                 params: 
                                  [ { type: 'Identifier', name: 'req' },
                                    { type: 'Identifier', name: 'res' } ],
                                 defaults: [],
                                 body: 
                                  { type: 'BlockStatement',
                                    body: 
                                     [ { type: 'ExpressionStatement',
                                         expression: 
                                          { type: 'CallExpression',
                                            callee: 
                                             { type: 'MemberExpression',
                                               computed: false,
                                               object: { type: 'Identifier', name: 'res' },
                                               property: { type: 'Identifier', name: 'send' } },
                                            arguments: 
                                             [ { type: 'BinaryExpression',
                                                 operator: '+',
                                                 left: { type: 'Literal', value: '', raw: '""' },
                                                 right: { type: 'Identifier', name: '_rep' } } ] } },
                                       { type: 'ExpressionStatement',
                                         expression: 
                                          { type: 'AssignmentExpression',
                                            operator: '+=',
                                            left: { type: 'Identifier', name: '_rep' },
                                            right: { type: 'Literal', value: 1, raw: '1' } } } ] },
                                 rest: null,
                                 generator: false,
                                 expression: false },
                              index: 1 } ],
                         tainted: false,
                         stack: true,
                         scope: [Circular] },
                      flag: 1,
                      __maybeImplicitGlobal: undefined },
                    { identifier: { type: 'Identifier', name: '_rep' },
                      from: [Circular],
                      tainted: false,
                      resolved: null,
                      flag: 1,
                      __maybeImplicitGlobal: undefined },
                    { identifier: { type: 'Identifier', name: '_rep' },
                      from: [Circular],
                      tainted: false,
                      resolved: null,
                      flag: 3,
                      writeExpr: { type: 'Literal', value: 1, raw: '1' },
                      __maybeImplicitGlobal: undefined } ],
                 left: null,
                 variableScope: [Circular],
                 functionExpressionScope: false,
                 directCallToEvalScope: false,
                 thisFound: false,
                 upper: [Circular],
                 isStrict: false,
                 childScopes: [] } ] },
          { type: 'function',
            set: 
             { __data: 
                { '$replyB': 
                   { name: 'replyB',
                     identifiers: [ { type: 'Identifier', name: 'replyB' } ],
                     references: [],
                     defs: 
                      [ { type: 'FunctionName',
                          name: { type: 'Identifier', name: 'replyB' },
                          node: 
                           { type: 'FunctionExpression',
                             id: { type: 'Identifier', name: 'replyB' },
                             params: 
                              [ { type: 'Identifier', name: 'req' },
                                { type: 'Identifier', name: 'res' } ],
                             defaults: [],
                             body: 
                              { type: 'BlockStatement',
                                body: 
                                 [ { type: 'ExpressionStatement',
                                     expression: 
                                      { type: 'CallExpression',
                                        callee: 
                                         { type: 'MemberExpression',
                                           computed: false,
                                           object: { type: 'Identifier', name: 'res' },
                                           property: { type: 'Identifier', name: 'send' } },
                                        arguments: 
                                         [ { type: 'BinaryExpression',
                                             operator: '+',
                                             left: { type: 'Literal', value: '', raw: '""' },
                                             right: { type: 'Identifier', name: '_rep' } } ] } },
                                   { type: 'ExpressionStatement',
                                     expression: 
                                      { type: 'AssignmentExpression',
                                        operator: '+=',
                                        left: { type: 'Identifier', name: '_rep' },
                                        right: { type: 'Literal', value: 2, raw: '2' } } } ] },
                             rest: null,
                             generator: false,
                             expression: false } } ],
                     tainted: false,
                     stack: true,
                     scope: [Circular] } } },
            taints: { __data: {} },
            dynamic: false,
            block: 
             { type: 'FunctionExpression',
               id: { type: 'Identifier', name: 'replyB' },
               params: 
                [ { type: 'Identifier', name: 'req' },
                  { type: 'Identifier', name: 'res' } ],
               defaults: [],
               body: 
                { type: 'BlockStatement',
                  body: 
                   [ { type: 'ExpressionStatement',
                       expression: 
                        { type: 'CallExpression',
                          callee: 
                           { type: 'MemberExpression',
                             computed: false,
                             object: { type: 'Identifier', name: 'res' },
                             property: { type: 'Identifier', name: 'send' } },
                          arguments: 
                           [ { type: 'BinaryExpression',
                               operator: '+',
                               left: { type: 'Literal', value: '', raw: '""' },
                               right: { type: 'Identifier', name: '_rep' } } ] } },
                     { type: 'ExpressionStatement',
                       expression: 
                        { type: 'AssignmentExpression',
                          operator: '+=',
                          left: { type: 'Identifier', name: '_rep' },
                          right: { type: 'Literal', value: 2, raw: '2' } } } ] },
               rest: null,
               generator: false,
               expression: false },
            through: 
             [ { identifier: { type: 'Identifier', name: '_rep' },
                 from: 
                  { type: 'function',
                    set: 
                     { __data: 
                        { '$arguments': 
                           { name: 'arguments',
                             identifiers: [],
                             references: [],
                             defs: [],
                             tainted: false,
                             stack: true,
                             scope: [Circular] },
                          '$req': 
                           { name: 'req',
                             identifiers: [ { type: 'Identifier', name: 'req' } ],
                             references: [],
                             defs: 
                              [ { type: 'Parameter',
                                  name: { type: 'Identifier', name: 'req' },
                                  node: 
                                   { type: 'FunctionExpression',
                                     id: { type: 'Identifier', name: 'replyB' },
                                     params: 
                                      [ { type: 'Identifier', name: 'req' },
                                        { type: 'Identifier', name: 'res' } ],
                                     defaults: [],
                                     body: 
                                      { type: 'BlockStatement',
                                        body: 
                                         [ { type: 'ExpressionStatement',
                                             expression: 
                                              { type: 'CallExpression',
                                                callee: 
                                                 { type: 'MemberExpression',
                                                   computed: false,
                                                   object: { type: 'Identifier', name: 'res' },
                                                   property: { type: 'Identifier', name: 'send' } },
                                                arguments: 
                                                 [ { type: 'BinaryExpression',
                                                     operator: '+',
                                                     left: { type: 'Literal', value: '', raw: '""' },
                                                     right: { type: 'Identifier', name: '_rep' } } ] } },
                                           { type: 'ExpressionStatement',
                                             expression: 
                                              { type: 'AssignmentExpression',
                                                operator: '+=',
                                                left: { type: 'Identifier', name: '_rep' },
                                                right: { type: 'Literal', value: 2, raw: '2' } } } ] },
                                     rest: null,
                                     generator: false,
                                     expression: false },
                                  index: 0 } ],
                             tainted: false,
                             stack: true,
                             scope: [Circular] },
                          '$res': 
                           { name: 'res',
                             identifiers: [ { type: 'Identifier', name: 'res' } ],
                             references: 
                              [ { identifier: { type: 'Identifier', name: 'res' },
                                  from: [Circular],
                                  tainted: false,
                                  resolved: [Circular],
                                  flag: 1,
                                  __maybeImplicitGlobal: undefined } ],
                             defs: 
                              [ { type: 'Parameter',
                                  name: { type: 'Identifier', name: 'res' },
                                  node: 
                                   { type: 'FunctionExpression',
                                     id: { type: 'Identifier', name: 'replyB' },
                                     params: 
                                      [ { type: 'Identifier', name: 'req' },
                                        { type: 'Identifier', name: 'res' } ],
                                     defaults: [],
                                     body: 
                                      { type: 'BlockStatement',
                                        body: 
                                         [ { type: 'ExpressionStatement',
                                             expression: 
                                              { type: 'CallExpression',
                                                callee: 
                                                 { type: 'MemberExpression',
                                                   computed: false,
                                                   object: { type: 'Identifier', name: 'res' },
                                                   property: { type: 'Identifier', name: 'send' } },
                                                arguments: 
                                                 [ { type: 'BinaryExpression',
                                                     operator: '+',
                                                     left: { type: 'Literal', value: '', raw: '""' },
                                                     right: { type: 'Identifier', name: '_rep' } } ] } },
                                           { type: 'ExpressionStatement',
                                             expression: 
                                              { type: 'AssignmentExpression',
                                                operator: '+=',
                                                left: { type: 'Identifier', name: '_rep' },
                                                right: { type: 'Literal', value: 2, raw: '2' } } } ] },
                                     rest: null,
                                     generator: false,
                                     expression: false },
                                  index: 1 } ],
                             tainted: false,
                             stack: true,
                             scope: [Circular] } } },
                    taints: { __data: { '$arguments': true } },
                    dynamic: false,
                    block: 
                     { type: 'FunctionExpression',
                       id: { type: 'Identifier', name: 'replyB' },
                       params: 
                        [ { type: 'Identifier', name: 'req' },
                          { type: 'Identifier', name: 'res' } ],
                       defaults: [],
                       body: 
                        { type: 'BlockStatement',
                          body: 
                           [ { type: 'ExpressionStatement',
                               expression: 
                                { type: 'CallExpression',
                                  callee: 
                                   { type: 'MemberExpression',
                                     computed: false,
                                     object: { type: 'Identifier', name: 'res' },
                                     property: { type: 'Identifier', name: 'send' } },
                                  arguments: 
                                   [ { type: 'BinaryExpression',
                                       operator: '+',
                                       left: { type: 'Literal', value: '', raw: '""' },
                                       right: { type: 'Identifier', name: '_rep' } } ] } },
                             { type: 'ExpressionStatement',
                               expression: 
                                { type: 'AssignmentExpression',
                                  operator: '+=',
                                  left: { type: 'Identifier', name: '_rep' },
                                  right: { type: 'Literal', value: 2, raw: '2' } } } ] },
                       rest: null,
                       generator: false,
                       expression: false },
                    through: 
                     [ [Circular],
                       { identifier: { type: 'Identifier', name: '_rep' },
                         from: [Circular],
                         tainted: false,
                         resolved: null,
                         flag: 3,
                         writeExpr: { type: 'Literal', value: 2, raw: '2' },
                         __maybeImplicitGlobal: undefined } ],
                    variables: 
                     [ { name: 'arguments',
                         identifiers: [],
                         references: [],
                         defs: [],
                         tainted: false,
                         stack: true,
                         scope: [Circular] },
                       { name: 'req',
                         identifiers: [ { type: 'Identifier', name: 'req' } ],
                         references: [],
                         defs: 
                          [ { type: 'Parameter',
                              name: { type: 'Identifier', name: 'req' },
                              node: 
                               { type: 'FunctionExpression',
                                 id: { type: 'Identifier', name: 'replyB' },
                                 params: 
                                  [ { type: 'Identifier', name: 'req' },
                                    { type: 'Identifier', name: 'res' } ],
                                 defaults: [],
                                 body: 
                                  { type: 'BlockStatement',
                                    body: 
                                     [ { type: 'ExpressionStatement',
                                         expression: 
                                          { type: 'CallExpression',
                                            callee: 
                                             { type: 'MemberExpression',
                                               computed: false,
                                               object: { type: 'Identifier', name: 'res' },
                                               property: { type: 'Identifier', name: 'send' } },
                                            arguments: 
                                             [ { type: 'BinaryExpression',
                                                 operator: '+',
                                                 left: { type: 'Literal', value: '', raw: '""' },
                                                 right: { type: 'Identifier', name: '_rep' } } ] } },
                                       { type: 'ExpressionStatement',
                                         expression: 
                                          { type: 'AssignmentExpression',
                                            operator: '+=',
                                            left: { type: 'Identifier', name: '_rep' },
                                            right: { type: 'Literal', value: 2, raw: '2' } } } ] },
                                 rest: null,
                                 generator: false,
                                 expression: false },
                              index: 0 } ],
                         tainted: false,
                         stack: true,
                         scope: [Circular] },
                       { name: 'res',
                         identifiers: [ { type: 'Identifier', name: 'res' } ],
                         references: 
                          [ { identifier: { type: 'Identifier', name: 'res' },
                              from: [Circular],
                              tainted: false,
                              resolved: [Circular],
                              flag: 1,
                              __maybeImplicitGlobal: undefined } ],
                         defs: 
                          [ { type: 'Parameter',
                              name: { type: 'Identifier', name: 'res' },
                              node: 
                               { type: 'FunctionExpression',
                                 id: { type: 'Identifier', name: 'replyB' },
                                 params: 
                                  [ { type: 'Identifier', name: 'req' },
                                    { type: 'Identifier', name: 'res' } ],
                                 defaults: [],
                                 body: 
                                  { type: 'BlockStatement',
                                    body: 
                                     [ { type: 'ExpressionStatement',
                                         expression: 
                                          { type: 'CallExpression',
                                            callee: 
                                             { type: 'MemberExpression',
                                               computed: false,
                                               object: { type: 'Identifier', name: 'res' },
                                               property: { type: 'Identifier', name: 'send' } },
                                            arguments: 
                                             [ { type: 'BinaryExpression',
                                                 operator: '+',
                                                 left: { type: 'Literal', value: '', raw: '""' },
                                                 right: { type: 'Identifier', name: '_rep' } } ] } },
                                       { type: 'ExpressionStatement',
                                         expression: 
                                          { type: 'AssignmentExpression',
                                            operator: '+=',
                                            left: { type: 'Identifier', name: '_rep' },
                                            right: { type: 'Literal', value: 2, raw: '2' } } } ] },
                                 rest: null,
                                 generator: false,
                                 expression: false },
                              index: 1 } ],
                         tainted: false,
                         stack: true,
                         scope: [Circular] } ],
                    references: 
                     [ { identifier: { type: 'Identifier', name: 'res' },
                         from: [Circular],
                         tainted: false,
                         resolved: 
                          { name: 'res',
                            identifiers: [ { type: 'Identifier', name: 'res' } ],
                            references: [ [Circular] ],
                            defs: 
                             [ { type: 'Parameter',
                                 name: { type: 'Identifier', name: 'res' },
                                 node: 
                                  { type: 'FunctionExpression',
                                    id: { type: 'Identifier', name: 'replyB' },
                                    params: 
                                     [ { type: 'Identifier', name: 'req' },
                                       { type: 'Identifier', name: 'res' } ],
                                    defaults: [],
                                    body: 
                                     { type: 'BlockStatement',
                                       body: 
                                        [ { type: 'ExpressionStatement',
                                            expression: 
                                             { type: 'CallExpression',
                                               callee: 
                                                { type: 'MemberExpression',
                                                  computed: false,
                                                  object: { type: 'Identifier', name: 'res' },
                                                  property: { type: 'Identifier', name: 'send' } },
                                               arguments: 
                                                [ { type: 'BinaryExpression',
                                                    operator: '+',
                                                    left: { type: 'Literal', value: '', raw: '""' },
                                                    right: { type: 'Identifier', name: '_rep' } } ] } },
                                          { type: 'ExpressionStatement',
                                            expression: 
                                             { type: 'AssignmentExpression',
                                               operator: '+=',
                                               left: { type: 'Identifier', name: '_rep' },
                                               right: { type: 'Literal', value: 2, raw: '2' } } } ] },
                                    rest: null,
                                    generator: false,
                                    expression: false },
                                 index: 1 } ],
                            tainted: false,
                            stack: true,
                            scope: [Circular] },
                         flag: 1,
                         __maybeImplicitGlobal: undefined },
                       [Circular],
                       { identifier: { type: 'Identifier', name: '_rep' },
                         from: [Circular],
                         tainted: false,
                         resolved: null,
                         flag: 3,
                         writeExpr: { type: 'Literal', value: 2, raw: '2' },
                         __maybeImplicitGlobal: undefined } ],
                    left: null,
                    variableScope: [Circular],
                    functionExpressionScope: false,
                    directCallToEvalScope: false,
                    thisFound: false,
                    upper: [Circular],
                    isStrict: false,
                    childScopes: [] },
                 tainted: false,
                 resolved: null,
                 flag: 1,
                 __maybeImplicitGlobal: undefined },
               { identifier: { type: 'Identifier', name: '_rep' },
                 from: 
                  { type: 'function',
                    set: 
                     { __data: 
                        { '$arguments': 
                           { name: 'arguments',
                             identifiers: [],
                             references: [],
                             defs: [],
                             tainted: false,
                             stack: true,
                             scope: [Circular] },
                          '$req': 
                           { name: 'req',
                             identifiers: [ { type: 'Identifier', name: 'req' } ],
                             references: [],
                             defs: 
                              [ { type: 'Parameter',
                                  name: { type: 'Identifier', name: 'req' },
                                  node: 
                                   { type: 'FunctionExpression',
                                     id: { type: 'Identifier', name: 'replyB' },
                                     params: 
                                      [ { type: 'Identifier', name: 'req' },
                                        { type: 'Identifier', name: 'res' } ],
                                     defaults: [],
                                     body: 
                                      { type: 'BlockStatement',
                                        body: 
                                         [ { type: 'ExpressionStatement',
                                             expression: 
                                              { type: 'CallExpression',
                                                callee: 
                                                 { type: 'MemberExpression',
                                                   computed: false,
                                                   object: { type: 'Identifier', name: 'res' },
                                                   property: { type: 'Identifier', name: 'send' } },
                                                arguments: 
                                                 [ { type: 'BinaryExpression',
                                                     operator: '+',
                                                     left: { type: 'Literal', value: '', raw: '""' },
                                                     right: { type: 'Identifier', name: '_rep' } } ] } },
                                           { type: 'ExpressionStatement',
                                             expression: 
                                              { type: 'AssignmentExpression',
                                                operator: '+=',
                                                left: { type: 'Identifier', name: '_rep' },
                                                right: { type: 'Literal', value: 2, raw: '2' } } } ] },
                                     rest: null,
                                     generator: false,
                                     expression: false },
                                  index: 0 } ],
                             tainted: false,
                             stack: true,
                             scope: [Circular] },
                          '$res': 
                           { name: 'res',
                             identifiers: [ { type: 'Identifier', name: 'res' } ],
                             references: 
                              [ { identifier: { type: 'Identifier', name: 'res' },
                                  from: [Circular],
                                  tainted: false,
                                  resolved: [Circular],
                                  flag: 1,
                                  __maybeImplicitGlobal: undefined } ],
                             defs: 
                              [ { type: 'Parameter',
                                  name: { type: 'Identifier', name: 'res' },
                                  node: 
                                   { type: 'FunctionExpression',
                                     id: { type: 'Identifier', name: 'replyB' },
                                     params: 
                                      [ { type: 'Identifier', name: 'req' },
                                        { type: 'Identifier', name: 'res' } ],
                                     defaults: [],
                                     body: 
                                      { type: 'BlockStatement',
                                        body: 
                                         [ { type: 'ExpressionStatement',
                                             expression: 
                                              { type: 'CallExpression',
                                                callee: 
                                                 { type: 'MemberExpression',
                                                   computed: false,
                                                   object: { type: 'Identifier', name: 'res' },
                                                   property: { type: 'Identifier', name: 'send' } },
                                                arguments: 
                                                 [ { type: 'BinaryExpression',
                                                     operator: '+',
                                                     left: { type: 'Literal', value: '', raw: '""' },
                                                     right: { type: 'Identifier', name: '_rep' } } ] } },
                                           { type: 'ExpressionStatement',
                                             expression: 
                                              { type: 'AssignmentExpression',
                                                operator: '+=',
                                                left: { type: 'Identifier', name: '_rep' },
                                                right: { type: 'Literal', value: 2, raw: '2' } } } ] },
                                     rest: null,
                                     generator: false,
                                     expression: false },
                                  index: 1 } ],
                             tainted: false,
                             stack: true,
                             scope: [Circular] } } },
                    taints: { __data: { '$arguments': true } },
                    dynamic: false,
                    block: 
                     { type: 'FunctionExpression',
                       id: { type: 'Identifier', name: 'replyB' },
                       params: 
                        [ { type: 'Identifier', name: 'req' },
                          { type: 'Identifier', name: 'res' } ],
                       defaults: [],
                       body: 
                        { type: 'BlockStatement',
                          body: 
                           [ { type: 'ExpressionStatement',
                               expression: 
                                { type: 'CallExpression',
                                  callee: 
                                   { type: 'MemberExpression',
                                     computed: false,
                                     object: { type: 'Identifier', name: 'res' },
                                     property: { type: 'Identifier', name: 'send' } },
                                  arguments: 
                                   [ { type: 'BinaryExpression',
                                       operator: '+',
                                       left: { type: 'Literal', value: '', raw: '""' },
                                       right: { type: 'Identifier', name: '_rep' } } ] } },
                             { type: 'ExpressionStatement',
                               expression: 
                                { type: 'AssignmentExpression',
                                  operator: '+=',
                                  left: { type: 'Identifier', name: '_rep' },
                                  right: { type: 'Literal', value: 2, raw: '2' } } } ] },
                       rest: null,
                       generator: false,
                       expression: false },
                    through: 
                     [ { identifier: { type: 'Identifier', name: '_rep' },
                         from: [Circular],
                         tainted: false,
                         resolved: null,
                         flag: 1,
                         __maybeImplicitGlobal: undefined },
                       [Circular] ],
                    variables: 
                     [ { name: 'arguments',
                         identifiers: [],
                         references: [],
                         defs: [],
                         tainted: false,
                         stack: true,
                         scope: [Circular] },
                       { name: 'req',
                         identifiers: [ { type: 'Identifier', name: 'req' } ],
                         references: [],
                         defs: 
                          [ { type: 'Parameter',
                              name: { type: 'Identifier', name: 'req' },
                              node: 
                               { type: 'FunctionExpression',
                                 id: { type: 'Identifier', name: 'replyB' },
                                 params: 
                                  [ { type: 'Identifier', name: 'req' },
                                    { type: 'Identifier', name: 'res' } ],
                                 defaults: [],
                                 body: 
                                  { type: 'BlockStatement',
                                    body: 
                                     [ { type: 'ExpressionStatement',
                                         expression: 
                                          { type: 'CallExpression',
                                            callee: 
                                             { type: 'MemberExpression',
                                               computed: false,
                                               object: { type: 'Identifier', name: 'res' },
                                               property: { type: 'Identifier', name: 'send' } },
                                            arguments: 
                                             [ { type: 'BinaryExpression',
                                                 operator: '+',
                                                 left: { type: 'Literal', value: '', raw: '""' },
                                                 right: { type: 'Identifier', name: '_rep' } } ] } },
                                       { type: 'ExpressionStatement',
                                         expression: 
                                          { type: 'AssignmentExpression',
                                            operator: '+=',
                                            left: { type: 'Identifier', name: '_rep' },
                                            right: { type: 'Literal', value: 2, raw: '2' } } } ] },
                                 rest: null,
                                 generator: false,
                                 expression: false },
                              index: 0 } ],
                         tainted: false,
                         stack: true,
                         scope: [Circular] },
                       { name: 'res',
                         identifiers: [ { type: 'Identifier', name: 'res' } ],
                         references: 
                          [ { identifier: { type: 'Identifier', name: 'res' },
                              from: [Circular],
                              tainted: false,
                              resolved: [Circular],
                              flag: 1,
                              __maybeImplicitGlobal: undefined } ],
                         defs: 
                          [ { type: 'Parameter',
                              name: { type: 'Identifier', name: 'res' },
                              node: 
                               { type: 'FunctionExpression',
                                 id: { type: 'Identifier', name: 'replyB' },
                                 params: 
                                  [ { type: 'Identifier', name: 'req' },
                                    { type: 'Identifier', name: 'res' } ],
                                 defaults: [],
                                 body: 
                                  { type: 'BlockStatement',
                                    body: 
                                     [ { type: 'ExpressionStatement',
                                         expression: 
                                          { type: 'CallExpression',
                                            callee: 
                                             { type: 'MemberExpression',
                                               computed: false,
                                               object: { type: 'Identifier', name: 'res' },
                                               property: { type: 'Identifier', name: 'send' } },
                                            arguments: 
                                             [ { type: 'BinaryExpression',
                                                 operator: '+',
                                                 left: { type: 'Literal', value: '', raw: '""' },
                                                 right: { type: 'Identifier', name: '_rep' } } ] } },
                                       { type: 'ExpressionStatement',
                                         expression: 
                                          { type: 'AssignmentExpression',
                                            operator: '+=',
                                            left: { type: 'Identifier', name: '_rep' },
                                            right: { type: 'Literal', value: 2, raw: '2' } } } ] },
                                 rest: null,
                                 generator: false,
                                 expression: false },
                              index: 1 } ],
                         tainted: false,
                         stack: true,
                         scope: [Circular] } ],
                    references: 
                     [ { identifier: { type: 'Identifier', name: 'res' },
                         from: [Circular],
                         tainted: false,
                         resolved: 
                          { name: 'res',
                            identifiers: [ { type: 'Identifier', name: 'res' } ],
                            references: [ [Circular] ],
                            defs: 
                             [ { type: 'Parameter',
                                 name: { type: 'Identifier', name: 'res' },
                                 node: 
                                  { type: 'FunctionExpression',
                                    id: { type: 'Identifier', name: 'replyB' },
                                    params: 
                                     [ { type: 'Identifier', name: 'req' },
                                       { type: 'Identifier', name: 'res' } ],
                                    defaults: [],
                                    body: 
                                     { type: 'BlockStatement',
                                       body: 
                                        [ { type: 'ExpressionStatement',
                                            expression: 
                                             { type: 'CallExpression',
                                               callee: 
                                                { type: 'MemberExpression',
                                                  computed: false,
                                                  object: { type: 'Identifier', name: 'res' },
                                                  property: { type: 'Identifier', name: 'send' } },
                                               arguments: 
                                                [ { type: 'BinaryExpression',
                                                    operator: '+',
                                                    left: { type: 'Literal', value: '', raw: '""' },
                                                    right: { type: 'Identifier', name: '_rep' } } ] } },
                                          { type: 'ExpressionStatement',
                                            expression: 
                                             { type: 'AssignmentExpression',
                                               operator: '+=',
                                               left: { type: 'Identifier', name: '_rep' },
                                               right: { type: 'Literal', value: 2, raw: '2' } } } ] },
                                    rest: null,
                                    generator: false,
                                    expression: false },
                                 index: 1 } ],
                            tainted: false,
                            stack: true,
                            scope: [Circular] },
                         flag: 1,
                         __maybeImplicitGlobal: undefined },
                       { identifier: { type: 'Identifier', name: '_rep' },
                         from: [Circular],
                         tainted: false,
                         resolved: null,
                         flag: 1,
                         __maybeImplicitGlobal: undefined },
                       [Circular] ],
                    left: null,
                    variableScope: [Circular],
                    functionExpressionScope: false,
                    directCallToEvalScope: false,
                    thisFound: false,
                    upper: [Circular],
                    isStrict: false,
                    childScopes: [] },
                 tainted: false,
                 resolved: null,
                 flag: 3,
                 writeExpr: { type: 'Literal', value: 2, raw: '2' },
                 __maybeImplicitGlobal: undefined } ],
            variables: 
             [ { name: 'replyB',
                 identifiers: [ { type: 'Identifier', name: 'replyB' } ],
                 references: [],
                 defs: 
                  [ { type: 'FunctionName',
                      name: { type: 'Identifier', name: 'replyB' },
                      node: 
                       { type: 'FunctionExpression',
                         id: { type: 'Identifier', name: 'replyB' },
                         params: 
                          [ { type: 'Identifier', name: 'req' },
                            { type: 'Identifier', name: 'res' } ],
                         defaults: [],
                         body: 
                          { type: 'BlockStatement',
                            body: 
                             [ { type: 'ExpressionStatement',
                                 expression: 
                                  { type: 'CallExpression',
                                    callee: 
                                     { type: 'MemberExpression',
                                       computed: false,
                                       object: { type: 'Identifier', name: 'res' },
                                       property: { type: 'Identifier', name: 'send' } },
                                    arguments: 
                                     [ { type: 'BinaryExpression',
                                         operator: '+',
                                         left: { type: 'Literal', value: '', raw: '""' },
                                         right: { type: 'Identifier', name: '_rep' } } ] } },
                               { type: 'ExpressionStatement',
                                 expression: 
                                  { type: 'AssignmentExpression',
                                    operator: '+=',
                                    left: { type: 'Identifier', name: '_rep' },
                                    right: { type: 'Literal', value: 2, raw: '2' } } } ] },
                         rest: null,
                         generator: false,
                         expression: false } } ],
                 tainted: false,
                 stack: true,
                 scope: [Circular] } ],
            references: [],
            left: null,
            variableScope: [Circular],
            functionExpressionScope: true,
            directCallToEvalScope: false,
            thisFound: false,
            upper: [Circular],
            isStrict: false,
            childScopes: 
             [ { type: 'function',
                 set: 
                  { __data: 
                     { '$arguments': 
                        { name: 'arguments',
                          identifiers: [],
                          references: [],
                          defs: [],
                          tainted: false,
                          stack: true,
                          scope: [Circular] },
                       '$req': 
                        { name: 'req',
                          identifiers: [ { type: 'Identifier', name: 'req' } ],
                          references: [],
                          defs: 
                           [ { type: 'Parameter',
                               name: { type: 'Identifier', name: 'req' },
                               node: 
                                { type: 'FunctionExpression',
                                  id: { type: 'Identifier', name: 'replyB' },
                                  params: 
                                   [ { type: 'Identifier', name: 'req' },
                                     { type: 'Identifier', name: 'res' } ],
                                  defaults: [],
                                  body: 
                                   { type: 'BlockStatement',
                                     body: 
                                      [ { type: 'ExpressionStatement',
                                          expression: 
                                           { type: 'CallExpression',
                                             callee: 
                                              { type: 'MemberExpression',
                                                computed: false,
                                                object: { type: 'Identifier', name: 'res' },
                                                property: { type: 'Identifier', name: 'send' } },
                                             arguments: 
                                              [ { type: 'BinaryExpression',
                                                  operator: '+',
                                                  left: { type: 'Literal', value: '', raw: '""' },
                                                  right: { type: 'Identifier', name: '_rep' } } ] } },
                                        { type: 'ExpressionStatement',
                                          expression: 
                                           { type: 'AssignmentExpression',
                                             operator: '+=',
                                             left: { type: 'Identifier', name: '_rep' },
                                             right: { type: 'Literal', value: 2, raw: '2' } } } ] },
                                  rest: null,
                                  generator: false,
                                  expression: false },
                               index: 0 } ],
                          tainted: false,
                          stack: true,
                          scope: [Circular] },
                       '$res': 
                        { name: 'res',
                          identifiers: [ { type: 'Identifier', name: 'res' } ],
                          references: 
                           [ { identifier: { type: 'Identifier', name: 'res' },
                               from: [Circular],
                               tainted: false,
                               resolved: [Circular],
                               flag: 1,
                               __maybeImplicitGlobal: undefined } ],
                          defs: 
                           [ { type: 'Parameter',
                               name: { type: 'Identifier', name: 'res' },
                               node: 
                                { type: 'FunctionExpression',
                                  id: { type: 'Identifier', name: 'replyB' },
                                  params: 
                                   [ { type: 'Identifier', name: 'req' },
                                     { type: 'Identifier', name: 'res' } ],
                                  defaults: [],
                                  body: 
                                   { type: 'BlockStatement',
                                     body: 
                                      [ { type: 'ExpressionStatement',
                                          expression: 
                                           { type: 'CallExpression',
                                             callee: 
                                              { type: 'MemberExpression',
                                                computed: false,
                                                object: { type: 'Identifier', name: 'res' },
                                                property: { type: 'Identifier', name: 'send' } },
                                             arguments: 
                                              [ { type: 'BinaryExpression',
                                                  operator: '+',
                                                  left: { type: 'Literal', value: '', raw: '""' },
                                                  right: { type: 'Identifier', name: '_rep' } } ] } },
                                        { type: 'ExpressionStatement',
                                          expression: 
                                           { type: 'AssignmentExpression',
                                             operator: '+=',
                                             left: { type: 'Identifier', name: '_rep' },
                                             right: { type: 'Literal', value: 2, raw: '2' } } } ] },
                                  rest: null,
                                  generator: false,
                                  expression: false },
                               index: 1 } ],
                          tainted: false,
                          stack: true,
                          scope: [Circular] } } },
                 taints: { __data: { '$arguments': true } },
                 dynamic: false,
                 block: 
                  { type: 'FunctionExpression',
                    id: { type: 'Identifier', name: 'replyB' },
                    params: 
                     [ { type: 'Identifier', name: 'req' },
                       { type: 'Identifier', name: 'res' } ],
                    defaults: [],
                    body: 
                     { type: 'BlockStatement',
                       body: 
                        [ { type: 'ExpressionStatement',
                            expression: 
                             { type: 'CallExpression',
                               callee: 
                                { type: 'MemberExpression',
                                  computed: false,
                                  object: { type: 'Identifier', name: 'res' },
                                  property: { type: 'Identifier', name: 'send' } },
                               arguments: 
                                [ { type: 'BinaryExpression',
                                    operator: '+',
                                    left: { type: 'Literal', value: '', raw: '""' },
                                    right: { type: 'Identifier', name: '_rep' } } ] } },
                          { type: 'ExpressionStatement',
                            expression: 
                             { type: 'AssignmentExpression',
                               operator: '+=',
                               left: { type: 'Identifier', name: '_rep' },
                               right: { type: 'Literal', value: 2, raw: '2' } } } ] },
                    rest: null,
                    generator: false,
                    expression: false },
                 through: 
                  [ { identifier: { type: 'Identifier', name: '_rep' },
                      from: [Circular],
                      tainted: false,
                      resolved: null,
                      flag: 1,
                      __maybeImplicitGlobal: undefined },
                    { identifier: { type: 'Identifier', name: '_rep' },
                      from: [Circular],
                      tainted: false,
                      resolved: null,
                      flag: 3,
                      writeExpr: { type: 'Literal', value: 2, raw: '2' },
                      __maybeImplicitGlobal: undefined } ],
                 variables: 
                  [ { name: 'arguments',
                      identifiers: [],
                      references: [],
                      defs: [],
                      tainted: false,
                      stack: true,
                      scope: [Circular] },
                    { name: 'req',
                      identifiers: [ { type: 'Identifier', name: 'req' } ],
                      references: [],
                      defs: 
                       [ { type: 'Parameter',
                           name: { type: 'Identifier', name: 'req' },
                           node: 
                            { type: 'FunctionExpression',
                              id: { type: 'Identifier', name: 'replyB' },
                              params: 
                               [ { type: 'Identifier', name: 'req' },
                                 { type: 'Identifier', name: 'res' } ],
                              defaults: [],
                              body: 
                               { type: 'BlockStatement',
                                 body: 
                                  [ { type: 'ExpressionStatement',
                                      expression: 
                                       { type: 'CallExpression',
                                         callee: 
                                          { type: 'MemberExpression',
                                            computed: false,
                                            object: { type: 'Identifier', name: 'res' },
                                            property: { type: 'Identifier', name: 'send' } },
                                         arguments: 
                                          [ { type: 'BinaryExpression',
                                              operator: '+',
                                              left: { type: 'Literal', value: '', raw: '""' },
                                              right: { type: 'Identifier', name: '_rep' } } ] } },
                                    { type: 'ExpressionStatement',
                                      expression: 
                                       { type: 'AssignmentExpression',
                                         operator: '+=',
                                         left: { type: 'Identifier', name: '_rep' },
                                         right: { type: 'Literal', value: 2, raw: '2' } } } ] },
                              rest: null,
                              generator: false,
                              expression: false },
                           index: 0 } ],
                      tainted: false,
                      stack: true,
                      scope: [Circular] },
                    { name: 'res',
                      identifiers: [ { type: 'Identifier', name: 'res' } ],
                      references: 
                       [ { identifier: { type: 'Identifier', name: 'res' },
                           from: [Circular],
                           tainted: false,
                           resolved: [Circular],
                           flag: 1,
                           __maybeImplicitGlobal: undefined } ],
                      defs: 
                       [ { type: 'Parameter',
                           name: { type: 'Identifier', name: 'res' },
                           node: 
                            { type: 'FunctionExpression',
                              id: { type: 'Identifier', name: 'replyB' },
                              params: 
                               [ { type: 'Identifier', name: 'req' },
                                 { type: 'Identifier', name: 'res' } ],
                              defaults: [],
                              body: 
                               { type: 'BlockStatement',
                                 body: 
                                  [ { type: 'ExpressionStatement',
                                      expression: 
                                       { type: 'CallExpression',
                                         callee: 
                                          { type: 'MemberExpression',
                                            computed: false,
                                            object: { type: 'Identifier', name: 'res' },
                                            property: { type: 'Identifier', name: 'send' } },
                                         arguments: 
                                          [ { type: 'BinaryExpression',
                                              operator: '+',
                                              left: { type: 'Literal', value: '', raw: '""' },
                                              right: { type: 'Identifier', name: '_rep' } } ] } },
                                    { type: 'ExpressionStatement',
                                      expression: 
                                       { type: 'AssignmentExpression',
                                         operator: '+=',
                                         left: { type: 'Identifier', name: '_rep' },
                                         right: { type: 'Literal', value: 2, raw: '2' } } } ] },
                              rest: null,
                              generator: false,
                              expression: false },
                           index: 1 } ],
                      tainted: false,
                      stack: true,
                      scope: [Circular] } ],
                 references: 
                  [ { identifier: { type: 'Identifier', name: 'res' },
                      from: [Circular],
                      tainted: false,
                      resolved: 
                       { name: 'res',
                         identifiers: [ { type: 'Identifier', name: 'res' } ],
                         references: [ [Circular] ],
                         defs: 
                          [ { type: 'Parameter',
                              name: { type: 'Identifier', name: 'res' },
                              node: 
                               { type: 'FunctionExpression',
                                 id: { type: 'Identifier', name: 'replyB' },
                                 params: 
                                  [ { type: 'Identifier', name: 'req' },
                                    { type: 'Identifier', name: 'res' } ],
                                 defaults: [],
                                 body: 
                                  { type: 'BlockStatement',
                                    body: 
                                     [ { type: 'ExpressionStatement',
                                         expression: 
                                          { type: 'CallExpression',
                                            callee: 
                                             { type: 'MemberExpression',
                                               computed: false,
                                               object: { type: 'Identifier', name: 'res' },
                                               property: { type: 'Identifier', name: 'send' } },
                                            arguments: 
                                             [ { type: 'BinaryExpression',
                                                 operator: '+',
                                                 left: { type: 'Literal', value: '', raw: '""' },
                                                 right: { type: 'Identifier', name: '_rep' } } ] } },
                                       { type: 'ExpressionStatement',
                                         expression: 
                                          { type: 'AssignmentExpression',
                                            operator: '+=',
                                            left: { type: 'Identifier', name: '_rep' },
                                            right: { type: 'Literal', value: 2, raw: '2' } } } ] },
                                 rest: null,
                                 generator: false,
                                 expression: false },
                              index: 1 } ],
                         tainted: false,
                         stack: true,
                         scope: [Circular] },
                      flag: 1,
                      __maybeImplicitGlobal: undefined },
                    { identifier: { type: 'Identifier', name: '_rep' },
                      from: [Circular],
                      tainted: false,
                      resolved: null,
                      flag: 1,
                      __maybeImplicitGlobal: undefined },
                    { identifier: { type: 'Identifier', name: '_rep' },
                      from: [Circular],
                      tainted: false,
                      resolved: null,
                      flag: 3,
                      writeExpr: { type: 'Literal', value: 2, raw: '2' },
                      __maybeImplicitGlobal: undefined } ],
                 left: null,
                 variableScope: [Circular],
                 functionExpressionScope: false,
                 directCallToEvalScope: false,
                 thisFound: false,
                 upper: [Circular],
                 isStrict: false,
                 childScopes: [] } ] } ],
       implicit: { set: { __data: {} }, variables: [] } },
     { type: 'function',
       set: 
        { __data: 
           { '$replyA': 
              { name: 'replyA',
                identifiers: [ { type: 'Identifier', name: 'replyA' } ],
                references: [],
                defs: 
                 [ { type: 'FunctionName',
                     name: { type: 'Identifier', name: 'replyA' },
                     node: 
                      { type: 'FunctionExpression',
                        id: { type: 'Identifier', name: 'replyA' },
                        params: 
                         [ { type: 'Identifier', name: 'req' },
                           { type: 'Identifier', name: 'res' } ],
                        defaults: [],
                        body: 
                         { type: 'BlockStatement',
                           body: 
                            [ { type: 'ExpressionStatement',
                                expression: 
                                 { type: 'CallExpression',
                                   callee: 
                                    { type: 'MemberExpression',
                                      computed: false,
                                      object: { type: 'Identifier', name: 'res' },
                                      property: { type: 'Identifier', name: 'send' } },
                                   arguments: 
                                    [ { type: 'BinaryExpression',
                                        operator: '+',
                                        left: { type: 'Literal', value: '', raw: '""' },
                                        right: { type: 'Identifier', name: '_rep' } } ] } },
                              { type: 'ExpressionStatement',
                                expression: 
                                 { type: 'AssignmentExpression',
                                   operator: '+=',
                                   left: { type: 'Identifier', name: '_rep' },
                                   right: { type: 'Literal', value: 1, raw: '1' } } } ] },
                        rest: null,
                        generator: false,
                        expression: false } } ],
                tainted: false,
                stack: true,
                scope: [Circular] } } },
       taints: { __data: {} },
       dynamic: false,
       block: 
        { type: 'FunctionExpression',
          id: { type: 'Identifier', name: 'replyA' },
          params: 
           [ { type: 'Identifier', name: 'req' },
             { type: 'Identifier', name: 'res' } ],
          defaults: [],
          body: 
           { type: 'BlockStatement',
             body: 
              [ { type: 'ExpressionStatement',
                  expression: 
                   { type: 'CallExpression',
                     callee: 
                      { type: 'MemberExpression',
                        computed: false,
                        object: { type: 'Identifier', name: 'res' },
                        property: { type: 'Identifier', name: 'send' } },
                     arguments: 
                      [ { type: 'BinaryExpression',
                          operator: '+',
                          left: { type: 'Literal', value: '', raw: '""' },
                          right: { type: 'Identifier', name: '_rep' } } ] } },
                { type: 'ExpressionStatement',
                  expression: 
                   { type: 'AssignmentExpression',
                     operator: '+=',
                     left: { type: 'Identifier', name: '_rep' },
                     right: { type: 'Literal', value: 1, raw: '1' } } } ] },
          rest: null,
          generator: false,
          expression: false },
       through: 
        [ { identifier: { type: 'Identifier', name: '_rep' },
            from: 
             { type: 'function',
               set: 
                { __data: 
                   { '$arguments': 
                      { name: 'arguments',
                        identifiers: [],
                        references: [],
                        defs: [],
                        tainted: false,
                        stack: true,
                        scope: [Circular] },
                     '$req': 
                      { name: 'req',
                        identifiers: [ { type: 'Identifier', name: 'req' } ],
                        references: [],
                        defs: 
                         [ { type: 'Parameter',
                             name: { type: 'Identifier', name: 'req' },
                             node: 
                              { type: 'FunctionExpression',
                                id: { type: 'Identifier', name: 'replyA' },
                                params: 
                                 [ { type: 'Identifier', name: 'req' },
                                   { type: 'Identifier', name: 'res' } ],
                                defaults: [],
                                body: 
                                 { type: 'BlockStatement',
                                   body: 
                                    [ { type: 'ExpressionStatement',
                                        expression: 
                                         { type: 'CallExpression',
                                           callee: 
                                            { type: 'MemberExpression',
                                              computed: false,
                                              object: { type: 'Identifier', name: 'res' },
                                              property: { type: 'Identifier', name: 'send' } },
                                           arguments: 
                                            [ { type: 'BinaryExpression',
                                                operator: '+',
                                                left: { type: 'Literal', value: '', raw: '""' },
                                                right: { type: 'Identifier', name: '_rep' } } ] } },
                                      { type: 'ExpressionStatement',
                                        expression: 
                                         { type: 'AssignmentExpression',
                                           operator: '+=',
                                           left: { type: 'Identifier', name: '_rep' },
                                           right: { type: 'Literal', value: 1, raw: '1' } } } ] },
                                rest: null,
                                generator: false,
                                expression: false },
                             index: 0 } ],
                        tainted: false,
                        stack: true,
                        scope: [Circular] },
                     '$res': 
                      { name: 'res',
                        identifiers: [ { type: 'Identifier', name: 'res' } ],
                        references: 
                         [ { identifier: { type: 'Identifier', name: 'res' },
                             from: [Circular],
                             tainted: false,
                             resolved: [Circular],
                             flag: 1,
                             __maybeImplicitGlobal: undefined } ],
                        defs: 
                         [ { type: 'Parameter',
                             name: { type: 'Identifier', name: 'res' },
                             node: 
                              { type: 'FunctionExpression',
                                id: { type: 'Identifier', name: 'replyA' },
                                params: 
                                 [ { type: 'Identifier', name: 'req' },
                                   { type: 'Identifier', name: 'res' } ],
                                defaults: [],
                                body: 
                                 { type: 'BlockStatement',
                                   body: 
                                    [ { type: 'ExpressionStatement',
                                        expression: 
                                         { type: 'CallExpression',
                                           callee: 
                                            { type: 'MemberExpression',
                                              computed: false,
                                              object: { type: 'Identifier', name: 'res' },
                                              property: { type: 'Identifier', name: 'send' } },
                                           arguments: 
                                            [ { type: 'BinaryExpression',
                                                operator: '+',
                                                left: { type: 'Literal', value: '', raw: '""' },
                                                right: { type: 'Identifier', name: '_rep' } } ] } },
                                      { type: 'ExpressionStatement',
                                        expression: 
                                         { type: 'AssignmentExpression',
                                           operator: '+=',
                                           left: { type: 'Identifier', name: '_rep' },
                                           right: { type: 'Literal', value: 1, raw: '1' } } } ] },
                                rest: null,
                                generator: false,
                                expression: false },
                             index: 1 } ],
                        tainted: false,
                        stack: true,
                        scope: [Circular] } } },
               taints: { __data: { '$arguments': true } },
               dynamic: false,
               block: 
                { type: 'FunctionExpression',
                  id: { type: 'Identifier', name: 'replyA' },
                  params: 
                   [ { type: 'Identifier', name: 'req' },
                     { type: 'Identifier', name: 'res' } ],
                  defaults: [],
                  body: 
                   { type: 'BlockStatement',
                     body: 
                      [ { type: 'ExpressionStatement',
                          expression: 
                           { type: 'CallExpression',
                             callee: 
                              { type: 'MemberExpression',
                                computed: false,
                                object: { type: 'Identifier', name: 'res' },
                                property: { type: 'Identifier', name: 'send' } },
                             arguments: 
                              [ { type: 'BinaryExpression',
                                  operator: '+',
                                  left: { type: 'Literal', value: '', raw: '""' },
                                  right: { type: 'Identifier', name: '_rep' } } ] } },
                        { type: 'ExpressionStatement',
                          expression: 
                           { type: 'AssignmentExpression',
                             operator: '+=',
                             left: { type: 'Identifier', name: '_rep' },
                             right: { type: 'Literal', value: 1, raw: '1' } } } ] },
                  rest: null,
                  generator: false,
                  expression: false },
               through: 
                [ [Circular],
                  { identifier: { type: 'Identifier', name: '_rep' },
                    from: [Circular],
                    tainted: false,
                    resolved: null,
                    flag: 3,
                    writeExpr: { type: 'Literal', value: 1, raw: '1' },
                    __maybeImplicitGlobal: undefined } ],
               variables: 
                [ { name: 'arguments',
                    identifiers: [],
                    references: [],
                    defs: [],
                    tainted: false,
                    stack: true,
                    scope: [Circular] },
                  { name: 'req',
                    identifiers: [ { type: 'Identifier', name: 'req' } ],
                    references: [],
                    defs: 
                     [ { type: 'Parameter',
                         name: { type: 'Identifier', name: 'req' },
                         node: 
                          { type: 'FunctionExpression',
                            id: { type: 'Identifier', name: 'replyA' },
                            params: 
                             [ { type: 'Identifier', name: 'req' },
                               { type: 'Identifier', name: 'res' } ],
                            defaults: [],
                            body: 
                             { type: 'BlockStatement',
                               body: 
                                [ { type: 'ExpressionStatement',
                                    expression: 
                                     { type: 'CallExpression',
                                       callee: 
                                        { type: 'MemberExpression',
                                          computed: false,
                                          object: { type: 'Identifier', name: 'res' },
                                          property: { type: 'Identifier', name: 'send' } },
                                       arguments: 
                                        [ { type: 'BinaryExpression',
                                            operator: '+',
                                            left: { type: 'Literal', value: '', raw: '""' },
                                            right: { type: 'Identifier', name: '_rep' } } ] } },
                                  { type: 'ExpressionStatement',
                                    expression: 
                                     { type: 'AssignmentExpression',
                                       operator: '+=',
                                       left: { type: 'Identifier', name: '_rep' },
                                       right: { type: 'Literal', value: 1, raw: '1' } } } ] },
                            rest: null,
                            generator: false,
                            expression: false },
                         index: 0 } ],
                    tainted: false,
                    stack: true,
                    scope: [Circular] },
                  { name: 'res',
                    identifiers: [ { type: 'Identifier', name: 'res' } ],
                    references: 
                     [ { identifier: { type: 'Identifier', name: 'res' },
                         from: [Circular],
                         tainted: false,
                         resolved: [Circular],
                         flag: 1,
                         __maybeImplicitGlobal: undefined } ],
                    defs: 
                     [ { type: 'Parameter',
                         name: { type: 'Identifier', name: 'res' },
                         node: 
                          { type: 'FunctionExpression',
                            id: { type: 'Identifier', name: 'replyA' },
                            params: 
                             [ { type: 'Identifier', name: 'req' },
                               { type: 'Identifier', name: 'res' } ],
                            defaults: [],
                            body: 
                             { type: 'BlockStatement',
                               body: 
                                [ { type: 'ExpressionStatement',
                                    expression: 
                                     { type: 'CallExpression',
                                       callee: 
                                        { type: 'MemberExpression',
                                          computed: false,
                                          object: { type: 'Identifier', name: 'res' },
                                          property: { type: 'Identifier', name: 'send' } },
                                       arguments: 
                                        [ { type: 'BinaryExpression',
                                            operator: '+',
                                            left: { type: 'Literal', value: '', raw: '""' },
                                            right: { type: 'Identifier', name: '_rep' } } ] } },
                                  { type: 'ExpressionStatement',
                                    expression: 
                                     { type: 'AssignmentExpression',
                                       operator: '+=',
                                       left: { type: 'Identifier', name: '_rep' },
                                       right: { type: 'Literal', value: 1, raw: '1' } } } ] },
                            rest: null,
                            generator: false,
                            expression: false },
                         index: 1 } ],
                    tainted: false,
                    stack: true,
                    scope: [Circular] } ],
               references: 
                [ { identifier: { type: 'Identifier', name: 'res' },
                    from: [Circular],
                    tainted: false,
                    resolved: 
                     { name: 'res',
                       identifiers: [ { type: 'Identifier', name: 'res' } ],
                       references: [ [Circular] ],
                       defs: 
                        [ { type: 'Parameter',
                            name: { type: 'Identifier', name: 'res' },
                            node: 
                             { type: 'FunctionExpression',
                               id: { type: 'Identifier', name: 'replyA' },
                               params: 
                                [ { type: 'Identifier', name: 'req' },
                                  { type: 'Identifier', name: 'res' } ],
                               defaults: [],
                               body: 
                                { type: 'BlockStatement',
                                  body: 
                                   [ { type: 'ExpressionStatement',
                                       expression: 
                                        { type: 'CallExpression',
                                          callee: 
                                           { type: 'MemberExpression',
                                             computed: false,
                                             object: { type: 'Identifier', name: 'res' },
                                             property: { type: 'Identifier', name: 'send' } },
                                          arguments: 
                                           [ { type: 'BinaryExpression',
                                               operator: '+',
                                               left: { type: 'Literal', value: '', raw: '""' },
                                               right: { type: 'Identifier', name: '_rep' } } ] } },
                                     { type: 'ExpressionStatement',
                                       expression: 
                                        { type: 'AssignmentExpression',
                                          operator: '+=',
                                          left: { type: 'Identifier', name: '_rep' },
                                          right: { type: 'Literal', value: 1, raw: '1' } } } ] },
                               rest: null,
                               generator: false,
                               expression: false },
                            index: 1 } ],
                       tainted: false,
                       stack: true,
                       scope: [Circular] },
                    flag: 1,
                    __maybeImplicitGlobal: undefined },
                  [Circular],
                  { identifier: { type: 'Identifier', name: '_rep' },
                    from: [Circular],
                    tainted: false,
                    resolved: null,
                    flag: 3,
                    writeExpr: { type: 'Literal', value: 1, raw: '1' },
                    __maybeImplicitGlobal: undefined } ],
               left: null,
               variableScope: [Circular],
               functionExpressionScope: false,
               directCallToEvalScope: false,
               thisFound: false,
               upper: [Circular],
               isStrict: false,
               childScopes: [] },
            tainted: false,
            resolved: null,
            flag: 1,
            __maybeImplicitGlobal: undefined },
          { identifier: { type: 'Identifier', name: '_rep' },
            from: 
             { type: 'function',
               set: 
                { __data: 
                   { '$arguments': 
                      { name: 'arguments',
                        identifiers: [],
                        references: [],
                        defs: [],
                        tainted: false,
                        stack: true,
                        scope: [Circular] },
                     '$req': 
                      { name: 'req',
                        identifiers: [ { type: 'Identifier', name: 'req' } ],
                        references: [],
                        defs: 
                         [ { type: 'Parameter',
                             name: { type: 'Identifier', name: 'req' },
                             node: 
                              { type: 'FunctionExpression',
                                id: { type: 'Identifier', name: 'replyA' },
                                params: 
                                 [ { type: 'Identifier', name: 'req' },
                                   { type: 'Identifier', name: 'res' } ],
                                defaults: [],
                                body: 
                                 { type: 'BlockStatement',
                                   body: 
                                    [ { type: 'ExpressionStatement',
                                        expression: 
                                         { type: 'CallExpression',
                                           callee: 
                                            { type: 'MemberExpression',
                                              computed: false,
                                              object: { type: 'Identifier', name: 'res' },
                                              property: { type: 'Identifier', name: 'send' } },
                                           arguments: 
                                            [ { type: 'BinaryExpression',
                                                operator: '+',
                                                left: { type: 'Literal', value: '', raw: '""' },
                                                right: { type: 'Identifier', name: '_rep' } } ] } },
                                      { type: 'ExpressionStatement',
                                        expression: 
                                         { type: 'AssignmentExpression',
                                           operator: '+=',
                                           left: { type: 'Identifier', name: '_rep' },
                                           right: { type: 'Literal', value: 1, raw: '1' } } } ] },
                                rest: null,
                                generator: false,
                                expression: false },
                             index: 0 } ],
                        tainted: false,
                        stack: true,
                        scope: [Circular] },
                     '$res': 
                      { name: 'res',
                        identifiers: [ { type: 'Identifier', name: 'res' } ],
                        references: 
                         [ { identifier: { type: 'Identifier', name: 'res' },
                             from: [Circular],
                             tainted: false,
                             resolved: [Circular],
                             flag: 1,
                             __maybeImplicitGlobal: undefined } ],
                        defs: 
                         [ { type: 'Parameter',
                             name: { type: 'Identifier', name: 'res' },
                             node: 
                              { type: 'FunctionExpression',
                                id: { type: 'Identifier', name: 'replyA' },
                                params: 
                                 [ { type: 'Identifier', name: 'req' },
                                   { type: 'Identifier', name: 'res' } ],
                                defaults: [],
                                body: 
                                 { type: 'BlockStatement',
                                   body: 
                                    [ { type: 'ExpressionStatement',
                                        expression: 
                                         { type: 'CallExpression',
                                           callee: 
                                            { type: 'MemberExpression',
                                              computed: false,
                                              object: { type: 'Identifier', name: 'res' },
                                              property: { type: 'Identifier', name: 'send' } },
                                           arguments: 
                                            [ { type: 'BinaryExpression',
                                                operator: '+',
                                                left: { type: 'Literal', value: '', raw: '""' },
                                                right: { type: 'Identifier', name: '_rep' } } ] } },
                                      { type: 'ExpressionStatement',
                                        expression: 
                                         { type: 'AssignmentExpression',
                                           operator: '+=',
                                           left: { type: 'Identifier', name: '_rep' },
                                           right: { type: 'Literal', value: 1, raw: '1' } } } ] },
                                rest: null,
                                generator: false,
                                expression: false },
                             index: 1 } ],
                        tainted: false,
                        stack: true,
                        scope: [Circular] } } },
               taints: { __data: { '$arguments': true } },
               dynamic: false,
               block: 
                { type: 'FunctionExpression',
                  id: { type: 'Identifier', name: 'replyA' },
                  params: 
                   [ { type: 'Identifier', name: 'req' },
                     { type: 'Identifier', name: 'res' } ],
                  defaults: [],
                  body: 
                   { type: 'BlockStatement',
                     body: 
                      [ { type: 'ExpressionStatement',
                          expression: 
                           { type: 'CallExpression',
                             callee: 
                              { type: 'MemberExpression',
                                computed: false,
                                object: { type: 'Identifier', name: 'res' },
                                property: { type: 'Identifier', name: 'send' } },
                             arguments: 
                              [ { type: 'BinaryExpression',
                                  operator: '+',
                                  left: { type: 'Literal', value: '', raw: '""' },
                                  right: { type: 'Identifier', name: '_rep' } } ] } },
                        { type: 'ExpressionStatement',
                          expression: 
                           { type: 'AssignmentExpression',
                             operator: '+=',
                             left: { type: 'Identifier', name: '_rep' },
                             right: { type: 'Literal', value: 1, raw: '1' } } } ] },
                  rest: null,
                  generator: false,
                  expression: false },
               through: 
                [ { identifier: { type: 'Identifier', name: '_rep' },
                    from: [Circular],
                    tainted: false,
                    resolved: null,
                    flag: 1,
                    __maybeImplicitGlobal: undefined },
                  [Circular] ],
               variables: 
                [ { name: 'arguments',
                    identifiers: [],
                    references: [],
                    defs: [],
                    tainted: false,
                    stack: true,
                    scope: [Circular] },
                  { name: 'req',
                    identifiers: [ { type: 'Identifier', name: 'req' } ],
                    references: [],
                    defs: 
                     [ { type: 'Parameter',
                         name: { type: 'Identifier', name: 'req' },
                         node: 
                          { type: 'FunctionExpression',
                            id: { type: 'Identifier', name: 'replyA' },
                            params: 
                             [ { type: 'Identifier', name: 'req' },
                               { type: 'Identifier', name: 'res' } ],
                            defaults: [],
                            body: 
                             { type: 'BlockStatement',
                               body: 
                                [ { type: 'ExpressionStatement',
                                    expression: 
                                     { type: 'CallExpression',
                                       callee: 
                                        { type: 'MemberExpression',
                                          computed: false,
                                          object: { type: 'Identifier', name: 'res' },
                                          property: { type: 'Identifier', name: 'send' } },
                                       arguments: 
                                        [ { type: 'BinaryExpression',
                                            operator: '+',
                                            left: { type: 'Literal', value: '', raw: '""' },
                                            right: { type: 'Identifier', name: '_rep' } } ] } },
                                  { type: 'ExpressionStatement',
                                    expression: 
                                     { type: 'AssignmentExpression',
                                       operator: '+=',
                                       left: { type: 'Identifier', name: '_rep' },
                                       right: { type: 'Literal', value: 1, raw: '1' } } } ] },
                            rest: null,
                            generator: false,
                            expression: false },
                         index: 0 } ],
                    tainted: false,
                    stack: true,
                    scope: [Circular] },
                  { name: 'res',
                    identifiers: [ { type: 'Identifier', name: 'res' } ],
                    references: 
                     [ { identifier: { type: 'Identifier', name: 'res' },
                         from: [Circular],
                         tainted: false,
                         resolved: [Circular],
                         flag: 1,
                         __maybeImplicitGlobal: undefined } ],
                    defs: 
                     [ { type: 'Parameter',
                         name: { type: 'Identifier', name: 'res' },
                         node: 
                          { type: 'FunctionExpression',
                            id: { type: 'Identifier', name: 'replyA' },
                            params: 
                             [ { type: 'Identifier', name: 'req' },
                               { type: 'Identifier', name: 'res' } ],
                            defaults: [],
                            body: 
                             { type: 'BlockStatement',
                               body: 
                                [ { type: 'ExpressionStatement',
                                    expression: 
                                     { type: 'CallExpression',
                                       callee: 
                                        { type: 'MemberExpression',
                                          computed: false,
                                          object: { type: 'Identifier', name: 'res' },
                                          property: { type: 'Identifier', name: 'send' } },
                                       arguments: 
                                        [ { type: 'BinaryExpression',
                                            operator: '+',
                                            left: { type: 'Literal', value: '', raw: '""' },
                                            right: { type: 'Identifier', name: '_rep' } } ] } },
                                  { type: 'ExpressionStatement',
                                    expression: 
                                     { type: 'AssignmentExpression',
                                       operator: '+=',
                                       left: { type: 'Identifier', name: '_rep' },
                                       right: { type: 'Literal', value: 1, raw: '1' } } } ] },
                            rest: null,
                            generator: false,
                            expression: false },
                         index: 1 } ],
                    tainted: false,
                    stack: true,
                    scope: [Circular] } ],
               references: 
                [ { identifier: { type: 'Identifier', name: 'res' },
                    from: [Circular],
                    tainted: false,
                    resolved: 
                     { name: 'res',
                       identifiers: [ { type: 'Identifier', name: 'res' } ],
                       references: [ [Circular] ],
                       defs: 
                        [ { type: 'Parameter',
                            name: { type: 'Identifier', name: 'res' },
                            node: 
                             { type: 'FunctionExpression',
                               id: { type: 'Identifier', name: 'replyA' },
                               params: 
                                [ { type: 'Identifier', name: 'req' },
                                  { type: 'Identifier', name: 'res' } ],
                               defaults: [],
                               body: 
                                { type: 'BlockStatement',
                                  body: 
                                   [ { type: 'ExpressionStatement',
                                       expression: 
                                        { type: 'CallExpression',
                                          callee: 
                                           { type: 'MemberExpression',
                                             computed: false,
                                             object: { type: 'Identifier', name: 'res' },
                                             property: { type: 'Identifier', name: 'send' } },
                                          arguments: 
                                           [ { type: 'BinaryExpression',
                                               operator: '+',
                                               left: { type: 'Literal', value: '', raw: '""' },
                                               right: { type: 'Identifier', name: '_rep' } } ] } },
                                     { type: 'ExpressionStatement',
                                       expression: 
                                        { type: 'AssignmentExpression',
                                          operator: '+=',
                                          left: { type: 'Identifier', name: '_rep' },
                                          right: { type: 'Literal', value: 1, raw: '1' } } } ] },
                               rest: null,
                               generator: false,
                               expression: false },
                            index: 1 } ],
                       tainted: false,
                       stack: true,
                       scope: [Circular] },
                    flag: 1,
                    __maybeImplicitGlobal: undefined },
                  { identifier: { type: 'Identifier', name: '_rep' },
                    from: [Circular],
                    tainted: false,
                    resolved: null,
                    flag: 1,
                    __maybeImplicitGlobal: undefined },
                  [Circular] ],
               left: null,
               variableScope: [Circular],
               functionExpressionScope: false,
               directCallToEvalScope: false,
               thisFound: false,
               upper: [Circular],
               isStrict: false,
               childScopes: [] },
            tainted: false,
            resolved: null,
            flag: 3,
            writeExpr: { type: 'Literal', value: 1, raw: '1' },
            __maybeImplicitGlobal: undefined } ],
       variables: 
        [ { name: 'replyA',
            identifiers: [ { type: 'Identifier', name: 'replyA' } ],
            references: [],
            defs: 
             [ { type: 'FunctionName',
                 name: { type: 'Identifier', name: 'replyA' },
                 node: 
                  { type: 'FunctionExpression',
                    id: { type: 'Identifier', name: 'replyA' },
                    params: 
                     [ { type: 'Identifier', name: 'req' },
                       { type: 'Identifier', name: 'res' } ],
                    defaults: [],
                    body: 
                     { type: 'BlockStatement',
                       body: 
                        [ { type: 'ExpressionStatement',
                            expression: 
                             { type: 'CallExpression',
                               callee: 
                                { type: 'MemberExpression',
                                  computed: false,
                                  object: { type: 'Identifier', name: 'res' },
                                  property: { type: 'Identifier', name: 'send' } },
                               arguments: 
                                [ { type: 'BinaryExpression',
                                    operator: '+',
                                    left: { type: 'Literal', value: '', raw: '""' },
                                    right: { type: 'Identifier', name: '_rep' } } ] } },
                          { type: 'ExpressionStatement',
                            expression: 
                             { type: 'AssignmentExpression',
                               operator: '+=',
                               left: { type: 'Identifier', name: '_rep' },
                               right: { type: 'Literal', value: 1, raw: '1' } } } ] },
                    rest: null,
                    generator: false,
                    expression: false } } ],
            tainted: false,
            stack: true,
            scope: [Circular] } ],
       references: [],
       left: null,
       variableScope: [Circular],
       functionExpressionScope: true,
       directCallToEvalScope: false,
       thisFound: false,
       upper: 
        { type: 'global',
          set: 
           { __data: 
              { '$app': 
                 { name: 'app',
                   identifiers: [ { type: 'Identifier', name: 'app' } ],
                   references: [],
                   defs: 
                    [ { type: 'Variable',
                        name: { type: 'Identifier', name: 'app' },
                        node: 
                         { type: 'VariableDeclarator',
                           id: { type: 'Identifier', name: 'app' },
                           init: 
                            { type: 'CallExpression',
                              callee: 
                               { type: 'CallExpression',
                                 callee: { type: 'Identifier', name: 'require' },
                                 arguments: [ { type: 'Literal', value: 'express', raw: '\'express\'' } ] },
                              arguments: [] } },
                        index: 0,
                        parent: 
                         { type: 'VariableDeclaration',
                           declarations: 
                            [ { type: 'VariableDeclarator',
                                id: { type: 'Identifier', name: 'app' },
                                init: 
                                 { type: 'CallExpression',
                                   callee: 
                                    { type: 'CallExpression',
                                      callee: { type: 'Identifier', name: 'require' },
                                      arguments: [ { type: 'Literal', value: 'express', raw: '\'express\'' } ] },
                                   arguments: [] } } ],
                           kind: 'var' } } ],
                   tainted: false,
                   stack: true,
                   scope: [Circular] },
                '$_rep': 
                 { name: '_rep',
                   identifiers: [ { type: 'Identifier', name: '_rep' } ],
                   references: [],
                   defs: 
                    [ { type: 'Variable',
                        name: { type: 'Identifier', name: '_rep' },
                        node: 
                         { type: 'VariableDeclarator',
                           id: { type: 'Identifier', name: '_rep' },
                           init: { type: 'Literal', value: 42, raw: '42' } },
                        index: 0,
                        parent: 
                         { type: 'VariableDeclaration',
                           declarations: 
                            [ { type: 'VariableDeclarator',
                                id: { type: 'Identifier', name: '_rep' },
                                init: { type: 'Literal', value: 42, raw: '42' } } ],
                           kind: 'var' } } ],
                   tainted: false,
                   stack: true,
                   scope: [Circular] } } },
          taints: { __data: {} },
          dynamic: true,
          block: 
           { type: 'Program',
             body: 
              [ { type: 'VariableDeclaration',
                  declarations: 
                   [ { type: 'VariableDeclarator',
                       id: { type: 'Identifier', name: 'app' },
                       init: 
                        { type: 'CallExpression',
                          callee: 
                           { type: 'CallExpression',
                             callee: { type: 'Identifier', name: 'require' },
                             arguments: [ { type: 'Literal', value: 'express', raw: '\'express\'' } ] },
                          arguments: [] } } ],
                  kind: 'var' },
                { type: 'VariableDeclaration',
                  declarations: 
                   [ { type: 'VariableDeclarator',
                       id: { type: 'Identifier', name: '_rep' },
                       init: { type: 'Literal', value: 42, raw: '42' } } ],
                  kind: 'var' },
                { type: 'ExpressionStatement',
                  expression: 
                   { type: 'CallExpression',
                     callee: 
                      { type: 'MemberExpression',
                        computed: false,
                        object: { type: 'Identifier', name: 'app' },
                        property: { type: 'Identifier', name: 'get' } },
                     arguments: 
                      [ { type: 'Literal', value: '/A', raw: '"/A"' },
                        { type: 'FunctionExpression',
                          id: { type: 'Identifier', name: 'replyA' },
                          params: 
                           [ { type: 'Identifier', name: 'req' },
                             { type: 'Identifier', name: 'res' } ],
                          defaults: [],
                          body: 
                           { type: 'BlockStatement',
                             body: 
                              [ { type: 'ExpressionStatement',
                                  expression: 
                                   { type: 'CallExpression',
                                     callee: 
                                      { type: 'MemberExpression',
                                        computed: false,
                                        object: { type: 'Identifier', name: 'res' },
                                        property: { type: 'Identifier', name: 'send' } },
                                     arguments: 
                                      [ { type: 'BinaryExpression',
                                          operator: '+',
                                          left: { type: 'Literal', value: '', raw: '""' },
                                          right: { type: 'Identifier', name: '_rep' } } ] } },
                                { type: 'ExpressionStatement',
                                  expression: 
                                   { type: 'AssignmentExpression',
                                     operator: '+=',
                                     left: { type: 'Identifier', name: '_rep' },
                                     right: { type: 'Literal', value: 1, raw: '1' } } } ] },
                          rest: null,
                          generator: false,
                          expression: false } ] } },
                { type: 'ExpressionStatement',
                  expression: 
                   { type: 'CallExpression',
                     callee: 
                      { type: 'MemberExpression',
                        computed: false,
                        object: { type: 'Identifier', name: 'app' },
                        property: { type: 'Identifier', name: 'get' } },
                     arguments: 
                      [ { type: 'Literal', value: '/B', raw: '"/B"' },
                        { type: 'FunctionExpression',
                          id: { type: 'Identifier', name: 'replyB' },
                          params: 
                           [ { type: 'Identifier', name: 'req' },
                             { type: 'Identifier', name: 'res' } ],
                          defaults: [],
                          body: 
                           { type: 'BlockStatement',
                             body: 
                              [ { type: 'ExpressionStatement',
                                  expression: 
                                   { type: 'CallExpression',
                                     callee: 
                                      { type: 'MemberExpression',
                                        computed: false,
                                        object: { type: 'Identifier', name: 'res' },
                                        property: { type: 'Identifier', name: 'send' } },
                                     arguments: 
                                      [ { type: 'BinaryExpression',
                                          operator: '+',
                                          left: { type: 'Literal', value: '', raw: '""' },
                                          right: { type: 'Identifier', name: '_rep' } } ] } },
                                { type: 'ExpressionStatement',
                                  expression: 
                                   { type: 'AssignmentExpression',
                                     operator: '+=',
                                     left: { type: 'Identifier', name: '_rep' },
                                     right: { type: 'Literal', value: 2, raw: '2' } } } ] },
                          rest: null,
                          generator: false,
                          expression: false } ] } },
                { type: 'IfStatement',
                  test: 
                   { type: 'UnaryExpression',
                     operator: '!',
                     argument: 
                      { type: 'MemberExpression',
                        computed: false,
                        object: { type: 'Identifier', name: 'module' },
                        property: { type: 'Identifier', name: 'parent' } },
                     prefix: true },
                  consequent: 
                   { type: 'BlockStatement',
                     body: 
                      [ { type: 'ExpressionStatement',
                          expression: 
                           { type: 'CallExpression',
                             callee: 
                              { type: 'MemberExpression',
                                computed: false,
                                object: { type: 'Identifier', name: 'app' },
                                property: { type: 'Identifier', name: 'listen' } },
                             arguments: [ { type: 'Literal', value: 8080, raw: '8080' } ] } },
                        { type: 'ExpressionStatement',
                          expression: 
                           { type: 'CallExpression',
                             callee: 
                              { type: 'MemberExpression',
                                computed: false,
                                object: { type: 'Identifier', name: 'console' },
                                property: { type: 'Identifier', name: 'log' } },
                             arguments: 
                              [ { type: 'Literal',
                                  value: '>> listening 8080',
                                  raw: '">> listening 8080"' } ] } } ] },
                  alternate: null },
                { type: 'ExpressionStatement',
                  expression: 
                   { type: 'AssignmentExpression',
                     operator: '=',
                     left: 
                      { type: 'MemberExpression',
                        computed: false,
                        object: { type: 'Identifier', name: 'exports' },
                        property: { type: 'Identifier', name: 'app' } },
                     right: { type: 'Identifier', name: 'app' } } } ] },
          through: 
           [ { identifier: { type: 'Identifier', name: 'app' },
               from: [Circular],
               tainted: false,
               resolved: null,
               flag: 2,
               writeExpr: 
                { type: 'CallExpression',
                  callee: 
                   { type: 'CallExpression',
                     callee: { type: 'Identifier', name: 'require' },
                     arguments: [ { type: 'Literal', value: 'express', raw: '\'express\'' } ] },
                  arguments: [] },
               __maybeImplicitGlobal: false },
             { identifier: { type: 'Identifier', name: 'require' },
               from: [Circular],
               tainted: false,
               resolved: null,
               flag: 1,
               __maybeImplicitGlobal: undefined },
             { identifier: { type: 'Identifier', name: '_rep' },
               from: [Circular],
               tainted: false,
               resolved: null,
               flag: 2,
               writeExpr: { type: 'Literal', value: 42, raw: '42' },
               __maybeImplicitGlobal: false },
             { identifier: { type: 'Identifier', name: 'app' },
               from: [Circular],
               tainted: false,
               resolved: null,
               flag: 1,
               __maybeImplicitGlobal: undefined },
             { identifier: { type: 'Identifier', name: '_rep' },
               from: 
                { type: 'function',
                  set: 
                   { __data: 
                      { '$arguments': 
                         { name: 'arguments',
                           identifiers: [],
                           references: [],
                           defs: [],
                           tainted: false,
                           stack: true,
                           scope: [Circular] },
                        '$req': 
                         { name: 'req',
                           identifiers: [ { type: 'Identifier', name: 'req' } ],
                           references: [],
                           defs: 
                            [ { type: 'Parameter',
                                name: { type: 'Identifier', name: 'req' },
                                node: 
                                 { type: 'FunctionExpression',
                                   id: { type: 'Identifier', name: 'replyA' },
                                   params: 
                                    [ { type: 'Identifier', name: 'req' },
                                      { type: 'Identifier', name: 'res' } ],
                                   defaults: [],
                                   body: 
                                    { type: 'BlockStatement',
                                      body: 
                                       [ { type: 'ExpressionStatement',
                                           expression: 
                                            { type: 'CallExpression',
                                              callee: 
                                               { type: 'MemberExpression',
                                                 computed: false,
                                                 object: { type: 'Identifier', name: 'res' },
                                                 property: { type: 'Identifier', name: 'send' } },
                                              arguments: 
                                               [ { type: 'BinaryExpression',
                                                   operator: '+',
                                                   left: { type: 'Literal', value: '', raw: '""' },
                                                   right: { type: 'Identifier', name: '_rep' } } ] } },
                                         { type: 'ExpressionStatement',
                                           expression: 
                                            { type: 'AssignmentExpression',
                                              operator: '+=',
                                              left: { type: 'Identifier', name: '_rep' },
                                              right: { type: 'Literal', value: 1, raw: '1' } } } ] },
                                   rest: null,
                                   generator: false,
                                   expression: false },
                                index: 0 } ],
                           tainted: false,
                           stack: true,
                           scope: [Circular] },
                        '$res': 
                         { name: 'res',
                           identifiers: [ { type: 'Identifier', name: 'res' } ],
                           references: 
                            [ { identifier: { type: 'Identifier', name: 'res' },
                                from: [Circular],
                                tainted: false,
                                resolved: [Circular],
                                flag: 1,
                                __maybeImplicitGlobal: undefined } ],
                           defs: 
                            [ { type: 'Parameter',
                                name: { type: 'Identifier', name: 'res' },
                                node: 
                                 { type: 'FunctionExpression',
                                   id: { type: 'Identifier', name: 'replyA' },
                                   params: 
                                    [ { type: 'Identifier', name: 'req' },
                                      { type: 'Identifier', name: 'res' } ],
                                   defaults: [],
                                   body: 
                                    { type: 'BlockStatement',
                                      body: 
                                       [ { type: 'ExpressionStatement',
                                           expression: 
                                            { type: 'CallExpression',
                                              callee: 
                                               { type: 'MemberExpression',
                                                 computed: false,
                                                 object: { type: 'Identifier', name: 'res' },
                                                 property: { type: 'Identifier', name: 'send' } },
                                              arguments: 
                                               [ { type: 'BinaryExpression',
                                                   operator: '+',
                                                   left: { type: 'Literal', value: '', raw: '""' },
                                                   right: { type: 'Identifier', name: '_rep' } } ] } },
                                         { type: 'ExpressionStatement',
                                           expression: 
                                            { type: 'AssignmentExpression',
                                              operator: '+=',
                                              left: { type: 'Identifier', name: '_rep' },
                                              right: { type: 'Literal', value: 1, raw: '1' } } } ] },
                                   rest: null,
                                   generator: false,
                                   expression: false },
                                index: 1 } ],
                           tainted: false,
                           stack: true,
                           scope: [Circular] } } },
                  taints: { __data: { '$arguments': true } },
                  dynamic: false,
                  block: 
                   { type: 'FunctionExpression',
                     id: { type: 'Identifier', name: 'replyA' },
                     params: 
                      [ { type: 'Identifier', name: 'req' },
                        { type: 'Identifier', name: 'res' } ],
                     defaults: [],
                     body: 
                      { type: 'BlockStatement',
                        body: 
                         [ { type: 'ExpressionStatement',
                             expression: 
                              { type: 'CallExpression',
                                callee: 
                                 { type: 'MemberExpression',
                                   computed: false,
                                   object: { type: 'Identifier', name: 'res' },
                                   property: { type: 'Identifier', name: 'send' } },
                                arguments: 
                                 [ { type: 'BinaryExpression',
                                     operator: '+',
                                     left: { type: 'Literal', value: '', raw: '""' },
                                     right: { type: 'Identifier', name: '_rep' } } ] } },
                           { type: 'ExpressionStatement',
                             expression: 
                              { type: 'AssignmentExpression',
                                operator: '+=',
                                left: { type: 'Identifier', name: '_rep' },
                                right: { type: 'Literal', value: 1, raw: '1' } } } ] },
                     rest: null,
                     generator: false,
                     expression: false },
                  through: 
                   [ [Circular],
                     { identifier: { type: 'Identifier', name: '_rep' },
                       from: [Circular],
                       tainted: false,
                       resolved: null,
                       flag: 3,
                       writeExpr: { type: 'Literal', value: 1, raw: '1' },
                       __maybeImplicitGlobal: undefined } ],
                  variables: 
                   [ { name: 'arguments',
                       identifiers: [],
                       references: [],
                       defs: [],
                       tainted: false,
                       stack: true,
                       scope: [Circular] },
                     { name: 'req',
                       identifiers: [ { type: 'Identifier', name: 'req' } ],
                       references: [],
                       defs: 
                        [ { type: 'Parameter',
                            name: { type: 'Identifier', name: 'req' },
                            node: 
                             { type: 'FunctionExpression',
                               id: { type: 'Identifier', name: 'replyA' },
                               params: 
                                [ { type: 'Identifier', name: 'req' },
                                  { type: 'Identifier', name: 'res' } ],
                               defaults: [],
                               body: 
                                { type: 'BlockStatement',
                                  body: 
                                   [ { type: 'ExpressionStatement',
                                       expression: 
                                        { type: 'CallExpression',
                                          callee: 
                                           { type: 'MemberExpression',
                                             computed: false,
                                             object: { type: 'Identifier', name: 'res' },
                                             property: { type: 'Identifier', name: 'send' } },
                                          arguments: 
                                           [ { type: 'BinaryExpression',
                                               operator: '+',
                                               left: { type: 'Literal', value: '', raw: '""' },
                                               right: { type: 'Identifier', name: '_rep' } } ] } },
                                     { type: 'ExpressionStatement',
                                       expression: 
                                        { type: 'AssignmentExpression',
                                          operator: '+=',
                                          left: { type: 'Identifier', name: '_rep' },
                                          right: { type: 'Literal', value: 1, raw: '1' } } } ] },
                               rest: null,
                               generator: false,
                               expression: false },
                            index: 0 } ],
                       tainted: false,
                       stack: true,
                       scope: [Circular] },
                     { name: 'res',
                       identifiers: [ { type: 'Identifier', name: 'res' } ],
                       references: 
                        [ { identifier: { type: 'Identifier', name: 'res' },
                            from: [Circular],
                            tainted: false,
                            resolved: [Circular],
                            flag: 1,
                            __maybeImplicitGlobal: undefined } ],
                       defs: 
                        [ { type: 'Parameter',
                            name: { type: 'Identifier', name: 'res' },
                            node: 
                             { type: 'FunctionExpression',
                               id: { type: 'Identifier', name: 'replyA' },
                               params: 
                                [ { type: 'Identifier', name: 'req' },
                                  { type: 'Identifier', name: 'res' } ],
                               defaults: [],
                               body: 
                                { type: 'BlockStatement',
                                  body: 
                                   [ { type: 'ExpressionStatement',
                                       expression: 
                                        { type: 'CallExpression',
                                          callee: 
                                           { type: 'MemberExpression',
                                             computed: false,
                                             object: { type: 'Identifier', name: 'res' },
                                             property: { type: 'Identifier', name: 'send' } },
                                          arguments: 
                                           [ { type: 'BinaryExpression',
                                               operator: '+',
                                               left: { type: 'Literal', value: '', raw: '""' },
                                               right: { type: 'Identifier', name: '_rep' } } ] } },
                                     { type: 'ExpressionStatement',
                                       expression: 
                                        { type: 'AssignmentExpression',
                                          operator: '+=',
                                          left: { type: 'Identifier', name: '_rep' },
                                          right: { type: 'Literal', value: 1, raw: '1' } } } ] },
                               rest: null,
                               generator: false,
                               expression: false },
                            index: 1 } ],
                       tainted: false,
                       stack: true,
                       scope: [Circular] } ],
                  references: 
                   [ { identifier: { type: 'Identifier', name: 'res' },
                       from: [Circular],
                       tainted: false,
                       resolved: 
                        { name: 'res',
                          identifiers: [ { type: 'Identifier', name: 'res' } ],
                          references: [ [Circular] ],
                          defs: 
                           [ { type: 'Parameter',
                               name: { type: 'Identifier', name: 'res' },
                               node: 
                                { type: 'FunctionExpression',
                                  id: { type: 'Identifier', name: 'replyA' },
                                  params: 
                                   [ { type: 'Identifier', name: 'req' },
                                     { type: 'Identifier', name: 'res' } ],
                                  defaults: [],
                                  body: 
                                   { type: 'BlockStatement',
                                     body: 
                                      [ { type: 'ExpressionStatement',
                                          expression: 
                                           { type: 'CallExpression',
                                             callee: 
                                              { type: 'MemberExpression',
                                                computed: false,
                                                object: { type: 'Identifier', name: 'res' },
                                                property: { type: 'Identifier', name: 'send' } },
                                             arguments: 
                                              [ { type: 'BinaryExpression',
                                                  operator: '+',
                                                  left: { type: 'Literal', value: '', raw: '""' },
                                                  right: { type: 'Identifier', name: '_rep' } } ] } },
                                        { type: 'ExpressionStatement',
                                          expression: 
                                           { type: 'AssignmentExpression',
                                             operator: '+=',
                                             left: { type: 'Identifier', name: '_rep' },
                                             right: { type: 'Literal', value: 1, raw: '1' } } } ] },
                                  rest: null,
                                  generator: false,
                                  expression: false },
                               index: 1 } ],
                          tainted: false,
                          stack: true,
                          scope: [Circular] },
                       flag: 1,
                       __maybeImplicitGlobal: undefined },
                     [Circular],
                     { identifier: { type: 'Identifier', name: '_rep' },
                       from: [Circular],
                       tainted: false,
                       resolved: null,
                       flag: 3,
                       writeExpr: { type: 'Literal', value: 1, raw: '1' },
                       __maybeImplicitGlobal: undefined } ],
                  left: null,
                  variableScope: [Circular],
                  functionExpressionScope: false,
                  directCallToEvalScope: false,
                  thisFound: false,
                  upper: [Circular],
                  isStrict: false,
                  childScopes: [] },
               tainted: false,
               resolved: null,
               flag: 1,
               __maybeImplicitGlobal: undefined },
             { identifier: { type: 'Identifier', name: '_rep' },
               from: 
                { type: 'function',
                  set: 
                   { __data: 
                      { '$arguments': 
                         { name: 'arguments',
                           identifiers: [],
                           references: [],
                           defs: [],
                           tainted: false,
                           stack: true,
                           scope: [Circular] },
                        '$req': 
                         { name: 'req',
                           identifiers: [ { type: 'Identifier', name: 'req' } ],
                           references: [],
                           defs: 
                            [ { type: 'Parameter',
                                name: { type: 'Identifier', name: 'req' },
                                node: 
                                 { type: 'FunctionExpression',
                                   id: { type: 'Identifier', name: 'replyA' },
                                   params: 
                                    [ { type: 'Identifier', name: 'req' },
                                      { type: 'Identifier', name: 'res' } ],
                                   defaults: [],
                                   body: 
                                    { type: 'BlockStatement',
                                      body: 
                                       [ { type: 'ExpressionStatement',
                                           expression: 
                                            { type: 'CallExpression',
                                              callee: 
                                               { type: 'MemberExpression',
                                                 computed: false,
                                                 object: { type: 'Identifier', name: 'res' },
                                                 property: { type: 'Identifier', name: 'send' } },
                                              arguments: 
                                               [ { type: 'BinaryExpression',
                                                   operator: '+',
                                                   left: { type: 'Literal', value: '', raw: '""' },
                                                   right: { type: 'Identifier', name: '_rep' } } ] } },
                                         { type: 'ExpressionStatement',
                                           expression: 
                                            { type: 'AssignmentExpression',
                                              operator: '+=',
                                              left: { type: 'Identifier', name: '_rep' },
                                              right: { type: 'Literal', value: 1, raw: '1' } } } ] },
                                   rest: null,
                                   generator: false,
                                   expression: false },
                                index: 0 } ],
                           tainted: false,
                           stack: true,
                           scope: [Circular] },
                        '$res': 
                         { name: 'res',
                           identifiers: [ { type: 'Identifier', name: 'res' } ],
                           references: 
                            [ { identifier: { type: 'Identifier', name: 'res' },
                                from: [Circular],
                                tainted: false,
                                resolved: [Circular],
                                flag: 1,
                                __maybeImplicitGlobal: undefined } ],
                           defs: 
                            [ { type: 'Parameter',
                                name: { type: 'Identifier', name: 'res' },
                                node: 
                                 { type: 'FunctionExpression',
                                   id: { type: 'Identifier', name: 'replyA' },
                                   params: 
                                    [ { type: 'Identifier', name: 'req' },
                                      { type: 'Identifier', name: 'res' } ],
                                   defaults: [],
                                   body: 
                                    { type: 'BlockStatement',
                                      body: 
                                       [ { type: 'ExpressionStatement',
                                           expression: 
                                            { type: 'CallExpression',
                                              callee: 
                                               { type: 'MemberExpression',
                                                 computed: false,
                                                 object: { type: 'Identifier', name: 'res' },
                                                 property: { type: 'Identifier', name: 'send' } },
                                              arguments: 
                                               [ { type: 'BinaryExpression',
                                                   operator: '+',
                                                   left: { type: 'Literal', value: '', raw: '""' },
                                                   right: { type: 'Identifier', name: '_rep' } } ] } },
                                         { type: 'ExpressionStatement',
                                           expression: 
                                            { type: 'AssignmentExpression',
                                              operator: '+=',
                                              left: { type: 'Identifier', name: '_rep' },
                                              right: { type: 'Literal', value: 1, raw: '1' } } } ] },
                                   rest: null,
                                   generator: false,
                                   expression: false },
                                index: 1 } ],
                           tainted: false,
                           stack: true,
                           scope: [Circular] } } },
                  taints: { __data: { '$arguments': true } },
                  dynamic: false,
                  block: 
                   { type: 'FunctionExpression',
                     id: { type: 'Identifier', name: 'replyA' },
                     params: 
                      [ { type: 'Identifier', name: 'req' },
                        { type: 'Identifier', name: 'res' } ],
                     defaults: [],
                     body: 
                      { type: 'BlockStatement',
                        body: 
                         [ { type: 'ExpressionStatement',
                             expression: 
                              { type: 'CallExpression',
                                callee: 
                                 { type: 'MemberExpression',
                                   computed: false,
                                   object: { type: 'Identifier', name: 'res' },
                                   property: { type: 'Identifier', name: 'send' } },
                                arguments: 
                                 [ { type: 'BinaryExpression',
                                     operator: '+',
                                     left: { type: 'Literal', value: '', raw: '""' },
                                     right: { type: 'Identifier', name: '_rep' } } ] } },
                           { type: 'ExpressionStatement',
                             expression: 
                              { type: 'AssignmentExpression',
                                operator: '+=',
                                left: { type: 'Identifier', name: '_rep' },
                                right: { type: 'Literal', value: 1, raw: '1' } } } ] },
                     rest: null,
                     generator: false,
                     expression: false },
                  through: 
                   [ { identifier: { type: 'Identifier', name: '_rep' },
                       from: [Circular],
                       tainted: false,
                       resolved: null,
                       flag: 1,
                       __maybeImplicitGlobal: undefined },
                     [Circular] ],
                  variables: 
                   [ { name: 'arguments',
                       identifiers: [],
                       references: [],
                       defs: [],
                       tainted: false,
                       stack: true,
                       scope: [Circular] },
                     { name: 'req',
                       identifiers: [ { type: 'Identifier', name: 'req' } ],
                       references: [],
                       defs: 
                        [ { type: 'Parameter',
                            name: { type: 'Identifier', name: 'req' },
                            node: 
                             { type: 'FunctionExpression',
                               id: { type: 'Identifier', name: 'replyA' },
                               params: 
                                [ { type: 'Identifier', name: 'req' },
                                  { type: 'Identifier', name: 'res' } ],
                               defaults: [],
                               body: 
                                { type: 'BlockStatement',
                                  body: 
                                   [ { type: 'ExpressionStatement',
                                       expression: 
                                        { type: 'CallExpression',
                                          callee: 
                                           { type: 'MemberExpression',
                                             computed: false,
                                             object: { type: 'Identifier', name: 'res' },
                                             property: { type: 'Identifier', name: 'send' } },
                                          arguments: 
                                           [ { type: 'BinaryExpression',
                                               operator: '+',
                                               left: { type: 'Literal', value: '', raw: '""' },
                                               right: { type: 'Identifier', name: '_rep' } } ] } },
                                     { type: 'ExpressionStatement',
                                       expression: 
                                        { type: 'AssignmentExpression',
                                          operator: '+=',
                                          left: { type: 'Identifier', name: '_rep' },
                                          right: { type: 'Literal', value: 1, raw: '1' } } } ] },
                               rest: null,
                               generator: false,
                               expression: false },
                            index: 0 } ],
                       tainted: false,
                       stack: true,
                       scope: [Circular] },
                     { name: 'res',
                       identifiers: [ { type: 'Identifier', name: 'res' } ],
                       references: 
                        [ { identifier: { type: 'Identifier', name: 'res' },
                            from: [Circular],
                            tainted: false,
                            resolved: [Circular],
                            flag: 1,
                            __maybeImplicitGlobal: undefined } ],
                       defs: 
                        [ { type: 'Parameter',
                            name: { type: 'Identifier', name: 'res' },
                            node: 
                             { type: 'FunctionExpression',
                               id: { type: 'Identifier', name: 'replyA' },
                               params: 
                                [ { type: 'Identifier', name: 'req' },
                                  { type: 'Identifier', name: 'res' } ],
                               defaults: [],
                               body: 
                                { type: 'BlockStatement',
                                  body: 
                                   [ { type: 'ExpressionStatement',
                                       expression: 
                                        { type: 'CallExpression',
                                          callee: 
                                           { type: 'MemberExpression',
                                             computed: false,
                                             object: { type: 'Identifier', name: 'res' },
                                             property: { type: 'Identifier', name: 'send' } },
                                          arguments: 
                                           [ { type: 'BinaryExpression',
                                               operator: '+',
                                               left: { type: 'Literal', value: '', raw: '""' },
                                               right: { type: 'Identifier', name: '_rep' } } ] } },
                                     { type: 'ExpressionStatement',
                                       expression: 
                                        { type: 'AssignmentExpression',
                                          operator: '+=',
                                          left: { type: 'Identifier', name: '_rep' },
                                          right: { type: 'Literal', value: 1, raw: '1' } } } ] },
                               rest: null,
                               generator: false,
                               expression: false },
                            index: 1 } ],
                       tainted: false,
                       stack: true,
                       scope: [Circular] } ],
                  references: 
                   [ { identifier: { type: 'Identifier', name: 'res' },
                       from: [Circular],
                       tainted: false,
                       resolved: 
                        { name: 'res',
                          identifiers: [ { type: 'Identifier', name: 'res' } ],
                          references: [ [Circular] ],
                          defs: 
                           [ { type: 'Parameter',
                               name: { type: 'Identifier', name: 'res' },
                               node: 
                                { type: 'FunctionExpression',
                                  id: { type: 'Identifier', name: 'replyA' },
                                  params: 
                                   [ { type: 'Identifier', name: 'req' },
                                     { type: 'Identifier', name: 'res' } ],
                                  defaults: [],
                                  body: 
                                   { type: 'BlockStatement',
                                     body: 
                                      [ { type: 'ExpressionStatement',
                                          expression: 
                                           { type: 'CallExpression',
                                             callee: 
                                              { type: 'MemberExpression',
                                                computed: false,
                                                object: { type: 'Identifier', name: 'res' },
                                                property: { type: 'Identifier', name: 'send' } },
                                             arguments: 
                                              [ { type: 'BinaryExpression',
                                                  operator: '+',
                                                  left: { type: 'Literal', value: '', raw: '""' },
                                                  right: { type: 'Identifier', name: '_rep' } } ] } },
                                        { type: 'ExpressionStatement',
                                          expression: 
                                           { type: 'AssignmentExpression',
                                             operator: '+=',
                                             left: { type: 'Identifier', name: '_rep' },
                                             right: { type: 'Literal', value: 1, raw: '1' } } } ] },
                                  rest: null,
                                  generator: false,
                                  expression: false },
                               index: 1 } ],
                          tainted: false,
                          stack: true,
                          scope: [Circular] },
                       flag: 1,
                       __maybeImplicitGlobal: undefined },
                     { identifier: { type: 'Identifier', name: '_rep' },
                       from: [Circular],
                       tainted: false,
                       resolved: null,
                       flag: 1,
                       __maybeImplicitGlobal: undefined },
                     [Circular] ],
                  left: null,
                  variableScope: [Circular],
                  functionExpressionScope: false,
                  directCallToEvalScope: false,
                  thisFound: false,
                  upper: [Circular],
                  isStrict: false,
                  childScopes: [] },
               tainted: false,
               resolved: null,
               flag: 3,
               writeExpr: { type: 'Literal', value: 1, raw: '1' },
               __maybeImplicitGlobal: undefined },
             { identifier: { type: 'Identifier', name: 'app' },
               from: [Circular],
               tainted: false,
               resolved: null,
               flag: 1,
               __maybeImplicitGlobal: undefined },
             { identifier: { type: 'Identifier', name: '_rep' },
               from: 
                { type: 'function',
                  set: 
                   { __data: 
                      { '$arguments': 
                         { name: 'arguments',
                           identifiers: [],
                           references: [],
                           defs: [],
                           tainted: false,
                           stack: true,
                           scope: [Circular] },
                        '$req': 
                         { name: 'req',
                           identifiers: [ { type: 'Identifier', name: 'req' } ],
                           references: [],
                           defs: 
                            [ { type: 'Parameter',
                                name: { type: 'Identifier', name: 'req' },
                                node: 
                                 { type: 'FunctionExpression',
                                   id: { type: 'Identifier', name: 'replyB' },
                                   params: 
                                    [ { type: 'Identifier', name: 'req' },
                                      { type: 'Identifier', name: 'res' } ],
                                   defaults: [],
                                   body: 
                                    { type: 'BlockStatement',
                                      body: 
                                       [ { type: 'ExpressionStatement',
                                           expression: 
                                            { type: 'CallExpression',
                                              callee: 
                                               { type: 'MemberExpression',
                                                 computed: false,
                                                 object: { type: 'Identifier', name: 'res' },
                                                 property: { type: 'Identifier', name: 'send' } },
                                              arguments: 
                                               [ { type: 'BinaryExpression',
                                                   operator: '+',
                                                   left: { type: 'Literal', value: '', raw: '""' },
                                                   right: { type: 'Identifier', name: '_rep' } } ] } },
                                         { type: 'ExpressionStatement',
                                           expression: 
                                            { type: 'AssignmentExpression',
                                              operator: '+=',
                                              left: { type: 'Identifier', name: '_rep' },
                                              right: { type: 'Literal', value: 2, raw: '2' } } } ] },
                                   rest: null,
                                   generator: false,
                                   expression: false },
                                index: 0 } ],
                           tainted: false,
                           stack: true,
                           scope: [Circular] },
                        '$res': 
                         { name: 'res',
                           identifiers: [ { type: 'Identifier', name: 'res' } ],
                           references: 
                            [ { identifier: { type: 'Identifier', name: 'res' },
                                from: [Circular],
                                tainted: false,
                                resolved: [Circular],
                                flag: 1,
                                __maybeImplicitGlobal: undefined } ],
                           defs: 
                            [ { type: 'Parameter',
                                name: { type: 'Identifier', name: 'res' },
                                node: 
                                 { type: 'FunctionExpression',
                                   id: { type: 'Identifier', name: 'replyB' },
                                   params: 
                                    [ { type: 'Identifier', name: 'req' },
                                      { type: 'Identifier', name: 'res' } ],
                                   defaults: [],
                                   body: 
                                    { type: 'BlockStatement',
                                      body: 
                                       [ { type: 'ExpressionStatement',
                                           expression: 
                                            { type: 'CallExpression',
                                              callee: 
                                               { type: 'MemberExpression',
                                                 computed: false,
                                                 object: { type: 'Identifier', name: 'res' },
                                                 property: { type: 'Identifier', name: 'send' } },
                                              arguments: 
                                               [ { type: 'BinaryExpression',
                                                   operator: '+',
                                                   left: { type: 'Literal', value: '', raw: '""' },
                                                   right: { type: 'Identifier', name: '_rep' } } ] } },
                                         { type: 'ExpressionStatement',
                                           expression: 
                                            { type: 'AssignmentExpression',
                                              operator: '+=',
                                              left: { type: 'Identifier', name: '_rep' },
                                              right: { type: 'Literal', value: 2, raw: '2' } } } ] },
                                   rest: null,
                                   generator: false,
                                   expression: false },
                                index: 1 } ],
                           tainted: false,
                           stack: true,
                           scope: [Circular] } } },
                  taints: { __data: { '$arguments': true } },
                  dynamic: false,
                  block: 
                   { type: 'FunctionExpression',
                     id: { type: 'Identifier', name: 'replyB' },
                     params: 
                      [ { type: 'Identifier', name: 'req' },
                        { type: 'Identifier', name: 'res' } ],
                     defaults: [],
                     body: 
                      { type: 'BlockStatement',
                        body: 
                         [ { type: 'ExpressionStatement',
                             expression: 
                              { type: 'CallExpression',
                                callee: 
                                 { type: 'MemberExpression',
                                   computed: false,
                                   object: { type: 'Identifier', name: 'res' },
                                   property: { type: 'Identifier', name: 'send' } },
                                arguments: 
                                 [ { type: 'BinaryExpression',
                                     operator: '+',
                                     left: { type: 'Literal', value: '', raw: '""' },
                                     right: { type: 'Identifier', name: '_rep' } } ] } },
                           { type: 'ExpressionStatement',
                             expression: 
                              { type: 'AssignmentExpression',
                                operator: '+=',
                                left: { type: 'Identifier', name: '_rep' },
                                right: { type: 'Literal', value: 2, raw: '2' } } } ] },
                     rest: null,
                     generator: false,
                     expression: false },
                  through: 
                   [ [Circular],
                     { identifier: { type: 'Identifier', name: '_rep' },
                       from: [Circular],
                       tainted: false,
                       resolved: null,
                       flag: 3,
                       writeExpr: { type: 'Literal', value: 2, raw: '2' },
                       __maybeImplicitGlobal: undefined } ],
                  variables: 
                   [ { name: 'arguments',
                       identifiers: [],
                       references: [],
                       defs: [],
                       tainted: false,
                       stack: true,
                       scope: [Circular] },
                     { name: 'req',
                       identifiers: [ { type: 'Identifier', name: 'req' } ],
                       references: [],
                       defs: 
                        [ { type: 'Parameter',
                            name: { type: 'Identifier', name: 'req' },
                            node: 
                             { type: 'FunctionExpression',
                               id: { type: 'Identifier', name: 'replyB' },
                               params: 
                                [ { type: 'Identifier', name: 'req' },
                                  { type: 'Identifier', name: 'res' } ],
                               defaults: [],
                               body: 
                                { type: 'BlockStatement',
                                  body: 
                                   [ { type: 'ExpressionStatement',
                                       expression: 
                                        { type: 'CallExpression',
                                          callee: 
                                           { type: 'MemberExpression',
                                             computed: false,
                                             object: { type: 'Identifier', name: 'res' },
                                             property: { type: 'Identifier', name: 'send' } },
                                          arguments: 
                                           [ { type: 'BinaryExpression',
                                               operator: '+',
                                               left: { type: 'Literal', value: '', raw: '""' },
                                               right: { type: 'Identifier', name: '_rep' } } ] } },
                                     { type: 'ExpressionStatement',
                                       expression: 
                                        { type: 'AssignmentExpression',
                                          operator: '+=',
                                          left: { type: 'Identifier', name: '_rep' },
                                          right: { type: 'Literal', value: 2, raw: '2' } } } ] },
                               rest: null,
                               generator: false,
                               expression: false },
                            index: 0 } ],
                       tainted: false,
                       stack: true,
                       scope: [Circular] },
                     { name: 'res',
                       identifiers: [ { type: 'Identifier', name: 'res' } ],
                       references: 
                        [ { identifier: { type: 'Identifier', name: 'res' },
                            from: [Circular],
                            tainted: false,
                            resolved: [Circular],
                            flag: 1,
                            __maybeImplicitGlobal: undefined } ],
                       defs: 
                        [ { type: 'Parameter',
                            name: { type: 'Identifier', name: 'res' },
                            node: 
                             { type: 'FunctionExpression',
                               id: { type: 'Identifier', name: 'replyB' },
                               params: 
                                [ { type: 'Identifier', name: 'req' },
                                  { type: 'Identifier', name: 'res' } ],
                               defaults: [],
                               body: 
                                { type: 'BlockStatement',
                                  body: 
                                   [ { type: 'ExpressionStatement',
                                       expression: 
                                        { type: 'CallExpression',
                                          callee: 
                                           { type: 'MemberExpression',
                                             computed: false,
                                             object: { type: 'Identifier', name: 'res' },
                                             property: { type: 'Identifier', name: 'send' } },
                                          arguments: 
                                           [ { type: 'BinaryExpression',
                                               operator: '+',
                                               left: { type: 'Literal', value: '', raw: '""' },
                                               right: { type: 'Identifier', name: '_rep' } } ] } },
                                     { type: 'ExpressionStatement',
                                       expression: 
                                        { type: 'AssignmentExpression',
                                          operator: '+=',
                                          left: { type: 'Identifier', name: '_rep' },
                                          right: { type: 'Literal', value: 2, raw: '2' } } } ] },
                               rest: null,
                               generator: false,
                               expression: false },
                            index: 1 } ],
                       tainted: false,
                       stack: true,
                       scope: [Circular] } ],
                  references: 
                   [ { identifier: { type: 'Identifier', name: 'res' },
                       from: [Circular],
                       tainted: false,
                       resolved: 
                        { name: 'res',
                          identifiers: [ { type: 'Identifier', name: 'res' } ],
                          references: [ [Circular] ],
                          defs: 
                           [ { type: 'Parameter',
                               name: { type: 'Identifier', name: 'res' },
                               node: 
                                { type: 'FunctionExpression',
                                  id: { type: 'Identifier', name: 'replyB' },
                                  params: 
                                   [ { type: 'Identifier', name: 'req' },
                                     { type: 'Identifier', name: 'res' } ],
                                  defaults: [],
                                  body: 
                                   { type: 'BlockStatement',
                                     body: 
                                      [ { type: 'ExpressionStatement',
                                          expression: 
                                           { type: 'CallExpression',
                                             callee: 
                                              { type: 'MemberExpression',
                                                computed: false,
                                                object: { type: 'Identifier', name: 'res' },
                                                property: { type: 'Identifier', name: 'send' } },
                                             arguments: 
                                              [ { type: 'BinaryExpression',
                                                  operator: '+',
                                                  left: { type: 'Literal', value: '', raw: '""' },
                                                  right: { type: 'Identifier', name: '_rep' } } ] } },
                                        { type: 'ExpressionStatement',
                                          expression: 
                                           { type: 'AssignmentExpression',
                                             operator: '+=',
                                             left: { type: 'Identifier', name: '_rep' },
                                             right: { type: 'Literal', value: 2, raw: '2' } } } ] },
                                  rest: null,
                                  generator: false,
                                  expression: false },
                               index: 1 } ],
                          tainted: false,
                          stack: true,
                          scope: [Circular] },
                       flag: 1,
                       __maybeImplicitGlobal: undefined },
                     [Circular],
                     { identifier: { type: 'Identifier', name: '_rep' },
                       from: [Circular],
                       tainted: false,
                       resolved: null,
                       flag: 3,
                       writeExpr: { type: 'Literal', value: 2, raw: '2' },
                       __maybeImplicitGlobal: undefined } ],
                  left: null,
                  variableScope: [Circular],
                  functionExpressionScope: false,
                  directCallToEvalScope: false,
                  thisFound: false,
                  upper: 
                   { type: 'function',
                     set: 
                      { __data: 
                         { '$replyB': 
                            { name: 'replyB',
                              identifiers: [ { type: 'Identifier', name: 'replyB' } ],
                              references: [],
                              defs: 
                               [ { type: 'FunctionName',
                                   name: { type: 'Identifier', name: 'replyB' },
                                   node: 
                                    { type: 'FunctionExpression',
                                      id: { type: 'Identifier', name: 'replyB' },
                                      params: 
                                       [ { type: 'Identifier', name: 'req' },
                                         { type: 'Identifier', name: 'res' } ],
                                      defaults: [],
                                      body: 
                                       { type: 'BlockStatement',
                                         body: 
                                          [ { type: 'ExpressionStatement',
                                              expression: 
                                               { type: 'CallExpression',
                                                 callee: 
                                                  { type: 'MemberExpression',
                                                    computed: false,
                                                    object: { type: 'Identifier', name: 'res' },
                                                    property: { type: 'Identifier', name: 'send' } },
                                                 arguments: 
                                                  [ { type: 'BinaryExpression',
                                                      operator: '+',
                                                      left: { type: 'Literal', value: '', raw: '""' },
                                                      right: { type: 'Identifier', name: '_rep' } } ] } },
                                            { type: 'ExpressionStatement',
                                              expression: 
                                               { type: 'AssignmentExpression',
                                                 operator: '+=',
                                                 left: { type: 'Identifier', name: '_rep' },
                                                 right: { type: 'Literal', value: 2, raw: '2' } } } ] },
                                      rest: null,
                                      generator: false,
                                      expression: false } } ],
                              tainted: false,
                              stack: true,
                              scope: [Circular] } } },
                     taints: { __data: {} },
                     dynamic: false,
                     block: 
                      { type: 'FunctionExpression',
                        id: { type: 'Identifier', name: 'replyB' },
                        params: 
                         [ { type: 'Identifier', name: 'req' },
                           { type: 'Identifier', name: 'res' } ],
                        defaults: [],
                        body: 
                         { type: 'BlockStatement',
                           body: 
                            [ { type: 'ExpressionStatement',
                                expression: 
                                 { type: 'CallExpression',
                                   callee: 
                                    { type: 'MemberExpression',
                                      computed: false,
                                      object: { type: 'Identifier', name: 'res' },
                                      property: { type: 'Identifier', name: 'send' } },
                                   arguments: 
                                    [ { type: 'BinaryExpression',
                                        operator: '+',
                                        left: { type: 'Literal', value: '', raw: '""' },
                                        right: { type: 'Identifier', name: '_rep' } } ] } },
                              { type: 'ExpressionStatement',
                                expression: 
                                 { type: 'AssignmentExpression',
                                   operator: '+=',
                                   left: { type: 'Identifier', name: '_rep' },
                                   right: { type: 'Literal', value: 2, raw: '2' } } } ] },
                        rest: null,
                        generator: false,
                        expression: false },
                     through: 
                      [ [Circular],
                        { identifier: { type: 'Identifier', name: '_rep' },
                          from: [Circular],
                          tainted: false,
                          resolved: null,
                          flag: 3,
                          writeExpr: { type: 'Literal', value: 2, raw: '2' },
                          __maybeImplicitGlobal: undefined } ],
                     variables: 
                      [ { name: 'replyB',
                          identifiers: [ { type: 'Identifier', name: 'replyB' } ],
                          references: [],
                          defs: 
                           [ { type: 'FunctionName',
                               name: { type: 'Identifier', name: 'replyB' },
                               node: 
                                { type: 'FunctionExpression',
                                  id: { type: 'Identifier', name: 'replyB' },
                                  params: 
                                   [ { type: 'Identifier', name: 'req' },
                                     { type: 'Identifier', name: 'res' } ],
                                  defaults: [],
                                  body: 
                                   { type: 'BlockStatement',
                                     body: 
                                      [ { type: 'ExpressionStatement',
                                          expression: 
                                           { type: 'CallExpression',
                                             callee: 
                                              { type: 'MemberExpression',
                                                computed: false,
                                                object: { type: 'Identifier', name: 'res' },
                                                property: { type: 'Identifier', name: 'send' } },
                                             arguments: 
                                              [ { type: 'BinaryExpression',
                                                  operator: '+',
                                                  left: { type: 'Literal', value: '', raw: '""' },
                                                  right: { type: 'Identifier', name: '_rep' } } ] } },
                                        { type: 'ExpressionStatement',
                                          expression: 
                                           { type: 'AssignmentExpression',
                                             operator: '+=',
                                             left: { type: 'Identifier', name: '_rep' },
                                             right: { type: 'Literal', value: 2, raw: '2' } } } ] },
                                  rest: null,
                                  generator: false,
                                  expression: false } } ],
                          tainted: false,
                          stack: true,
                          scope: [Circular] } ],
                     references: [],
                     left: null,
                     variableScope: [Circular],
                     functionExpressionScope: true,
                     directCallToEvalScope: false,
                     thisFound: false,
                     upper: [Circular],
                     isStrict: false,
                     childScopes: [ [Circular] ] },
                  isStrict: false,
                  childScopes: [] },
               tainted: false,
               resolved: null,
               flag: 1,
               __maybeImplicitGlobal: undefined },
             { identifier: { type: 'Identifier', name: '_rep' },
               from: 
                { type: 'function',
                  set: 
                   { __data: 
                      { '$arguments': 
                         { name: 'arguments',
                           identifiers: [],
                           references: [],
                           defs: [],
                           tainted: false,
                           stack: true,
                           scope: [Circular] },
                        '$req': 
                         { name: 'req',
                           identifiers: [ { type: 'Identifier', name: 'req' } ],
                           references: [],
                           defs: 
                            [ { type: 'Parameter',
                                name: { type: 'Identifier', name: 'req' },
                                node: 
                                 { type: 'FunctionExpression',
                                   id: { type: 'Identifier', name: 'replyB' },
                                   params: 
                                    [ { type: 'Identifier', name: 'req' },
                                      { type: 'Identifier', name: 'res' } ],
                                   defaults: [],
                                   body: 
                                    { type: 'BlockStatement',
                                      body: 
                                       [ { type: 'ExpressionStatement',
                                           expression: 
                                            { type: 'CallExpression',
                                              callee: 
                                               { type: 'MemberExpression',
                                                 computed: false,
                                                 object: { type: 'Identifier', name: 'res' },
                                                 property: { type: 'Identifier', name: 'send' } },
                                              arguments: 
                                               [ { type: 'BinaryExpression',
                                                   operator: '+',
                                                   left: { type: 'Literal', value: '', raw: '""' },
                                                   right: { type: 'Identifier', name: '_rep' } } ] } },
                                         { type: 'ExpressionStatement',
                                           expression: 
                                            { type: 'AssignmentExpression',
                                              operator: '+=',
                                              left: { type: 'Identifier', name: '_rep' },
                                              right: { type: 'Literal', value: 2, raw: '2' } } } ] },
                                   rest: null,
                                   generator: false,
                                   expression: false },
                                index: 0 } ],
                           tainted: false,
                           stack: true,
                           scope: [Circular] },
                        '$res': 
                         { name: 'res',
                           identifiers: [ { type: 'Identifier', name: 'res' } ],
                           references: 
                            [ { identifier: { type: 'Identifier', name: 'res' },
                                from: [Circular],
                                tainted: false,
                                resolved: [Circular],
                                flag: 1,
                                __maybeImplicitGlobal: undefined } ],
                           defs: 
                            [ { type: 'Parameter',
                                name: { type: 'Identifier', name: 'res' },
                                node: 
                                 { type: 'FunctionExpression',
                                   id: { type: 'Identifier', name: 'replyB' },
                                   params: 
                                    [ { type: 'Identifier', name: 'req' },
                                      { type: 'Identifier', name: 'res' } ],
                                   defaults: [],
                                   body: 
                                    { type: 'BlockStatement',
                                      body: 
                                       [ { type: 'ExpressionStatement',
                                           expression: 
                                            { type: 'CallExpression',
                                              callee: 
                                               { type: 'MemberExpression',
                                                 computed: false,
                                                 object: { type: 'Identifier', name: 'res' },
                                                 property: { type: 'Identifier', name: 'send' } },
                                              arguments: 
                                               [ { type: 'BinaryExpression',
                                                   operator: '+',
                                                   left: { type: 'Literal', value: '', raw: '""' },
                                                   right: { type: 'Identifier', name: '_rep' } } ] } },
                                         { type: 'ExpressionStatement',
                                           expression: 
                                            { type: 'AssignmentExpression',
                                              operator: '+=',
                                              left: { type: 'Identifier', name: '_rep' },
                                              right: { type: 'Literal', value: 2, raw: '2' } } } ] },
                                   rest: null,
                                   generator: false,
                                   expression: false },
                                index: 1 } ],
                           tainted: false,
                           stack: true,
                           scope: [Circular] } } },
                  taints: { __data: { '$arguments': true } },
                  dynamic: false,
                  block: 
                   { type: 'FunctionExpression',
                     id: { type: 'Identifier', name: 'replyB' },
                     params: 
                      [ { type: 'Identifier', name: 'req' },
                        { type: 'Identifier', name: 'res' } ],
                     defaults: [],
                     body: 
                      { type: 'BlockStatement',
                        body: 
                         [ { type: 'ExpressionStatement',
                             expression: 
                              { type: 'CallExpression',
                                callee: 
                                 { type: 'MemberExpression',
                                   computed: false,
                                   object: { type: 'Identifier', name: 'res' },
                                   property: { type: 'Identifier', name: 'send' } },
                                arguments: 
                                 [ { type: 'BinaryExpression',
                                     operator: '+',
                                     left: { type: 'Literal', value: '', raw: '""' },
                                     right: { type: 'Identifier', name: '_rep' } } ] } },
                           { type: 'ExpressionStatement',
                             expression: 
                              { type: 'AssignmentExpression',
                                operator: '+=',
                                left: { type: 'Identifier', name: '_rep' },
                                right: { type: 'Literal', value: 2, raw: '2' } } } ] },
                     rest: null,
                     generator: false,
                     expression: false },
                  through: 
                   [ { identifier: { type: 'Identifier', name: '_rep' },
                       from: [Circular],
                       tainted: false,
                       resolved: null,
                       flag: 1,
                       __maybeImplicitGlobal: undefined },
                     [Circular] ],
                  variables: 
                   [ { name: 'arguments',
                       identifiers: [],
                       references: [],
                       defs: [],
                       tainted: false,
                       stack: true,
                       scope: [Circular] },
                     { name: 'req',
                       identifiers: [ { type: 'Identifier', name: 'req' } ],
                       references: [],
                       defs: 
                        [ { type: 'Parameter',
                            name: { type: 'Identifier', name: 'req' },
                            node: 
                             { type: 'FunctionExpression',
                               id: { type: 'Identifier', name: 'replyB' },
                               params: 
                                [ { type: 'Identifier', name: 'req' },
                                  { type: 'Identifier', name: 'res' } ],
                               defaults: [],
                               body: 
                                { type: 'BlockStatement',
                                  body: 
                                   [ { type: 'ExpressionStatement',
                                       expression: 
                                        { type: 'CallExpression',
                                          callee: 
                                           { type: 'MemberExpression',
                                             computed: false,
                                             object: { type: 'Identifier', name: 'res' },
                                             property: { type: 'Identifier', name: 'send' } },
                                          arguments: 
                                           [ { type: 'BinaryExpression',
                                               operator: '+',
                                               left: { type: 'Literal', value: '', raw: '""' },
                                               right: { type: 'Identifier', name: '_rep' } } ] } },
                                     { type: 'ExpressionStatement',
                                       expression: 
                                        { type: 'AssignmentExpression',
                                          operator: '+=',
                                          left: { type: 'Identifier', name: '_rep' },
                                          right: { type: 'Literal', value: 2, raw: '2' } } } ] },
                               rest: null,
                               generator: false,
                               expression: false },
                            index: 0 } ],
                       tainted: false,
                       stack: true,
                       scope: [Circular] },
                     { name: 'res',
                       identifiers: [ { type: 'Identifier', name: 'res' } ],
                       references: 
                        [ { identifier: { type: 'Identifier', name: 'res' },
                            from: [Circular],
                            tainted: false,
                            resolved: [Circular],
                            flag: 1,
                            __maybeImplicitGlobal: undefined } ],
                       defs: 
                        [ { type: 'Parameter',
                            name: { type: 'Identifier', name: 'res' },
                            node: 
                             { type: 'FunctionExpression',
                               id: { type: 'Identifier', name: 'replyB' },
                               params: 
                                [ { type: 'Identifier', name: 'req' },
                                  { type: 'Identifier', name: 'res' } ],
                               defaults: [],
                               body: 
                                { type: 'BlockStatement',
                                  body: 
                                   [ { type: 'ExpressionStatement',
                                       expression: 
                                        { type: 'CallExpression',
                                          callee: 
                                           { type: 'MemberExpression',
                                             computed: false,
                                             object: { type: 'Identifier', name: 'res' },
                                             property: { type: 'Identifier', name: 'send' } },
                                          arguments: 
                                           [ { type: 'BinaryExpression',
                                               operator: '+',
                                               left: { type: 'Literal', value: '', raw: '""' },
                                               right: { type: 'Identifier', name: '_rep' } } ] } },
                                     { type: 'ExpressionStatement',
                                       expression: 
                                        { type: 'AssignmentExpression',
                                          operator: '+=',
                                          left: { type: 'Identifier', name: '_rep' },
                                          right: { type: 'Literal', value: 2, raw: '2' } } } ] },
                               rest: null,
                               generator: false,
                               expression: false },
                            index: 1 } ],
                       tainted: false,
                       stack: true,
                       scope: [Circular] } ],
                  references: 
                   [ { identifier: { type: 'Identifier', name: 'res' },
                       from: [Circular],
                       tainted: false,
                       resolved: 
                        { name: 'res',
                          identifiers: [ { type: 'Identifier', name: 'res' } ],
                          references: [ [Circular] ],
                          defs: 
                           [ { type: 'Parameter',
                               name: { type: 'Identifier', name: 'res' },
                               node: 
                                { type: 'FunctionExpression',
                                  id: { type: 'Identifier', name: 'replyB' },
                                  params: 
                                   [ { type: 'Identifier', name: 'req' },
                                     { type: 'Identifier', name: 'res' } ],
                                  defaults: [],
                                  body: 
                                   { type: 'BlockStatement',
                                     body: 
                                      [ { type: 'ExpressionStatement',
                                          expression: 
                                           { type: 'CallExpression',
                                             callee: 
                                              { type: 'MemberExpression',
                                                computed: false,
                                                object: { type: 'Identifier', name: 'res' },
                                                property: { type: 'Identifier', name: 'send' } },
                                             arguments: 
                                              [ { type: 'BinaryExpression',
                                                  operator: '+',
                                                  left: { type: 'Literal', value: '', raw: '""' },
                                                  right: { type: 'Identifier', name: '_rep' } } ] } },
                                        { type: 'ExpressionStatement',
                                          expression: 
                                           { type: 'AssignmentExpression',
                                             operator: '+=',
                                             left: { type: 'Identifier', name: '_rep' },
                                             right: { type: 'Literal', value: 2, raw: '2' } } } ] },
                                  rest: null,
                                  generator: false,
                                  expression: false },
                               index: 1 } ],
                          tainted: false,
                          stack: true,
                          scope: [Circular] },
                       flag: 1,
                       __maybeImplicitGlobal: undefined },
                     { identifier: { type: 'Identifier', name: '_rep' },
                       from: [Circular],
                       tainted: false,
                       resolved: null,
                       flag: 1,
                       __maybeImplicitGlobal: undefined },
                     [Circular] ],
                  left: null,
                  variableScope: [Circular],
                  functionExpressionScope: false,
                  directCallToEvalScope: false,
                  thisFound: false,
                  upper: 
                   { type: 'function',
                     set: 
                      { __data: 
                         { '$replyB': 
                            { name: 'replyB',
                              identifiers: [ { type: 'Identifier', name: 'replyB' } ],
                              references: [],
                              defs: 
                               [ { type: 'FunctionName',
                                   name: { type: 'Identifier', name: 'replyB' },
                                   node: 
                                    { type: 'FunctionExpression',
                                      id: { type: 'Identifier', name: 'replyB' },
                                      params: 
                                       [ { type: 'Identifier', name: 'req' },
                                         { type: 'Identifier', name: 'res' } ],
                                      defaults: [],
                                      body: 
                                       { type: 'BlockStatement',
                                         body: 
                                          [ { type: 'ExpressionStatement',
                                              expression: 
                                               { type: 'CallExpression',
                                                 callee: 
                                                  { type: 'MemberExpression',
                                                    computed: false,
                                                    object: { type: 'Identifier', name: 'res' },
                                                    property: { type: 'Identifier', name: 'send' } },
                                                 arguments: 
                                                  [ { type: 'BinaryExpression',
                                                      operator: '+',
                                                      left: { type: 'Literal', value: '', raw: '""' },
                                                      right: { type: 'Identifier', name: '_rep' } } ] } },
                                            { type: 'ExpressionStatement',
                                              expression: 
                                               { type: 'AssignmentExpression',
                                                 operator: '+=',
                                                 left: { type: 'Identifier', name: '_rep' },
                                                 right: { type: 'Literal', value: 2, raw: '2' } } } ] },
                                      rest: null,
                                      generator: false,
                                      expression: false } } ],
                              tainted: false,
                              stack: true,
                              scope: [Circular] } } },
                     taints: { __data: {} },
                     dynamic: false,
                     block: 
                      { type: 'FunctionExpression',
                        id: { type: 'Identifier', name: 'replyB' },
                        params: 
                         [ { type: 'Identifier', name: 'req' },
                           { type: 'Identifier', name: 'res' } ],
                        defaults: [],
                        body: 
                         { type: 'BlockStatement',
                           body: 
                            [ { type: 'ExpressionStatement',
                                expression: 
                                 { type: 'CallExpression',
                                   callee: 
                                    { type: 'MemberExpression',
                                      computed: false,
                                      object: { type: 'Identifier', name: 'res' },
                                      property: { type: 'Identifier', name: 'send' } },
                                   arguments: 
                                    [ { type: 'BinaryExpression',
                                        operator: '+',
                                        left: { type: 'Literal', value: '', raw: '""' },
                                        right: { type: 'Identifier', name: '_rep' } } ] } },
                              { type: 'ExpressionStatement',
                                expression: 
                                 { type: 'AssignmentExpression',
                                   operator: '+=',
                                   left: { type: 'Identifier', name: '_rep' },
                                   right: { type: 'Literal', value: 2, raw: '2' } } } ] },
                        rest: null,
                        generator: false,
                        expression: false },
                     through: 
                      [ { identifier: { type: 'Identifier', name: '_rep' },
                          from: [Circular],
                          tainted: false,
                          resolved: null,
                          flag: 1,
                          __maybeImplicitGlobal: undefined },
                        [Circular] ],
                     variables: 
                      [ { name: 'replyB',
                          identifiers: [ { type: 'Identifier', name: 'replyB' } ],
                          references: [],
                          defs: 
                           [ { type: 'FunctionName',
                               name: { type: 'Identifier', name: 'replyB' },
                               node: 
                                { type: 'FunctionExpression',
                                  id: { type: 'Identifier', name: 'replyB' },
                                  params: 
                                   [ { type: 'Identifier', name: 'req' },
                                     { type: 'Identifier', name: 'res' } ],
                                  defaults: [],
                                  body: 
                                   { type: 'BlockStatement',
                                     body: 
                                      [ { type: 'ExpressionStatement',
                                          expression: 
                                           { type: 'CallExpression',
                                             callee: 
                                              { type: 'MemberExpression',
                                                computed: false,
                                                object: { type: 'Identifier', name: 'res' },
                                                property: { type: 'Identifier', name: 'send' } },
                                             arguments: 
                                              [ { type: 'BinaryExpression',
                                                  operator: '+',
                                                  left: { type: 'Literal', value: '', raw: '""' },
                                                  right: { type: 'Identifier', name: '_rep' } } ] } },
                                        { type: 'ExpressionStatement',
                                          expression: 
                                           { type: 'AssignmentExpression',
                                             operator: '+=',
                                             left: { type: 'Identifier', name: '_rep' },
                                             right: { type: 'Literal', value: 2, raw: '2' } } } ] },
                                  rest: null,
                                  generator: false,
                                  expression: false } } ],
                          tainted: false,
                          stack: true,
                          scope: [Circular] } ],
                     references: [],
                     left: null,
                     variableScope: [Circular],
                     functionExpressionScope: true,
                     directCallToEvalScope: false,
                     thisFound: false,
                     upper: [Circular],
                     isStrict: false,
                     childScopes: [ [Circular] ] },
                  isStrict: false,
                  childScopes: [] },
               tainted: false,
               resolved: null,
               flag: 3,
               writeExpr: { type: 'Literal', value: 2, raw: '2' },
               __maybeImplicitGlobal: undefined },
             { identifier: { type: 'Identifier', name: 'module' },
               from: [Circular],
               tainted: false,
               resolved: null,
               flag: 1,
               __maybeImplicitGlobal: undefined },
             { identifier: { type: 'Identifier', name: 'app' },
               from: [Circular],
               tainted: false,
               resolved: null,
               flag: 1,
               __maybeImplicitGlobal: undefined },
             { identifier: { type: 'Identifier', name: 'console' },
               from: [Circular],
               tainted: false,
               resolved: null,
               flag: 1,
               __maybeImplicitGlobal: undefined },
             { identifier: { type: 'Identifier', name: 'app' },
               from: [Circular],
               tainted: false,
               resolved: null,
               flag: 1,
               __maybeImplicitGlobal: undefined },
             { identifier: { type: 'Identifier', name: 'exports' },
               from: [Circular],
               tainted: false,
               resolved: null,
               flag: 1,
               __maybeImplicitGlobal: undefined } ],
          variables: 
           [ { name: 'app',
               identifiers: [ { type: 'Identifier', name: 'app' } ],
               references: [],
               defs: 
                [ { type: 'Variable',
                    name: { type: 'Identifier', name: 'app' },
                    node: 
                     { type: 'VariableDeclarator',
                       id: { type: 'Identifier', name: 'app' },
                       init: 
                        { type: 'CallExpression',
                          callee: 
                           { type: 'CallExpression',
                             callee: { type: 'Identifier', name: 'require' },
                             arguments: [ { type: 'Literal', value: 'express', raw: '\'express\'' } ] },
                          arguments: [] } },
                    index: 0,
                    parent: 
                     { type: 'VariableDeclaration',
                       declarations: 
                        [ { type: 'VariableDeclarator',
                            id: { type: 'Identifier', name: 'app' },
                            init: 
                             { type: 'CallExpression',
                               callee: 
                                { type: 'CallExpression',
                                  callee: { type: 'Identifier', name: 'require' },
                                  arguments: [ { type: 'Literal', value: 'express', raw: '\'express\'' } ] },
                               arguments: [] } } ],
                       kind: 'var' } } ],
               tainted: false,
               stack: true,
               scope: [Circular] },
             { name: '_rep',
               identifiers: [ { type: 'Identifier', name: '_rep' } ],
               references: [],
               defs: 
                [ { type: 'Variable',
                    name: { type: 'Identifier', name: '_rep' },
                    node: 
                     { type: 'VariableDeclarator',
                       id: { type: 'Identifier', name: '_rep' },
                       init: { type: 'Literal', value: 42, raw: '42' } },
                    index: 0,
                    parent: 
                     { type: 'VariableDeclaration',
                       declarations: 
                        [ { type: 'VariableDeclarator',
                            id: { type: 'Identifier', name: '_rep' },
                            init: { type: 'Literal', value: 42, raw: '42' } } ],
                       kind: 'var' } } ],
               tainted: false,
               stack: true,
               scope: [Circular] } ],
          references: 
           [ { identifier: { type: 'Identifier', name: 'app' },
               from: [Circular],
               tainted: false,
               resolved: null,
               flag: 2,
               writeExpr: 
                { type: 'CallExpression',
                  callee: 
                   { type: 'CallExpression',
                     callee: { type: 'Identifier', name: 'require' },
                     arguments: [ { type: 'Literal', value: 'express', raw: '\'express\'' } ] },
                  arguments: [] },
               __maybeImplicitGlobal: false },
             { identifier: { type: 'Identifier', name: 'require' },
               from: [Circular],
               tainted: false,
               resolved: null,
               flag: 1,
               __maybeImplicitGlobal: undefined },
             { identifier: { type: 'Identifier', name: '_rep' },
               from: [Circular],
               tainted: false,
               resolved: null,
               flag: 2,
               writeExpr: { type: 'Literal', value: 42, raw: '42' },
               __maybeImplicitGlobal: false },
             { identifier: { type: 'Identifier', name: 'app' },
               from: [Circular],
               tainted: false,
               resolved: null,
               flag: 1,
               __maybeImplicitGlobal: undefined },
             { identifier: { type: 'Identifier', name: 'app' },
               from: [Circular],
               tainted: false,
               resolved: null,
               flag: 1,
               __maybeImplicitGlobal: undefined },
             { identifier: { type: 'Identifier', name: 'module' },
               from: [Circular],
               tainted: false,
               resolved: null,
               flag: 1,
               __maybeImplicitGlobal: undefined },
             { identifier: { type: 'Identifier', name: 'app' },
               from: [Circular],
               tainted: false,
               resolved: null,
               flag: 1,
               __maybeImplicitGlobal: undefined },
             { identifier: { type: 'Identifier', name: 'console' },
               from: [Circular],
               tainted: false,
               resolved: null,
               flag: 1,
               __maybeImplicitGlobal: undefined },
             { identifier: { type: 'Identifier', name: 'app' },
               from: [Circular],
               tainted: false,
               resolved: null,
               flag: 1,
               __maybeImplicitGlobal: undefined },
             { identifier: { type: 'Identifier', name: 'exports' },
               from: [Circular],
               tainted: false,
               resolved: null,
               flag: 1,
               __maybeImplicitGlobal: undefined } ],
          left: null,
          variableScope: [Circular],
          functionExpressionScope: false,
          directCallToEvalScope: false,
          thisFound: false,
          upper: null,
          isStrict: false,
          childScopes: 
           [ [Circular],
             { type: 'function',
               set: 
                { __data: 
                   { '$replyB': 
                      { name: 'replyB',
                        identifiers: [ { type: 'Identifier', name: 'replyB' } ],
                        references: [],
                        defs: 
                         [ { type: 'FunctionName',
                             name: { type: 'Identifier', name: 'replyB' },
                             node: 
                              { type: 'FunctionExpression',
                                id: { type: 'Identifier', name: 'replyB' },
                                params: 
                                 [ { type: 'Identifier', name: 'req' },
                                   { type: 'Identifier', name: 'res' } ],
                                defaults: [],
                                body: 
                                 { type: 'BlockStatement',
                                   body: 
                                    [ { type: 'ExpressionStatement',
                                        expression: 
                                         { type: 'CallExpression',
                                           callee: 
                                            { type: 'MemberExpression',
                                              computed: false,
                                              object: { type: 'Identifier', name: 'res' },
                                              property: { type: 'Identifier', name: 'send' } },
                                           arguments: 
                                            [ { type: 'BinaryExpression',
                                                operator: '+',
                                                left: { type: 'Literal', value: '', raw: '""' },
                                                right: { type: 'Identifier', name: '_rep' } } ] } },
                                      { type: 'ExpressionStatement',
                                        expression: 
                                         { type: 'AssignmentExpression',
                                           operator: '+=',
                                           left: { type: 'Identifier', name: '_rep' },
                                           right: { type: 'Literal', value: 2, raw: '2' } } } ] },
                                rest: null,
                                generator: false,
                                expression: false } } ],
                        tainted: false,
                        stack: true,
                        scope: [Circular] } } },
               taints: { __data: {} },
               dynamic: false,
               block: 
                { type: 'FunctionExpression',
                  id: { type: 'Identifier', name: 'replyB' },
                  params: 
                   [ { type: 'Identifier', name: 'req' },
                     { type: 'Identifier', name: 'res' } ],
                  defaults: [],
                  body: 
                   { type: 'BlockStatement',
                     body: 
                      [ { type: 'ExpressionStatement',
                          expression: 
                           { type: 'CallExpression',
                             callee: 
                              { type: 'MemberExpression',
                                computed: false,
                                object: { type: 'Identifier', name: 'res' },
                                property: { type: 'Identifier', name: 'send' } },
                             arguments: 
                              [ { type: 'BinaryExpression',
                                  operator: '+',
                                  left: { type: 'Literal', value: '', raw: '""' },
                                  right: { type: 'Identifier', name: '_rep' } } ] } },
                        { type: 'ExpressionStatement',
                          expression: 
                           { type: 'AssignmentExpression',
                             operator: '+=',
                             left: { type: 'Identifier', name: '_rep' },
                             right: { type: 'Literal', value: 2, raw: '2' } } } ] },
                  rest: null,
                  generator: false,
                  expression: false },
               through: 
                [ { identifier: { type: 'Identifier', name: '_rep' },
                    from: 
                     { type: 'function',
                       set: 
                        { __data: 
                           { '$arguments': 
                              { name: 'arguments',
                                identifiers: [],
                                references: [],
                                defs: [],
                                tainted: false,
                                stack: true,
                                scope: [Circular] },
                             '$req': 
                              { name: 'req',
                                identifiers: [ { type: 'Identifier', name: 'req' } ],
                                references: [],
                                defs: 
                                 [ { type: 'Parameter',
                                     name: { type: 'Identifier', name: 'req' },
                                     node: 
                                      { type: 'FunctionExpression',
                                        id: { type: 'Identifier', name: 'replyB' },
                                        params: 
                                         [ { type: 'Identifier', name: 'req' },
                                           { type: 'Identifier', name: 'res' } ],
                                        defaults: [],
                                        body: 
                                         { type: 'BlockStatement',
                                           body: 
                                            [ { type: 'ExpressionStatement',
                                                expression: 
                                                 { type: 'CallExpression',
                                                   callee: 
                                                    { type: 'MemberExpression',
                                                      computed: false,
                                                      object: { type: 'Identifier', name: 'res' },
                                                      property: { type: 'Identifier', name: 'send' } },
                                                   arguments: 
                                                    [ { type: 'BinaryExpression',
                                                        operator: '+',
                                                        left: { type: 'Literal', value: '', raw: '""' },
                                                        right: { type: 'Identifier', name: '_rep' } } ] } },
                                              { type: 'ExpressionStatement',
                                                expression: 
                                                 { type: 'AssignmentExpression',
                                                   operator: '+=',
                                                   left: { type: 'Identifier', name: '_rep' },
                                                   right: { type: 'Literal', value: 2, raw: '2' } } } ] },
                                        rest: null,
                                        generator: false,
                                        expression: false },
                                     index: 0 } ],
                                tainted: false,
                                stack: true,
                                scope: [Circular] },
                             '$res': 
                              { name: 'res',
                                identifiers: [ { type: 'Identifier', name: 'res' } ],
                                references: 
                                 [ { identifier: { type: 'Identifier', name: 'res' },
                                     from: [Circular],
                                     tainted: false,
                                     resolved: [Circular],
                                     flag: 1,
                                     __maybeImplicitGlobal: undefined } ],
                                defs: 
                                 [ { type: 'Parameter',
                                     name: { type: 'Identifier', name: 'res' },
                                     node: 
                                      { type: 'FunctionExpression',
                                        id: { type: 'Identifier', name: 'replyB' },
                                        params: 
                                         [ { type: 'Identifier', name: 'req' },
                                           { type: 'Identifier', name: 'res' } ],
                                        defaults: [],
                                        body: 
                                         { type: 'BlockStatement',
                                           body: 
                                            [ { type: 'ExpressionStatement',
                                                expression: 
                                                 { type: 'CallExpression',
                                                   callee: 
                                                    { type: 'MemberExpression',
                                                      computed: false,
                                                      object: { type: 'Identifier', name: 'res' },
                                                      property: { type: 'Identifier', name: 'send' } },
                                                   arguments: 
                                                    [ { type: 'BinaryExpression',
                                                        operator: '+',
                                                        left: { type: 'Literal', value: '', raw: '""' },
                                                        right: { type: 'Identifier', name: '_rep' } } ] } },
                                              { type: 'ExpressionStatement',
                                                expression: 
                                                 { type: 'AssignmentExpression',
                                                   operator: '+=',
                                                   left: { type: 'Identifier', name: '_rep' },
                                                   right: { type: 'Literal', value: 2, raw: '2' } } } ] },
                                        rest: null,
                                        generator: false,
                                        expression: false },
                                     index: 1 } ],
                                tainted: false,
                                stack: true,
                                scope: [Circular] } } },
                       taints: { __data: { '$arguments': true } },
                       dynamic: false,
                       block: 
                        { type: 'FunctionExpression',
                          id: { type: 'Identifier', name: 'replyB' },
                          params: 
                           [ { type: 'Identifier', name: 'req' },
                             { type: 'Identifier', name: 'res' } ],
                          defaults: [],
                          body: 
                           { type: 'BlockStatement',
                             body: 
                              [ { type: 'ExpressionStatement',
                                  expression: 
                                   { type: 'CallExpression',
                                     callee: 
                                      { type: 'MemberExpression',
                                        computed: false,
                                        object: { type: 'Identifier', name: 'res' },
                                        property: { type: 'Identifier', name: 'send' } },
                                     arguments: 
                                      [ { type: 'BinaryExpression',
                                          operator: '+',
                                          left: { type: 'Literal', value: '', raw: '""' },
                                          right: { type: 'Identifier', name: '_rep' } } ] } },
                                { type: 'ExpressionStatement',
                                  expression: 
                                   { type: 'AssignmentExpression',
                                     operator: '+=',
                                     left: { type: 'Identifier', name: '_rep' },
                                     right: { type: 'Literal', value: 2, raw: '2' } } } ] },
                          rest: null,
                          generator: false,
                          expression: false },
                       through: 
                        [ [Circular],
                          { identifier: { type: 'Identifier', name: '_rep' },
                            from: [Circular],
                            tainted: false,
                            resolved: null,
                            flag: 3,
                            writeExpr: { type: 'Literal', value: 2, raw: '2' },
                            __maybeImplicitGlobal: undefined } ],
                       variables: 
                        [ { name: 'arguments',
                            identifiers: [],
                            references: [],
                            defs: [],
                            tainted: false,
                            stack: true,
                            scope: [Circular] },
                          { name: 'req',
                            identifiers: [ { type: 'Identifier', name: 'req' } ],
                            references: [],
                            defs: 
                             [ { type: 'Parameter',
                                 name: { type: 'Identifier', name: 'req' },
                                 node: 
                                  { type: 'FunctionExpression',
                                    id: { type: 'Identifier', name: 'replyB' },
                                    params: 
                                     [ { type: 'Identifier', name: 'req' },
                                       { type: 'Identifier', name: 'res' } ],
                                    defaults: [],
                                    body: 
                                     { type: 'BlockStatement',
                                       body: 
                                        [ { type: 'ExpressionStatement',
                                            expression: 
                                             { type: 'CallExpression',
                                               callee: 
                                                { type: 'MemberExpression',
                                                  computed: false,
                                                  object: { type: 'Identifier', name: 'res' },
                                                  property: { type: 'Identifier', name: 'send' } },
                                               arguments: 
                                                [ { type: 'BinaryExpression',
                                                    operator: '+',
                                                    left: { type: 'Literal', value: '', raw: '""' },
                                                    right: { type: 'Identifier', name: '_rep' } } ] } },
                                          { type: 'ExpressionStatement',
                                            expression: 
                                             { type: 'AssignmentExpression',
                                               operator: '+=',
                                               left: { type: 'Identifier', name: '_rep' },
                                               right: { type: 'Literal', value: 2, raw: '2' } } } ] },
                                    rest: null,
                                    generator: false,
                                    expression: false },
                                 index: 0 } ],
                            tainted: false,
                            stack: true,
                            scope: [Circular] },
                          { name: 'res',
                            identifiers: [ { type: 'Identifier', name: 'res' } ],
                            references: 
                             [ { identifier: { type: 'Identifier', name: 'res' },
                                 from: [Circular],
                                 tainted: false,
                                 resolved: [Circular],
                                 flag: 1,
                                 __maybeImplicitGlobal: undefined } ],
                            defs: 
                             [ { type: 'Parameter',
                                 name: { type: 'Identifier', name: 'res' },
                                 node: 
                                  { type: 'FunctionExpression',
                                    id: { type: 'Identifier', name: 'replyB' },
                                    params: 
                                     [ { type: 'Identifier', name: 'req' },
                                       { type: 'Identifier', name: 'res' } ],
                                    defaults: [],
                                    body: 
                                     { type: 'BlockStatement',
                                       body: 
                                        [ { type: 'ExpressionStatement',
                                            expression: 
                                             { type: 'CallExpression',
                                               callee: 
                                                { type: 'MemberExpression',
                                                  computed: false,
                                                  object: { type: 'Identifier', name: 'res' },
                                                  property: { type: 'Identifier', name: 'send' } },
                                               arguments: 
                                                [ { type: 'BinaryExpression',
                                                    operator: '+',
                                                    left: { type: 'Literal', value: '', raw: '""' },
                                                    right: { type: 'Identifier', name: '_rep' } } ] } },
                                          { type: 'ExpressionStatement',
                                            expression: 
                                             { type: 'AssignmentExpression',
                                               operator: '+=',
                                               left: { type: 'Identifier', name: '_rep' },
                                               right: { type: 'Literal', value: 2, raw: '2' } } } ] },
                                    rest: null,
                                    generator: false,
                                    expression: false },
                                 index: 1 } ],
                            tainted: false,
                            stack: true,
                            scope: [Circular] } ],
                       references: 
                        [ { identifier: { type: 'Identifier', name: 'res' },
                            from: [Circular],
                            tainted: false,
                            resolved: 
                             { name: 'res',
                               identifiers: [ { type: 'Identifier', name: 'res' } ],
                               references: [ [Circular] ],
                               defs: 
                                [ { type: 'Parameter',
                                    name: { type: 'Identifier', name: 'res' },
                                    node: 
                                     { type: 'FunctionExpression',
                                       id: { type: 'Identifier', name: 'replyB' },
                                       params: 
                                        [ { type: 'Identifier', name: 'req' },
                                          { type: 'Identifier', name: 'res' } ],
                                       defaults: [],
                                       body: 
                                        { type: 'BlockStatement',
                                          body: 
                                           [ { type: 'ExpressionStatement',
                                               expression: 
                                                { type: 'CallExpression',
                                                  callee: 
                                                   { type: 'MemberExpression',
                                                     computed: false,
                                                     object: { type: 'Identifier', name: 'res' },
                                                     property: { type: 'Identifier', name: 'send' } },
                                                  arguments: 
                                                   [ { type: 'BinaryExpression',
                                                       operator: '+',
                                                       left: { type: 'Literal', value: '', raw: '""' },
                                                       right: { type: 'Identifier', name: '_rep' } } ] } },
                                             { type: 'ExpressionStatement',
                                               expression: 
                                                { type: 'AssignmentExpression',
                                                  operator: '+=',
                                                  left: { type: 'Identifier', name: '_rep' },
                                                  right: { type: 'Literal', value: 2, raw: '2' } } } ] },
                                       rest: null,
                                       generator: false,
                                       expression: false },
                                    index: 1 } ],
                               tainted: false,
                               stack: true,
                               scope: [Circular] },
                            flag: 1,
                            __maybeImplicitGlobal: undefined },
                          [Circular],
                          { identifier: { type: 'Identifier', name: '_rep' },
                            from: [Circular],
                            tainted: false,
                            resolved: null,
                            flag: 3,
                            writeExpr: { type: 'Literal', value: 2, raw: '2' },
                            __maybeImplicitGlobal: undefined } ],
                       left: null,
                       variableScope: [Circular],
                       functionExpressionScope: false,
                       directCallToEvalScope: false,
                       thisFound: false,
                       upper: [Circular],
                       isStrict: false,
                       childScopes: [] },
                    tainted: false,
                    resolved: null,
                    flag: 1,
                    __maybeImplicitGlobal: undefined },
                  { identifier: { type: 'Identifier', name: '_rep' },
                    from: 
                     { type: 'function',
                       set: 
                        { __data: 
                           { '$arguments': 
                              { name: 'arguments',
                                identifiers: [],
                                references: [],
                                defs: [],
                                tainted: false,
                                stack: true,
                                scope: [Circular] },
                             '$req': 
                              { name: 'req',
                                identifiers: [ { type: 'Identifier', name: 'req' } ],
                                references: [],
                                defs: 
                                 [ { type: 'Parameter',
                                     name: { type: 'Identifier', name: 'req' },
                                     node: 
                                      { type: 'FunctionExpression',
                                        id: { type: 'Identifier', name: 'replyB' },
                                        params: 
                                         [ { type: 'Identifier', name: 'req' },
                                           { type: 'Identifier', name: 'res' } ],
                                        defaults: [],
                                        body: 
                                         { type: 'BlockStatement',
                                           body: 
                                            [ { type: 'ExpressionStatement',
                                                expression: 
                                                 { type: 'CallExpression',
                                                   callee: 
                                                    { type: 'MemberExpression',
                                                      computed: false,
                                                      object: { type: 'Identifier', name: 'res' },
                                                      property: { type: 'Identifier', name: 'send' } },
                                                   arguments: 
                                                    [ { type: 'BinaryExpression',
                                                        operator: '+',
                                                        left: { type: 'Literal', value: '', raw: '""' },
                                                        right: { type: 'Identifier', name: '_rep' } } ] } },
                                              { type: 'ExpressionStatement',
                                                expression: 
                                                 { type: 'AssignmentExpression',
                                                   operator: '+=',
                                                   left: { type: 'Identifier', name: '_rep' },
                                                   right: { type: 'Literal', value: 2, raw: '2' } } } ] },
                                        rest: null,
                                        generator: false,
                                        expression: false },
                                     index: 0 } ],
                                tainted: false,
                                stack: true,
                                scope: [Circular] },
                             '$res': 
                              { name: 'res',
                                identifiers: [ { type: 'Identifier', name: 'res' } ],
                                references: 
                                 [ { identifier: { type: 'Identifier', name: 'res' },
                                     from: [Circular],
                                     tainted: false,
                                     resolved: [Circular],
                                     flag: 1,
                                     __maybeImplicitGlobal: undefined } ],
                                defs: 
                                 [ { type: 'Parameter',
                                     name: { type: 'Identifier', name: 'res' },
                                     node: 
                                      { type: 'FunctionExpression',
                                        id: { type: 'Identifier', name: 'replyB' },
                                        params: 
                                         [ { type: 'Identifier', name: 'req' },
                                           { type: 'Identifier', name: 'res' } ],
                                        defaults: [],
                                        body: 
                                         { type: 'BlockStatement',
                                           body: 
                                            [ { type: 'ExpressionStatement',
                                                expression: 
                                                 { type: 'CallExpression',
                                                   callee: 
                                                    { type: 'MemberExpression',
                                                      computed: false,
                                                      object: { type: 'Identifier', name: 'res' },
                                                      property: { type: 'Identifier', name: 'send' } },
                                                   arguments: 
                                                    [ { type: 'BinaryExpression',
                                                        operator: '+',
                                                        left: { type: 'Literal', value: '', raw: '""' },
                                                        right: { type: 'Identifier', name: '_rep' } } ] } },
                                              { type: 'ExpressionStatement',
                                                expression: 
                                                 { type: 'AssignmentExpression',
                                                   operator: '+=',
                                                   left: { type: 'Identifier', name: '_rep' },
                                                   right: { type: 'Literal', value: 2, raw: '2' } } } ] },
                                        rest: null,
                                        generator: false,
                                        expression: false },
                                     index: 1 } ],
                                tainted: false,
                                stack: true,
                                scope: [Circular] } } },
                       taints: { __data: { '$arguments': true } },
                       dynamic: false,
                       block: 
                        { type: 'FunctionExpression',
                          id: { type: 'Identifier', name: 'replyB' },
                          params: 
                           [ { type: 'Identifier', name: 'req' },
                             { type: 'Identifier', name: 'res' } ],
                          defaults: [],
                          body: 
                           { type: 'BlockStatement',
                             body: 
                              [ { type: 'ExpressionStatement',
                                  expression: 
                                   { type: 'CallExpression',
                                     callee: 
                                      { type: 'MemberExpression',
                                        computed: false,
                                        object: { type: 'Identifier', name: 'res' },
                                        property: { type: 'Identifier', name: 'send' } },
                                     arguments: 
                                      [ { type: 'BinaryExpression',
                                          operator: '+',
                                          left: { type: 'Literal', value: '', raw: '""' },
                                          right: { type: 'Identifier', name: '_rep' } } ] } },
                                { type: 'ExpressionStatement',
                                  expression: 
                                   { type: 'AssignmentExpression',
                                     operator: '+=',
                                     left: { type: 'Identifier', name: '_rep' },
                                     right: { type: 'Literal', value: 2, raw: '2' } } } ] },
                          rest: null,
                          generator: false,
                          expression: false },
                       through: 
                        [ { identifier: { type: 'Identifier', name: '_rep' },
                            from: [Circular],
                            tainted: false,
                            resolved: null,
                            flag: 1,
                            __maybeImplicitGlobal: undefined },
                          [Circular] ],
                       variables: 
                        [ { name: 'arguments',
                            identifiers: [],
                            references: [],
                            defs: [],
                            tainted: false,
                            stack: true,
                            scope: [Circular] },
                          { name: 'req',
                            identifiers: [ { type: 'Identifier', name: 'req' } ],
                            references: [],
                            defs: 
                             [ { type: 'Parameter',
                                 name: { type: 'Identifier', name: 'req' },
                                 node: 
                                  { type: 'FunctionExpression',
                                    id: { type: 'Identifier', name: 'replyB' },
                                    params: 
                                     [ { type: 'Identifier', name: 'req' },
                                       { type: 'Identifier', name: 'res' } ],
                                    defaults: [],
                                    body: 
                                     { type: 'BlockStatement',
                                       body: 
                                        [ { type: 'ExpressionStatement',
                                            expression: 
                                             { type: 'CallExpression',
                                               callee: 
                                                { type: 'MemberExpression',
                                                  computed: false,
                                                  object: { type: 'Identifier', name: 'res' },
                                                  property: { type: 'Identifier', name: 'send' } },
                                               arguments: 
                                                [ { type: 'BinaryExpression',
                                                    operator: '+',
                                                    left: { type: 'Literal', value: '', raw: '""' },
                                                    right: { type: 'Identifier', name: '_rep' } } ] } },
                                          { type: 'ExpressionStatement',
                                            expression: 
                                             { type: 'AssignmentExpression',
                                               operator: '+=',
                                               left: { type: 'Identifier', name: '_rep' },
                                               right: { type: 'Literal', value: 2, raw: '2' } } } ] },
                                    rest: null,
                                    generator: false,
                                    expression: false },
                                 index: 0 } ],
                            tainted: false,
                            stack: true,
                            scope: [Circular] },
                          { name: 'res',
                            identifiers: [ { type: 'Identifier', name: 'res' } ],
                            references: 
                             [ { identifier: { type: 'Identifier', name: 'res' },
                                 from: [Circular],
                                 tainted: false,
                                 resolved: [Circular],
                                 flag: 1,
                                 __maybeImplicitGlobal: undefined } ],
                            defs: 
                             [ { type: 'Parameter',
                                 name: { type: 'Identifier', name: 'res' },
                                 node: 
                                  { type: 'FunctionExpression',
                                    id: { type: 'Identifier', name: 'replyB' },
                                    params: 
                                     [ { type: 'Identifier', name: 'req' },
                                       { type: 'Identifier', name: 'res' } ],
                                    defaults: [],
                                    body: 
                                     { type: 'BlockStatement',
                                       body: 
                                        [ { type: 'ExpressionStatement',
                                            expression: 
                                             { type: 'CallExpression',
                                               callee: 
                                                { type: 'MemberExpression',
                                                  computed: false,
                                                  object: { type: 'Identifier', name: 'res' },
                                                  property: { type: 'Identifier', name: 'send' } },
                                               arguments: 
                                                [ { type: 'BinaryExpression',
                                                    operator: '+',
                                                    left: { type: 'Literal', value: '', raw: '""' },
                                                    right: { type: 'Identifier', name: '_rep' } } ] } },
                                          { type: 'ExpressionStatement',
                                            expression: 
                                             { type: 'AssignmentExpression',
                                               operator: '+=',
                                               left: { type: 'Identifier', name: '_rep' },
                                               right: { type: 'Literal', value: 2, raw: '2' } } } ] },
                                    rest: null,
                                    generator: false,
                                    expression: false },
                                 index: 1 } ],
                            tainted: false,
                            stack: true,
                            scope: [Circular] } ],
                       references: 
                        [ { identifier: { type: 'Identifier', name: 'res' },
                            from: [Circular],
                            tainted: false,
                            resolved: 
                             { name: 'res',
                               identifiers: [ { type: 'Identifier', name: 'res' } ],
                               references: [ [Circular] ],
                               defs: 
                                [ { type: 'Parameter',
                                    name: { type: 'Identifier', name: 'res' },
                                    node: 
                                     { type: 'FunctionExpression',
                                       id: { type: 'Identifier', name: 'replyB' },
                                       params: 
                                        [ { type: 'Identifier', name: 'req' },
                                          { type: 'Identifier', name: 'res' } ],
                                       defaults: [],
                                       body: 
                                        { type: 'BlockStatement',
                                          body: 
                                           [ { type: 'ExpressionStatement',
                                               expression: 
                                                { type: 'CallExpression',
                                                  callee: 
                                                   { type: 'MemberExpression',
                                                     computed: false,
                                                     object: { type: 'Identifier', name: 'res' },
                                                     property: { type: 'Identifier', name: 'send' } },
                                                  arguments: 
                                                   [ { type: 'BinaryExpression',
                                                       operator: '+',
                                                       left: { type: 'Literal', value: '', raw: '""' },
                                                       right: { type: 'Identifier', name: '_rep' } } ] } },
                                             { type: 'ExpressionStatement',
                                               expression: 
                                                { type: 'AssignmentExpression',
                                                  operator: '+=',
                                                  left: { type: 'Identifier', name: '_rep' },
                                                  right: { type: 'Literal', value: 2, raw: '2' } } } ] },
                                       rest: null,
                                       generator: false,
                                       expression: false },
                                    index: 1 } ],
                               tainted: false,
                               stack: true,
                               scope: [Circular] },
                            flag: 1,
                            __maybeImplicitGlobal: undefined },
                          { identifier: { type: 'Identifier', name: '_rep' },
                            from: [Circular],
                            tainted: false,
                            resolved: null,
                            flag: 1,
                            __maybeImplicitGlobal: undefined },
                          [Circular] ],
                       left: null,
                       variableScope: [Circular],
                       functionExpressionScope: false,
                       directCallToEvalScope: false,
                       thisFound: false,
                       upper: [Circular],
                       isStrict: false,
                       childScopes: [] },
                    tainted: false,
                    resolved: null,
                    flag: 3,
                    writeExpr: { type: 'Literal', value: 2, raw: '2' },
                    __maybeImplicitGlobal: undefined } ],
               variables: 
                [ { name: 'replyB',
                    identifiers: [ { type: 'Identifier', name: 'replyB' } ],
                    references: [],
                    defs: 
                     [ { type: 'FunctionName',
                         name: { type: 'Identifier', name: 'replyB' },
                         node: 
                          { type: 'FunctionExpression',
                            id: { type: 'Identifier', name: 'replyB' },
                            params: 
                             [ { type: 'Identifier', name: 'req' },
                               { type: 'Identifier', name: 'res' } ],
                            defaults: [],
                            body: 
                             { type: 'BlockStatement',
                               body: 
                                [ { type: 'ExpressionStatement',
                                    expression: 
                                     { type: 'CallExpression',
                                       callee: 
                                        { type: 'MemberExpression',
                                          computed: false,
                                          object: { type: 'Identifier', name: 'res' },
                                          property: { type: 'Identifier', name: 'send' } },
                                       arguments: 
                                        [ { type: 'BinaryExpression',
                                            operator: '+',
                                            left: { type: 'Literal', value: '', raw: '""' },
                                            right: { type: 'Identifier', name: '_rep' } } ] } },
                                  { type: 'ExpressionStatement',
                                    expression: 
                                     { type: 'AssignmentExpression',
                                       operator: '+=',
                                       left: { type: 'Identifier', name: '_rep' },
                                       right: { type: 'Literal', value: 2, raw: '2' } } } ] },
                            rest: null,
                            generator: false,
                            expression: false } } ],
                    tainted: false,
                    stack: true,
                    scope: [Circular] } ],
               references: [],
               left: null,
               variableScope: [Circular],
               functionExpressionScope: true,
               directCallToEvalScope: false,
               thisFound: false,
               upper: [Circular],
               isStrict: false,
               childScopes: 
                [ { type: 'function',
                    set: 
                     { __data: 
                        { '$arguments': 
                           { name: 'arguments',
                             identifiers: [],
                             references: [],
                             defs: [],
                             tainted: false,
                             stack: true,
                             scope: [Circular] },
                          '$req': 
                           { name: 'req',
                             identifiers: [ { type: 'Identifier', name: 'req' } ],
                             references: [],
                             defs: 
                              [ { type: 'Parameter',
                                  name: { type: 'Identifier', name: 'req' },
                                  node: 
                                   { type: 'FunctionExpression',
                                     id: { type: 'Identifier', name: 'replyB' },
                                     params: 
                                      [ { type: 'Identifier', name: 'req' },
                                        { type: 'Identifier', name: 'res' } ],
                                     defaults: [],
                                     body: 
                                      { type: 'BlockStatement',
                                        body: 
                                         [ { type: 'ExpressionStatement',
                                             expression: 
                                              { type: 'CallExpression',
                                                callee: 
                                                 { type: 'MemberExpression',
                                                   computed: false,
                                                   object: { type: 'Identifier', name: 'res' },
                                                   property: { type: 'Identifier', name: 'send' } },
                                                arguments: 
                                                 [ { type: 'BinaryExpression',
                                                     operator: '+',
                                                     left: { type: 'Literal', value: '', raw: '""' },
                                                     right: { type: 'Identifier', name: '_rep' } } ] } },
                                           { type: 'ExpressionStatement',
                                             expression: 
                                              { type: 'AssignmentExpression',
                                                operator: '+=',
                                                left: { type: 'Identifier', name: '_rep' },
                                                right: { type: 'Literal', value: 2, raw: '2' } } } ] },
                                     rest: null,
                                     generator: false,
                                     expression: false },
                                  index: 0 } ],
                             tainted: false,
                             stack: true,
                             scope: [Circular] },
                          '$res': 
                           { name: 'res',
                             identifiers: [ { type: 'Identifier', name: 'res' } ],
                             references: 
                              [ { identifier: { type: 'Identifier', name: 'res' },
                                  from: [Circular],
                                  tainted: false,
                                  resolved: [Circular],
                                  flag: 1,
                                  __maybeImplicitGlobal: undefined } ],
                             defs: 
                              [ { type: 'Parameter',
                                  name: { type: 'Identifier', name: 'res' },
                                  node: 
                                   { type: 'FunctionExpression',
                                     id: { type: 'Identifier', name: 'replyB' },
                                     params: 
                                      [ { type: 'Identifier', name: 'req' },
                                        { type: 'Identifier', name: 'res' } ],
                                     defaults: [],
                                     body: 
                                      { type: 'BlockStatement',
                                        body: 
                                         [ { type: 'ExpressionStatement',
                                             expression: 
                                              { type: 'CallExpression',
                                                callee: 
                                                 { type: 'MemberExpression',
                                                   computed: false,
                                                   object: { type: 'Identifier', name: 'res' },
                                                   property: { type: 'Identifier', name: 'send' } },
                                                arguments: 
                                                 [ { type: 'BinaryExpression',
                                                     operator: '+',
                                                     left: { type: 'Literal', value: '', raw: '""' },
                                                     right: { type: 'Identifier', name: '_rep' } } ] } },
                                           { type: 'ExpressionStatement',
                                             expression: 
                                              { type: 'AssignmentExpression',
                                                operator: '+=',
                                                left: { type: 'Identifier', name: '_rep' },
                                                right: { type: 'Literal', value: 2, raw: '2' } } } ] },
                                     rest: null,
                                     generator: false,
                                     expression: false },
                                  index: 1 } ],
                             tainted: false,
                             stack: true,
                             scope: [Circular] } } },
                    taints: { __data: { '$arguments': true } },
                    dynamic: false,
                    block: 
                     { type: 'FunctionExpression',
                       id: { type: 'Identifier', name: 'replyB' },
                       params: 
                        [ { type: 'Identifier', name: 'req' },
                          { type: 'Identifier', name: 'res' } ],
                       defaults: [],
                       body: 
                        { type: 'BlockStatement',
                          body: 
                           [ { type: 'ExpressionStatement',
                               expression: 
                                { type: 'CallExpression',
                                  callee: 
                                   { type: 'MemberExpression',
                                     computed: false,
                                     object: { type: 'Identifier', name: 'res' },
                                     property: { type: 'Identifier', name: 'send' } },
                                  arguments: 
                                   [ { type: 'BinaryExpression',
                                       operator: '+',
                                       left: { type: 'Literal', value: '', raw: '""' },
                                       right: { type: 'Identifier', name: '_rep' } } ] } },
                             { type: 'ExpressionStatement',
                               expression: 
                                { type: 'AssignmentExpression',
                                  operator: '+=',
                                  left: { type: 'Identifier', name: '_rep' },
                                  right: { type: 'Literal', value: 2, raw: '2' } } } ] },
                       rest: null,
                       generator: false,
                       expression: false },
                    through: 
                     [ { identifier: { type: 'Identifier', name: '_rep' },
                         from: [Circular],
                         tainted: false,
                         resolved: null,
                         flag: 1,
                         __maybeImplicitGlobal: undefined },
                       { identifier: { type: 'Identifier', name: '_rep' },
                         from: [Circular],
                         tainted: false,
                         resolved: null,
                         flag: 3,
                         writeExpr: { type: 'Literal', value: 2, raw: '2' },
                         __maybeImplicitGlobal: undefined } ],
                    variables: 
                     [ { name: 'arguments',
                         identifiers: [],
                         references: [],
                         defs: [],
                         tainted: false,
                         stack: true,
                         scope: [Circular] },
                       { name: 'req',
                         identifiers: [ { type: 'Identifier', name: 'req' } ],
                         references: [],
                         defs: 
                          [ { type: 'Parameter',
                              name: { type: 'Identifier', name: 'req' },
                              node: 
                               { type: 'FunctionExpression',
                                 id: { type: 'Identifier', name: 'replyB' },
                                 params: 
                                  [ { type: 'Identifier', name: 'req' },
                                    { type: 'Identifier', name: 'res' } ],
                                 defaults: [],
                                 body: 
                                  { type: 'BlockStatement',
                                    body: 
                                     [ { type: 'ExpressionStatement',
                                         expression: 
                                          { type: 'CallExpression',
                                            callee: 
                                             { type: 'MemberExpression',
                                               computed: false,
                                               object: { type: 'Identifier', name: 'res' },
                                               property: { type: 'Identifier', name: 'send' } },
                                            arguments: 
                                             [ { type: 'BinaryExpression',
                                                 operator: '+',
                                                 left: { type: 'Literal', value: '', raw: '""' },
                                                 right: { type: 'Identifier', name: '_rep' } } ] } },
                                       { type: 'ExpressionStatement',
                                         expression: 
                                          { type: 'AssignmentExpression',
                                            operator: '+=',
                                            left: { type: 'Identifier', name: '_rep' },
                                            right: { type: 'Literal', value: 2, raw: '2' } } } ] },
                                 rest: null,
                                 generator: false,
                                 expression: false },
                              index: 0 } ],
                         tainted: false,
                         stack: true,
                         scope: [Circular] },
                       { name: 'res',
                         identifiers: [ { type: 'Identifier', name: 'res' } ],
                         references: 
                          [ { identifier: { type: 'Identifier', name: 'res' },
                              from: [Circular],
                              tainted: false,
                              resolved: [Circular],
                              flag: 1,
                              __maybeImplicitGlobal: undefined } ],
                         defs: 
                          [ { type: 'Parameter',
                              name: { type: 'Identifier', name: 'res' },
                              node: 
                               { type: 'FunctionExpression',
                                 id: { type: 'Identifier', name: 'replyB' },
                                 params: 
                                  [ { type: 'Identifier', name: 'req' },
                                    { type: 'Identifier', name: 'res' } ],
                                 defaults: [],
                                 body: 
                                  { type: 'BlockStatement',
                                    body: 
                                     [ { type: 'ExpressionStatement',
                                         expression: 
                                          { type: 'CallExpression',
                                            callee: 
                                             { type: 'MemberExpression',
                                               computed: false,
                                               object: { type: 'Identifier', name: 'res' },
                                               property: { type: 'Identifier', name: 'send' } },
                                            arguments: 
                                             [ { type: 'BinaryExpression',
                                                 operator: '+',
                                                 left: { type: 'Literal', value: '', raw: '""' },
                                                 right: { type: 'Identifier', name: '_rep' } } ] } },
                                       { type: 'ExpressionStatement',
                                         expression: 
                                          { type: 'AssignmentExpression',
                                            operator: '+=',
                                            left: { type: 'Identifier', name: '_rep' },
                                            right: { type: 'Literal', value: 2, raw: '2' } } } ] },
                                 rest: null,
                                 generator: false,
                                 expression: false },
                              index: 1 } ],
                         tainted: false,
                         stack: true,
                         scope: [Circular] } ],
                    references: 
                     [ { identifier: { type: 'Identifier', name: 'res' },
                         from: [Circular],
                         tainted: false,
                         resolved: 
                          { name: 'res',
                            identifiers: [ { type: 'Identifier', name: 'res' } ],
                            references: [ [Circular] ],
                            defs: 
                             [ { type: 'Parameter',
                                 name: { type: 'Identifier', name: 'res' },
                                 node: 
                                  { type: 'FunctionExpression',
                                    id: { type: 'Identifier', name: 'replyB' },
                                    params: 
                                     [ { type: 'Identifier', name: 'req' },
                                       { type: 'Identifier', name: 'res' } ],
                                    defaults: [],
                                    body: 
                                     { type: 'BlockStatement',
                                       body: 
                                        [ { type: 'ExpressionStatement',
                                            expression: 
                                             { type: 'CallExpression',
                                               callee: 
                                                { type: 'MemberExpression',
                                                  computed: false,
                                                  object: { type: 'Identifier', name: 'res' },
                                                  property: { type: 'Identifier', name: 'send' } },
                                               arguments: 
                                                [ { type: 'BinaryExpression',
                                                    operator: '+',
                                                    left: { type: 'Literal', value: '', raw: '""' },
                                                    right: { type: 'Identifier', name: '_rep' } } ] } },
                                          { type: 'ExpressionStatement',
                                            expression: 
                                             { type: 'AssignmentExpression',
                                               operator: '+=',
                                               left: { type: 'Identifier', name: '_rep' },
                                               right: { type: 'Literal', value: 2, raw: '2' } } } ] },
                                    rest: null,
                                    generator: false,
                                    expression: false },
                                 index: 1 } ],
                            tainted: false,
                            stack: true,
                            scope: [Circular] },
                         flag: 1,
                         __maybeImplicitGlobal: undefined },
                       { identifier: { type: 'Identifier', name: '_rep' },
                         from: [Circular],
                         tainted: false,
                         resolved: null,
                         flag: 1,
                         __maybeImplicitGlobal: undefined },
                       { identifier: { type: 'Identifier', name: '_rep' },
                         from: [Circular],
                         tainted: false,
                         resolved: null,
                         flag: 3,
                         writeExpr: { type: 'Literal', value: 2, raw: '2' },
                         __maybeImplicitGlobal: undefined } ],
                    left: null,
                    variableScope: [Circular],
                    functionExpressionScope: false,
                    directCallToEvalScope: false,
                    thisFound: false,
                    upper: [Circular],
                    isStrict: false,
                    childScopes: [] } ] } ],
          implicit: { set: { __data: {} }, variables: [] } },
       isStrict: false,
       childScopes: 
        [ { type: 'function',
            set: 
             { __data: 
                { '$arguments': 
                   { name: 'arguments',
                     identifiers: [],
                     references: [],
                     defs: [],
                     tainted: false,
                     stack: true,
                     scope: [Circular] },
                  '$req': 
                   { name: 'req',
                     identifiers: [ { type: 'Identifier', name: 'req' } ],
                     references: [],
                     defs: 
                      [ { type: 'Parameter',
                          name: { type: 'Identifier', name: 'req' },
                          node: 
                           { type: 'FunctionExpression',
                             id: { type: 'Identifier', name: 'replyA' },
                             params: 
                              [ { type: 'Identifier', name: 'req' },
                                { type: 'Identifier', name: 'res' } ],
                             defaults: [],
                             body: 
                              { type: 'BlockStatement',
                                body: 
                                 [ { type: 'ExpressionStatement',
                                     expression: 
                                      { type: 'CallExpression',
                                        callee: 
                                         { type: 'MemberExpression',
                                           computed: false,
                                           object: { type: 'Identifier', name: 'res' },
                                           property: { type: 'Identifier', name: 'send' } },
                                        arguments: 
                                         [ { type: 'BinaryExpression',
                                             operator: '+',
                                             left: { type: 'Literal', value: '', raw: '""' },
                                             right: { type: 'Identifier', name: '_rep' } } ] } },
                                   { type: 'ExpressionStatement',
                                     expression: 
                                      { type: 'AssignmentExpression',
                                        operator: '+=',
                                        left: { type: 'Identifier', name: '_rep' },
                                        right: { type: 'Literal', value: 1, raw: '1' } } } ] },
                             rest: null,
                             generator: false,
                             expression: false },
                          index: 0 } ],
                     tainted: false,
                     stack: true,
                     scope: [Circular] },
                  '$res': 
                   { name: 'res',
                     identifiers: [ { type: 'Identifier', name: 'res' } ],
                     references: 
                      [ { identifier: { type: 'Identifier', name: 'res' },
                          from: [Circular],
                          tainted: false,
                          resolved: [Circular],
                          flag: 1,
                          __maybeImplicitGlobal: undefined } ],
                     defs: 
                      [ { type: 'Parameter',
                          name: { type: 'Identifier', name: 'res' },
                          node: 
                           { type: 'FunctionExpression',
                             id: { type: 'Identifier', name: 'replyA' },
                             params: 
                              [ { type: 'Identifier', name: 'req' },
                                { type: 'Identifier', name: 'res' } ],
                             defaults: [],
                             body: 
                              { type: 'BlockStatement',
                                body: 
                                 [ { type: 'ExpressionStatement',
                                     expression: 
                                      { type: 'CallExpression',
                                        callee: 
                                         { type: 'MemberExpression',
                                           computed: false,
                                           object: { type: 'Identifier', name: 'res' },
                                           property: { type: 'Identifier', name: 'send' } },
                                        arguments: 
                                         [ { type: 'BinaryExpression',
                                             operator: '+',
                                             left: { type: 'Literal', value: '', raw: '""' },
                                             right: { type: 'Identifier', name: '_rep' } } ] } },
                                   { type: 'ExpressionStatement',
                                     expression: 
                                      { type: 'AssignmentExpression',
                                        operator: '+=',
                                        left: { type: 'Identifier', name: '_rep' },
                                        right: { type: 'Literal', value: 1, raw: '1' } } } ] },
                             rest: null,
                             generator: false,
                             expression: false },
                          index: 1 } ],
                     tainted: false,
                     stack: true,
                     scope: [Circular] } } },
            taints: { __data: { '$arguments': true } },
            dynamic: false,
            block: 
             { type: 'FunctionExpression',
               id: { type: 'Identifier', name: 'replyA' },
               params: 
                [ { type: 'Identifier', name: 'req' },
                  { type: 'Identifier', name: 'res' } ],
               defaults: [],
               body: 
                { type: 'BlockStatement',
                  body: 
                   [ { type: 'ExpressionStatement',
                       expression: 
                        { type: 'CallExpression',
                          callee: 
                           { type: 'MemberExpression',
                             computed: false,
                             object: { type: 'Identifier', name: 'res' },
                             property: { type: 'Identifier', name: 'send' } },
                          arguments: 
                           [ { type: 'BinaryExpression',
                               operator: '+',
                               left: { type: 'Literal', value: '', raw: '""' },
                               right: { type: 'Identifier', name: '_rep' } } ] } },
                     { type: 'ExpressionStatement',
                       expression: 
                        { type: 'AssignmentExpression',
                          operator: '+=',
                          left: { type: 'Identifier', name: '_rep' },
                          right: { type: 'Literal', value: 1, raw: '1' } } } ] },
               rest: null,
               generator: false,
               expression: false },
            through: 
             [ { identifier: { type: 'Identifier', name: '_rep' },
                 from: [Circular],
                 tainted: false,
                 resolved: null,
                 flag: 1,
                 __maybeImplicitGlobal: undefined },
               { identifier: { type: 'Identifier', name: '_rep' },
                 from: [Circular],
                 tainted: false,
                 resolved: null,
                 flag: 3,
                 writeExpr: { type: 'Literal', value: 1, raw: '1' },
                 __maybeImplicitGlobal: undefined } ],
            variables: 
             [ { name: 'arguments',
                 identifiers: [],
                 references: [],
                 defs: [],
                 tainted: false,
                 stack: true,
                 scope: [Circular] },
               { name: 'req',
                 identifiers: [ { type: 'Identifier', name: 'req' } ],
                 references: [],
                 defs: 
                  [ { type: 'Parameter',
                      name: { type: 'Identifier', name: 'req' },
                      node: 
                       { type: 'FunctionExpression',
                         id: { type: 'Identifier', name: 'replyA' },
                         params: 
                          [ { type: 'Identifier', name: 'req' },
                            { type: 'Identifier', name: 'res' } ],
                         defaults: [],
                         body: 
                          { type: 'BlockStatement',
                            body: 
                             [ { type: 'ExpressionStatement',
                                 expression: 
                                  { type: 'CallExpression',
                                    callee: 
                                     { type: 'MemberExpression',
                                       computed: false,
                                       object: { type: 'Identifier', name: 'res' },
                                       property: { type: 'Identifier', name: 'send' } },
                                    arguments: 
                                     [ { type: 'BinaryExpression',
                                         operator: '+',
                                         left: { type: 'Literal', value: '', raw: '""' },
                                         right: { type: 'Identifier', name: '_rep' } } ] } },
                               { type: 'ExpressionStatement',
                                 expression: 
                                  { type: 'AssignmentExpression',
                                    operator: '+=',
                                    left: { type: 'Identifier', name: '_rep' },
                                    right: { type: 'Literal', value: 1, raw: '1' } } } ] },
                         rest: null,
                         generator: false,
                         expression: false },
                      index: 0 } ],
                 tainted: false,
                 stack: true,
                 scope: [Circular] },
               { name: 'res',
                 identifiers: [ { type: 'Identifier', name: 'res' } ],
                 references: 
                  [ { identifier: { type: 'Identifier', name: 'res' },
                      from: [Circular],
                      tainted: false,
                      resolved: [Circular],
                      flag: 1,
                      __maybeImplicitGlobal: undefined } ],
                 defs: 
                  [ { type: 'Parameter',
                      name: { type: 'Identifier', name: 'res' },
                      node: 
                       { type: 'FunctionExpression',
                         id: { type: 'Identifier', name: 'replyA' },
                         params: 
                          [ { type: 'Identifier', name: 'req' },
                            { type: 'Identifier', name: 'res' } ],
                         defaults: [],
                         body: 
                          { type: 'BlockStatement',
                            body: 
                             [ { type: 'ExpressionStatement',
                                 expression: 
                                  { type: 'CallExpression',
                                    callee: 
                                     { type: 'MemberExpression',
                                       computed: false,
                                       object: { type: 'Identifier', name: 'res' },
                                       property: { type: 'Identifier', name: 'send' } },
                                    arguments: 
                                     [ { type: 'BinaryExpression',
                                         operator: '+',
                                         left: { type: 'Literal', value: '', raw: '""' },
                                         right: { type: 'Identifier', name: '_rep' } } ] } },
                               { type: 'ExpressionStatement',
                                 expression: 
                                  { type: 'AssignmentExpression',
                                    operator: '+=',
                                    left: { type: 'Identifier', name: '_rep' },
                                    right: { type: 'Literal', value: 1, raw: '1' } } } ] },
                         rest: null,
                         generator: false,
                         expression: false },
                      index: 1 } ],
                 tainted: false,
                 stack: true,
                 scope: [Circular] } ],
            references: 
             [ { identifier: { type: 'Identifier', name: 'res' },
                 from: [Circular],
                 tainted: false,
                 resolved: 
                  { name: 'res',
                    identifiers: [ { type: 'Identifier', name: 'res' } ],
                    references: [ [Circular] ],
                    defs: 
                     [ { type: 'Parameter',
                         name: { type: 'Identifier', name: 'res' },
                         node: 
                          { type: 'FunctionExpression',
                            id: { type: 'Identifier', name: 'replyA' },
                            params: 
                             [ { type: 'Identifier', name: 'req' },
                               { type: 'Identifier', name: 'res' } ],
                            defaults: [],
                            body: 
                             { type: 'BlockStatement',
                               body: 
                                [ { type: 'ExpressionStatement',
                                    expression: 
                                     { type: 'CallExpression',
                                       callee: 
                                        { type: 'MemberExpression',
                                          computed: false,
                                          object: { type: 'Identifier', name: 'res' },
                                          property: { type: 'Identifier', name: 'send' } },
                                       arguments: 
                                        [ { type: 'BinaryExpression',
                                            operator: '+',
                                            left: { type: 'Literal', value: '', raw: '""' },
                                            right: { type: 'Identifier', name: '_rep' } } ] } },
                                  { type: 'ExpressionStatement',
                                    expression: 
                                     { type: 'AssignmentExpression',
                                       operator: '+=',
                                       left: { type: 'Identifier', name: '_rep' },
                                       right: { type: 'Literal', value: 1, raw: '1' } } } ] },
                            rest: null,
                            generator: false,
                            expression: false },
                         index: 1 } ],
                    tainted: false,
                    stack: true,
                    scope: [Circular] },
                 flag: 1,
                 __maybeImplicitGlobal: undefined },
               { identifier: { type: 'Identifier', name: '_rep' },
                 from: [Circular],
                 tainted: false,
                 resolved: null,
                 flag: 1,
                 __maybeImplicitGlobal: undefined },
               { identifier: { type: 'Identifier', name: '_rep' },
                 from: [Circular],
                 tainted: false,
                 resolved: null,
                 flag: 3,
                 writeExpr: { type: 'Literal', value: 1, raw: '1' },
                 __maybeImplicitGlobal: undefined } ],
            left: null,
            variableScope: [Circular],
            functionExpressionScope: false,
            directCallToEvalScope: false,
            thisFound: false,
            upper: [Circular],
            isStrict: false,
            childScopes: [] } ] },
     { type: 'function',
       set: 
        { __data: 
           { '$arguments': 
              { name: 'arguments',
                identifiers: [],
                references: [],
                defs: [],
                tainted: false,
                stack: true,
                scope: [Circular] },
             '$req': 
              { name: 'req',
                identifiers: [ { type: 'Identifier', name: 'req' } ],
                references: [],
                defs: 
                 [ { type: 'Parameter',
                     name: { type: 'Identifier', name: 'req' },
                     node: 
                      { type: 'FunctionExpression',
                        id: { type: 'Identifier', name: 'replyA' },
                        params: 
                         [ { type: 'Identifier', name: 'req' },
                           { type: 'Identifier', name: 'res' } ],
                        defaults: [],
                        body: 
                         { type: 'BlockStatement',
                           body: 
                            [ { type: 'ExpressionStatement',
                                expression: 
                                 { type: 'CallExpression',
                                   callee: 
                                    { type: 'MemberExpression',
                                      computed: false,
                                      object: { type: 'Identifier', name: 'res' },
                                      property: { type: 'Identifier', name: 'send' } },
                                   arguments: 
                                    [ { type: 'BinaryExpression',
                                        operator: '+',
                                        left: { type: 'Literal', value: '', raw: '""' },
                                        right: { type: 'Identifier', name: '_rep' } } ] } },
                              { type: 'ExpressionStatement',
                                expression: 
                                 { type: 'AssignmentExpression',
                                   operator: '+=',
                                   left: { type: 'Identifier', name: '_rep' },
                                   right: { type: 'Literal', value: 1, raw: '1' } } } ] },
                        rest: null,
                        generator: false,
                        expression: false },
                     index: 0 } ],
                tainted: false,
                stack: true,
                scope: [Circular] },
             '$res': 
              { name: 'res',
                identifiers: [ { type: 'Identifier', name: 'res' } ],
                references: 
                 [ { identifier: { type: 'Identifier', name: 'res' },
                     from: [Circular],
                     tainted: false,
                     resolved: [Circular],
                     flag: 1,
                     __maybeImplicitGlobal: undefined } ],
                defs: 
                 [ { type: 'Parameter',
                     name: { type: 'Identifier', name: 'res' },
                     node: 
                      { type: 'FunctionExpression',
                        id: { type: 'Identifier', name: 'replyA' },
                        params: 
                         [ { type: 'Identifier', name: 'req' },
                           { type: 'Identifier', name: 'res' } ],
                        defaults: [],
                        body: 
                         { type: 'BlockStatement',
                           body: 
                            [ { type: 'ExpressionStatement',
                                expression: 
                                 { type: 'CallExpression',
                                   callee: 
                                    { type: 'MemberExpression',
                                      computed: false,
                                      object: { type: 'Identifier', name: 'res' },
                                      property: { type: 'Identifier', name: 'send' } },
                                   arguments: 
                                    [ { type: 'BinaryExpression',
                                        operator: '+',
                                        left: { type: 'Literal', value: '', raw: '""' },
                                        right: { type: 'Identifier', name: '_rep' } } ] } },
                              { type: 'ExpressionStatement',
                                expression: 
                                 { type: 'AssignmentExpression',
                                   operator: '+=',
                                   left: { type: 'Identifier', name: '_rep' },
                                   right: { type: 'Literal', value: 1, raw: '1' } } } ] },
                        rest: null,
                        generator: false,
                        expression: false },
                     index: 1 } ],
                tainted: false,
                stack: true,
                scope: [Circular] } } },
       taints: { __data: { '$arguments': true } },
       dynamic: false,
       block: 
        { type: 'FunctionExpression',
          id: { type: 'Identifier', name: 'replyA' },
          params: 
           [ { type: 'Identifier', name: 'req' },
             { type: 'Identifier', name: 'res' } ],
          defaults: [],
          body: 
           { type: 'BlockStatement',
             body: 
              [ { type: 'ExpressionStatement',
                  expression: 
                   { type: 'CallExpression',
                     callee: 
                      { type: 'MemberExpression',
                        computed: false,
                        object: { type: 'Identifier', name: 'res' },
                        property: { type: 'Identifier', name: 'send' } },
                     arguments: 
                      [ { type: 'BinaryExpression',
                          operator: '+',
                          left: { type: 'Literal', value: '', raw: '""' },
                          right: { type: 'Identifier', name: '_rep' } } ] } },
                { type: 'ExpressionStatement',
                  expression: 
                   { type: 'AssignmentExpression',
                     operator: '+=',
                     left: { type: 'Identifier', name: '_rep' },
                     right: { type: 'Literal', value: 1, raw: '1' } } } ] },
          rest: null,
          generator: false,
          expression: false },
       through: 
        [ { identifier: { type: 'Identifier', name: '_rep' },
            from: [Circular],
            tainted: false,
            resolved: null,
            flag: 1,
            __maybeImplicitGlobal: undefined },
          { identifier: { type: 'Identifier', name: '_rep' },
            from: [Circular],
            tainted: false,
            resolved: null,
            flag: 3,
            writeExpr: { type: 'Literal', value: 1, raw: '1' },
            __maybeImplicitGlobal: undefined } ],
       variables: 
        [ { name: 'arguments',
            identifiers: [],
            references: [],
            defs: [],
            tainted: false,
            stack: true,
            scope: [Circular] },
          { name: 'req',
            identifiers: [ { type: 'Identifier', name: 'req' } ],
            references: [],
            defs: 
             [ { type: 'Parameter',
                 name: { type: 'Identifier', name: 'req' },
                 node: 
                  { type: 'FunctionExpression',
                    id: { type: 'Identifier', name: 'replyA' },
                    params: 
                     [ { type: 'Identifier', name: 'req' },
                       { type: 'Identifier', name: 'res' } ],
                    defaults: [],
                    body: 
                     { type: 'BlockStatement',
                       body: 
                        [ { type: 'ExpressionStatement',
                            expression: 
                             { type: 'CallExpression',
                               callee: 
                                { type: 'MemberExpression',
                                  computed: false,
                                  object: { type: 'Identifier', name: 'res' },
                                  property: { type: 'Identifier', name: 'send' } },
                               arguments: 
                                [ { type: 'BinaryExpression',
                                    operator: '+',
                                    left: { type: 'Literal', value: '', raw: '""' },
                                    right: { type: 'Identifier', name: '_rep' } } ] } },
                          { type: 'ExpressionStatement',
                            expression: 
                             { type: 'AssignmentExpression',
                               operator: '+=',
                               left: { type: 'Identifier', name: '_rep' },
                               right: { type: 'Literal', value: 1, raw: '1' } } } ] },
                    rest: null,
                    generator: false,
                    expression: false },
                 index: 0 } ],
            tainted: false,
            stack: true,
            scope: [Circular] },
          { name: 'res',
            identifiers: [ { type: 'Identifier', name: 'res' } ],
            references: 
             [ { identifier: { type: 'Identifier', name: 'res' },
                 from: [Circular],
                 tainted: false,
                 resolved: [Circular],
                 flag: 1,
                 __maybeImplicitGlobal: undefined } ],
            defs: 
             [ { type: 'Parameter',
                 name: { type: 'Identifier', name: 'res' },
                 node: 
                  { type: 'FunctionExpression',
                    id: { type: 'Identifier', name: 'replyA' },
                    params: 
                     [ { type: 'Identifier', name: 'req' },
                       { type: 'Identifier', name: 'res' } ],
                    defaults: [],
                    body: 
                     { type: 'BlockStatement',
                       body: 
                        [ { type: 'ExpressionStatement',
                            expression: 
                             { type: 'CallExpression',
                               callee: 
                                { type: 'MemberExpression',
                                  computed: false,
                                  object: { type: 'Identifier', name: 'res' },
                                  property: { type: 'Identifier', name: 'send' } },
                               arguments: 
                                [ { type: 'BinaryExpression',
                                    operator: '+',
                                    left: { type: 'Literal', value: '', raw: '""' },
                                    right: { type: 'Identifier', name: '_rep' } } ] } },
                          { type: 'ExpressionStatement',
                            expression: 
                             { type: 'AssignmentExpression',
                               operator: '+=',
                               left: { type: 'Identifier', name: '_rep' },
                               right: { type: 'Literal', value: 1, raw: '1' } } } ] },
                    rest: null,
                    generator: false,
                    expression: false },
                 index: 1 } ],
            tainted: false,
            stack: true,
            scope: [Circular] } ],
       references: 
        [ { identifier: { type: 'Identifier', name: 'res' },
            from: [Circular],
            tainted: false,
            resolved: 
             { name: 'res',
               identifiers: [ { type: 'Identifier', name: 'res' } ],
               references: [ [Circular] ],
               defs: 
                [ { type: 'Parameter',
                    name: { type: 'Identifier', name: 'res' },
                    node: 
                     { type: 'FunctionExpression',
                       id: { type: 'Identifier', name: 'replyA' },
                       params: 
                        [ { type: 'Identifier', name: 'req' },
                          { type: 'Identifier', name: 'res' } ],
                       defaults: [],
                       body: 
                        { type: 'BlockStatement',
                          body: 
                           [ { type: 'ExpressionStatement',
                               expression: 
                                { type: 'CallExpression',
                                  callee: 
                                   { type: 'MemberExpression',
                                     computed: false,
                                     object: { type: 'Identifier', name: 'res' },
                                     property: { type: 'Identifier', name: 'send' } },
                                  arguments: 
                                   [ { type: 'BinaryExpression',
                                       operator: '+',
                                       left: { type: 'Literal', value: '', raw: '""' },
                                       right: { type: 'Identifier', name: '_rep' } } ] } },
                             { type: 'ExpressionStatement',
                               expression: 
                                { type: 'AssignmentExpression',
                                  operator: '+=',
                                  left: { type: 'Identifier', name: '_rep' },
                                  right: { type: 'Literal', value: 1, raw: '1' } } } ] },
                       rest: null,
                       generator: false,
                       expression: false },
                    index: 1 } ],
               tainted: false,
               stack: true,
               scope: [Circular] },
            flag: 1,
            __maybeImplicitGlobal: undefined },
          { identifier: { type: 'Identifier', name: '_rep' },
            from: [Circular],
            tainted: false,
            resolved: null,
            flag: 1,
            __maybeImplicitGlobal: undefined },
          { identifier: { type: 'Identifier', name: '_rep' },
            from: [Circular],
            tainted: false,
            resolved: null,
            flag: 3,
            writeExpr: { type: 'Literal', value: 1, raw: '1' },
            __maybeImplicitGlobal: undefined } ],
       left: null,
       variableScope: [Circular],
       functionExpressionScope: false,
       directCallToEvalScope: false,
       thisFound: false,
       upper: 
        { type: 'function',
          set: 
           { __data: 
              { '$replyA': 
                 { name: 'replyA',
                   identifiers: [ { type: 'Identifier', name: 'replyA' } ],
                   references: [],
                   defs: 
                    [ { type: 'FunctionName',
                        name: { type: 'Identifier', name: 'replyA' },
                        node: 
                         { type: 'FunctionExpression',
                           id: { type: 'Identifier', name: 'replyA' },
                           params: 
                            [ { type: 'Identifier', name: 'req' },
                              { type: 'Identifier', name: 'res' } ],
                           defaults: [],
                           body: 
                            { type: 'BlockStatement',
                              body: 
                               [ { type: 'ExpressionStatement',
                                   expression: 
                                    { type: 'CallExpression',
                                      callee: 
                                       { type: 'MemberExpression',
                                         computed: false,
                                         object: { type: 'Identifier', name: 'res' },
                                         property: { type: 'Identifier', name: 'send' } },
                                      arguments: 
                                       [ { type: 'BinaryExpression',
                                           operator: '+',
                                           left: { type: 'Literal', value: '', raw: '""' },
                                           right: { type: 'Identifier', name: '_rep' } } ] } },
                                 { type: 'ExpressionStatement',
                                   expression: 
                                    { type: 'AssignmentExpression',
                                      operator: '+=',
                                      left: { type: 'Identifier', name: '_rep' },
                                      right: { type: 'Literal', value: 1, raw: '1' } } } ] },
                           rest: null,
                           generator: false,
                           expression: false } } ],
                   tainted: false,
                   stack: true,
                   scope: [Circular] } } },
          taints: { __data: {} },
          dynamic: false,
          block: 
           { type: 'FunctionExpression',
             id: { type: 'Identifier', name: 'replyA' },
             params: 
              [ { type: 'Identifier', name: 'req' },
                { type: 'Identifier', name: 'res' } ],
             defaults: [],
             body: 
              { type: 'BlockStatement',
                body: 
                 [ { type: 'ExpressionStatement',
                     expression: 
                      { type: 'CallExpression',
                        callee: 
                         { type: 'MemberExpression',
                           computed: false,
                           object: { type: 'Identifier', name: 'res' },
                           property: { type: 'Identifier', name: 'send' } },
                        arguments: 
                         [ { type: 'BinaryExpression',
                             operator: '+',
                             left: { type: 'Literal', value: '', raw: '""' },
                             right: { type: 'Identifier', name: '_rep' } } ] } },
                   { type: 'ExpressionStatement',
                     expression: 
                      { type: 'AssignmentExpression',
                        operator: '+=',
                        left: { type: 'Identifier', name: '_rep' },
                        right: { type: 'Literal', value: 1, raw: '1' } } } ] },
             rest: null,
             generator: false,
             expression: false },
          through: 
           [ { identifier: { type: 'Identifier', name: '_rep' },
               from: [Circular],
               tainted: false,
               resolved: null,
               flag: 1,
               __maybeImplicitGlobal: undefined },
             { identifier: { type: 'Identifier', name: '_rep' },
               from: [Circular],
               tainted: false,
               resolved: null,
               flag: 3,
               writeExpr: { type: 'Literal', value: 1, raw: '1' },
               __maybeImplicitGlobal: undefined } ],
          variables: 
           [ { name: 'replyA',
               identifiers: [ { type: 'Identifier', name: 'replyA' } ],
               references: [],
               defs: 
                [ { type: 'FunctionName',
                    name: { type: 'Identifier', name: 'replyA' },
                    node: 
                     { type: 'FunctionExpression',
                       id: { type: 'Identifier', name: 'replyA' },
                       params: 
                        [ { type: 'Identifier', name: 'req' },
                          { type: 'Identifier', name: 'res' } ],
                       defaults: [],
                       body: 
                        { type: 'BlockStatement',
                          body: 
                           [ { type: 'ExpressionStatement',
                               expression: 
                                { type: 'CallExpression',
                                  callee: 
                                   { type: 'MemberExpression',
                                     computed: false,
                                     object: { type: 'Identifier', name: 'res' },
                                     property: { type: 'Identifier', name: 'send' } },
                                  arguments: 
                                   [ { type: 'BinaryExpression',
                                       operator: '+',
                                       left: { type: 'Literal', value: '', raw: '""' },
                                       right: { type: 'Identifier', name: '_rep' } } ] } },
                             { type: 'ExpressionStatement',
                               expression: 
                                { type: 'AssignmentExpression',
                                  operator: '+=',
                                  left: { type: 'Identifier', name: '_rep' },
                                  right: { type: 'Literal', value: 1, raw: '1' } } } ] },
                       rest: null,
                       generator: false,
                       expression: false } } ],
               tainted: false,
               stack: true,
               scope: [Circular] } ],
          references: [],
          left: null,
          variableScope: [Circular],
          functionExpressionScope: true,
          directCallToEvalScope: false,
          thisFound: false,
          upper: 
           { type: 'global',
             set: 
              { __data: 
                 { '$app': 
                    { name: 'app',
                      identifiers: [ { type: 'Identifier', name: 'app' } ],
                      references: [],
                      defs: 
                       [ { type: 'Variable',
                           name: { type: 'Identifier', name: 'app' },
                           node: 
                            { type: 'VariableDeclarator',
                              id: { type: 'Identifier', name: 'app' },
                              init: 
                               { type: 'CallExpression',
                                 callee: 
                                  { type: 'CallExpression',
                                    callee: { type: 'Identifier', name: 'require' },
                                    arguments: [ { type: 'Literal', value: 'express', raw: '\'express\'' } ] },
                                 arguments: [] } },
                           index: 0,
                           parent: 
                            { type: 'VariableDeclaration',
                              declarations: 
                               [ { type: 'VariableDeclarator',
                                   id: { type: 'Identifier', name: 'app' },
                                   init: 
                                    { type: 'CallExpression',
                                      callee: 
                                       { type: 'CallExpression',
                                         callee: { type: 'Identifier', name: 'require' },
                                         arguments: [ { type: 'Literal', value: 'express', raw: '\'express\'' } ] },
                                      arguments: [] } } ],
                              kind: 'var' } } ],
                      tainted: false,
                      stack: true,
                      scope: [Circular] },
                   '$_rep': 
                    { name: '_rep',
                      identifiers: [ { type: 'Identifier', name: '_rep' } ],
                      references: [],
                      defs: 
                       [ { type: 'Variable',
                           name: { type: 'Identifier', name: '_rep' },
                           node: 
                            { type: 'VariableDeclarator',
                              id: { type: 'Identifier', name: '_rep' },
                              init: { type: 'Literal', value: 42, raw: '42' } },
                           index: 0,
                           parent: 
                            { type: 'VariableDeclaration',
                              declarations: 
                               [ { type: 'VariableDeclarator',
                                   id: { type: 'Identifier', name: '_rep' },
                                   init: { type: 'Literal', value: 42, raw: '42' } } ],
                              kind: 'var' } } ],
                      tainted: false,
                      stack: true,
                      scope: [Circular] } } },
             taints: { __data: {} },
             dynamic: true,
             block: 
              { type: 'Program',
                body: 
                 [ { type: 'VariableDeclaration',
                     declarations: 
                      [ { type: 'VariableDeclarator',
                          id: { type: 'Identifier', name: 'app' },
                          init: 
                           { type: 'CallExpression',
                             callee: 
                              { type: 'CallExpression',
                                callee: { type: 'Identifier', name: 'require' },
                                arguments: [ { type: 'Literal', value: 'express', raw: '\'express\'' } ] },
                             arguments: [] } } ],
                     kind: 'var' },
                   { type: 'VariableDeclaration',
                     declarations: 
                      [ { type: 'VariableDeclarator',
                          id: { type: 'Identifier', name: '_rep' },
                          init: { type: 'Literal', value: 42, raw: '42' } } ],
                     kind: 'var' },
                   { type: 'ExpressionStatement',
                     expression: 
                      { type: 'CallExpression',
                        callee: 
                         { type: 'MemberExpression',
                           computed: false,
                           object: { type: 'Identifier', name: 'app' },
                           property: { type: 'Identifier', name: 'get' } },
                        arguments: 
                         [ { type: 'Literal', value: '/A', raw: '"/A"' },
                           { type: 'FunctionExpression',
                             id: { type: 'Identifier', name: 'replyA' },
                             params: 
                              [ { type: 'Identifier', name: 'req' },
                                { type: 'Identifier', name: 'res' } ],
                             defaults: [],
                             body: 
                              { type: 'BlockStatement',
                                body: 
                                 [ { type: 'ExpressionStatement',
                                     expression: 
                                      { type: 'CallExpression',
                                        callee: 
                                         { type: 'MemberExpression',
                                           computed: false,
                                           object: { type: 'Identifier', name: 'res' },
                                           property: { type: 'Identifier', name: 'send' } },
                                        arguments: 
                                         [ { type: 'BinaryExpression',
                                             operator: '+',
                                             left: { type: 'Literal', value: '', raw: '""' },
                                             right: { type: 'Identifier', name: '_rep' } } ] } },
                                   { type: 'ExpressionStatement',
                                     expression: 
                                      { type: 'AssignmentExpression',
                                        operator: '+=',
                                        left: { type: 'Identifier', name: '_rep' },
                                        right: { type: 'Literal', value: 1, raw: '1' } } } ] },
                             rest: null,
                             generator: false,
                             expression: false } ] } },
                   { type: 'ExpressionStatement',
                     expression: 
                      { type: 'CallExpression',
                        callee: 
                         { type: 'MemberExpression',
                           computed: false,
                           object: { type: 'Identifier', name: 'app' },
                           property: { type: 'Identifier', name: 'get' } },
                        arguments: 
                         [ { type: 'Literal', value: '/B', raw: '"/B"' },
                           { type: 'FunctionExpression',
                             id: { type: 'Identifier', name: 'replyB' },
                             params: 
                              [ { type: 'Identifier', name: 'req' },
                                { type: 'Identifier', name: 'res' } ],
                             defaults: [],
                             body: 
                              { type: 'BlockStatement',
                                body: 
                                 [ { type: 'ExpressionStatement',
                                     expression: 
                                      { type: 'CallExpression',
                                        callee: 
                                         { type: 'MemberExpression',
                                           computed: false,
                                           object: { type: 'Identifier', name: 'res' },
                                           property: { type: 'Identifier', name: 'send' } },
                                        arguments: 
                                         [ { type: 'BinaryExpression',
                                             operator: '+',
                                             left: { type: 'Literal', value: '', raw: '""' },
                                             right: { type: 'Identifier', name: '_rep' } } ] } },
                                   { type: 'ExpressionStatement',
                                     expression: 
                                      { type: 'AssignmentExpression',
                                        operator: '+=',
                                        left: { type: 'Identifier', name: '_rep' },
                                        right: { type: 'Literal', value: 2, raw: '2' } } } ] },
                             rest: null,
                             generator: false,
                             expression: false } ] } },
                   { type: 'IfStatement',
                     test: 
                      { type: 'UnaryExpression',
                        operator: '!',
                        argument: 
                         { type: 'MemberExpression',
                           computed: false,
                           object: { type: 'Identifier', name: 'module' },
                           property: { type: 'Identifier', name: 'parent' } },
                        prefix: true },
                     consequent: 
                      { type: 'BlockStatement',
                        body: 
                         [ { type: 'ExpressionStatement',
                             expression: 
                              { type: 'CallExpression',
                                callee: 
                                 { type: 'MemberExpression',
                                   computed: false,
                                   object: { type: 'Identifier', name: 'app' },
                                   property: { type: 'Identifier', name: 'listen' } },
                                arguments: [ { type: 'Literal', value: 8080, raw: '8080' } ] } },
                           { type: 'ExpressionStatement',
                             expression: 
                              { type: 'CallExpression',
                                callee: 
                                 { type: 'MemberExpression',
                                   computed: false,
                                   object: { type: 'Identifier', name: 'console' },
                                   property: { type: 'Identifier', name: 'log' } },
                                arguments: 
                                 [ { type: 'Literal',
                                     value: '>> listening 8080',
                                     raw: '">> listening 8080"' } ] } } ] },
                     alternate: null },
                   { type: 'ExpressionStatement',
                     expression: 
                      { type: 'AssignmentExpression',
                        operator: '=',
                        left: 
                         { type: 'MemberExpression',
                           computed: false,
                           object: { type: 'Identifier', name: 'exports' },
                           property: { type: 'Identifier', name: 'app' } },
                        right: { type: 'Identifier', name: 'app' } } } ] },
             through: 
              [ { identifier: { type: 'Identifier', name: 'app' },
                  from: [Circular],
                  tainted: false,
                  resolved: null,
                  flag: 2,
                  writeExpr: 
                   { type: 'CallExpression',
                     callee: 
                      { type: 'CallExpression',
                        callee: { type: 'Identifier', name: 'require' },
                        arguments: [ { type: 'Literal', value: 'express', raw: '\'express\'' } ] },
                     arguments: [] },
                  __maybeImplicitGlobal: false },
                { identifier: { type: 'Identifier', name: 'require' },
                  from: [Circular],
                  tainted: false,
                  resolved: null,
                  flag: 1,
                  __maybeImplicitGlobal: undefined },
                { identifier: { type: 'Identifier', name: '_rep' },
                  from: [Circular],
                  tainted: false,
                  resolved: null,
                  flag: 2,
                  writeExpr: { type: 'Literal', value: 42, raw: '42' },
                  __maybeImplicitGlobal: false },
                { identifier: { type: 'Identifier', name: 'app' },
                  from: [Circular],
                  tainted: false,
                  resolved: null,
                  flag: 1,
                  __maybeImplicitGlobal: undefined },
                { identifier: { type: 'Identifier', name: '_rep' },
                  from: [Circular],
                  tainted: false,
                  resolved: null,
                  flag: 1,
                  __maybeImplicitGlobal: undefined },
                { identifier: { type: 'Identifier', name: '_rep' },
                  from: [Circular],
                  tainted: false,
                  resolved: null,
                  flag: 3,
                  writeExpr: { type: 'Literal', value: 1, raw: '1' },
                  __maybeImplicitGlobal: undefined },
                { identifier: { type: 'Identifier', name: 'app' },
                  from: [Circular],
                  tainted: false,
                  resolved: null,
                  flag: 1,
                  __maybeImplicitGlobal: undefined },
                { identifier: { type: 'Identifier', name: '_rep' },
                  from: 
                   { type: 'function',
                     set: 
                      { __data: 
                         { '$arguments': 
                            { name: 'arguments',
                              identifiers: [],
                              references: [],
                              defs: [],
                              tainted: false,
                              stack: true,
                              scope: [Circular] },
                           '$req': 
                            { name: 'req',
                              identifiers: [ { type: 'Identifier', name: 'req' } ],
                              references: [],
                              defs: 
                               [ { type: 'Parameter',
                                   name: { type: 'Identifier', name: 'req' },
                                   node: 
                                    { type: 'FunctionExpression',
                                      id: { type: 'Identifier', name: 'replyB' },
                                      params: 
                                       [ { type: 'Identifier', name: 'req' },
                                         { type: 'Identifier', name: 'res' } ],
                                      defaults: [],
                                      body: 
                                       { type: 'BlockStatement',
                                         body: 
                                          [ { type: 'ExpressionStatement',
                                              expression: 
                                               { type: 'CallExpression',
                                                 callee: 
                                                  { type: 'MemberExpression',
                                                    computed: false,
                                                    object: { type: 'Identifier', name: 'res' },
                                                    property: { type: 'Identifier', name: 'send' } },
                                                 arguments: 
                                                  [ { type: 'BinaryExpression',
                                                      operator: '+',
                                                      left: { type: 'Literal', value: '', raw: '""' },
                                                      right: { type: 'Identifier', name: '_rep' } } ] } },
                                            { type: 'ExpressionStatement',
                                              expression: 
                                               { type: 'AssignmentExpression',
                                                 operator: '+=',
                                                 left: { type: 'Identifier', name: '_rep' },
                                                 right: { type: 'Literal', value: 2, raw: '2' } } } ] },
                                      rest: null,
                                      generator: false,
                                      expression: false },
                                   index: 0 } ],
                              tainted: false,
                              stack: true,
                              scope: [Circular] },
                           '$res': 
                            { name: 'res',
                              identifiers: [ { type: 'Identifier', name: 'res' } ],
                              references: 
                               [ { identifier: { type: 'Identifier', name: 'res' },
                                   from: [Circular],
                                   tainted: false,
                                   resolved: [Circular],
                                   flag: 1,
                                   __maybeImplicitGlobal: undefined } ],
                              defs: 
                               [ { type: 'Parameter',
                                   name: { type: 'Identifier', name: 'res' },
                                   node: 
                                    { type: 'FunctionExpression',
                                      id: { type: 'Identifier', name: 'replyB' },
                                      params: 
                                       [ { type: 'Identifier', name: 'req' },
                                         { type: 'Identifier', name: 'res' } ],
                                      defaults: [],
                                      body: 
                                       { type: 'BlockStatement',
                                         body: 
                                          [ { type: 'ExpressionStatement',
                                              expression: 
                                               { type: 'CallExpression',
                                                 callee: 
                                                  { type: 'MemberExpression',
                                                    computed: false,
                                                    object: { type: 'Identifier', name: 'res' },
                                                    property: { type: 'Identifier', name: 'send' } },
                                                 arguments: 
                                                  [ { type: 'BinaryExpression',
                                                      operator: '+',
                                                      left: { type: 'Literal', value: '', raw: '""' },
                                                      right: { type: 'Identifier', name: '_rep' } } ] } },
                                            { type: 'ExpressionStatement',
                                              expression: 
                                               { type: 'AssignmentExpression',
                                                 operator: '+=',
                                                 left: { type: 'Identifier', name: '_rep' },
                                                 right: { type: 'Literal', value: 2, raw: '2' } } } ] },
                                      rest: null,
                                      generator: false,
                                      expression: false },
                                   index: 1 } ],
                              tainted: false,
                              stack: true,
                              scope: [Circular] } } },
                     taints: { __data: { '$arguments': true } },
                     dynamic: false,
                     block: 
                      { type: 'FunctionExpression',
                        id: { type: 'Identifier', name: 'replyB' },
                        params: 
                         [ { type: 'Identifier', name: 'req' },
                           { type: 'Identifier', name: 'res' } ],
                        defaults: [],
                        body: 
                         { type: 'BlockStatement',
                           body: 
                            [ { type: 'ExpressionStatement',
                                expression: 
                                 { type: 'CallExpression',
                                   callee: 
                                    { type: 'MemberExpression',
                                      computed: false,
                                      object: { type: 'Identifier', name: 'res' },
                                      property: { type: 'Identifier', name: 'send' } },
                                   arguments: 
                                    [ { type: 'BinaryExpression',
                                        operator: '+',
                                        left: { type: 'Literal', value: '', raw: '""' },
                                        right: { type: 'Identifier', name: '_rep' } } ] } },
                              { type: 'ExpressionStatement',
                                expression: 
                                 { type: 'AssignmentExpression',
                                   operator: '+=',
                                   left: { type: 'Identifier', name: '_rep' },
                                   right: { type: 'Literal', value: 2, raw: '2' } } } ] },
                        rest: null,
                        generator: false,
                        expression: false },
                     through: 
                      [ [Circular],
                        { identifier: { type: 'Identifier', name: '_rep' },
                          from: [Circular],
                          tainted: false,
                          resolved: null,
                          flag: 3,
                          writeExpr: { type: 'Literal', value: 2, raw: '2' },
                          __maybeImplicitGlobal: undefined } ],
                     variables: 
                      [ { name: 'arguments',
                          identifiers: [],
                          references: [],
                          defs: [],
                          tainted: false,
                          stack: true,
                          scope: [Circular] },
                        { name: 'req',
                          identifiers: [ { type: 'Identifier', name: 'req' } ],
                          references: [],
                          defs: 
                           [ { type: 'Parameter',
                               name: { type: 'Identifier', name: 'req' },
                               node: 
                                { type: 'FunctionExpression',
                                  id: { type: 'Identifier', name: 'replyB' },
                                  params: 
                                   [ { type: 'Identifier', name: 'req' },
                                     { type: 'Identifier', name: 'res' } ],
                                  defaults: [],
                                  body: 
                                   { type: 'BlockStatement',
                                     body: 
                                      [ { type: 'ExpressionStatement',
                                          expression: 
                                           { type: 'CallExpression',
                                             callee: 
                                              { type: 'MemberExpression',
                                                computed: false,
                                                object: { type: 'Identifier', name: 'res' },
                                                property: { type: 'Identifier', name: 'send' } },
                                             arguments: 
                                              [ { type: 'BinaryExpression',
                                                  operator: '+',
                                                  left: { type: 'Literal', value: '', raw: '""' },
                                                  right: { type: 'Identifier', name: '_rep' } } ] } },
                                        { type: 'ExpressionStatement',
                                          expression: 
                                           { type: 'AssignmentExpression',
                                             operator: '+=',
                                             left: { type: 'Identifier', name: '_rep' },
                                             right: { type: 'Literal', value: 2, raw: '2' } } } ] },
                                  rest: null,
                                  generator: false,
                                  expression: false },
                               index: 0 } ],
                          tainted: false,
                          stack: true,
                          scope: [Circular] },
                        { name: 'res',
                          identifiers: [ { type: 'Identifier', name: 'res' } ],
                          references: 
                           [ { identifier: { type: 'Identifier', name: 'res' },
                               from: [Circular],
                               tainted: false,
                               resolved: [Circular],
                               flag: 1,
                               __maybeImplicitGlobal: undefined } ],
                          defs: 
                           [ { type: 'Parameter',
                               name: { type: 'Identifier', name: 'res' },
                               node: 
                                { type: 'FunctionExpression',
                                  id: { type: 'Identifier', name: 'replyB' },
                                  params: 
                                   [ { type: 'Identifier', name: 'req' },
                                     { type: 'Identifier', name: 'res' } ],
                                  defaults: [],
                                  body: 
                                   { type: 'BlockStatement',
                                     body: 
                                      [ { type: 'ExpressionStatement',
                                          expression: 
                                           { type: 'CallExpression',
                                             callee: 
                                              { type: 'MemberExpression',
                                                computed: false,
                                                object: { type: 'Identifier', name: 'res' },
                                                property: { type: 'Identifier', name: 'send' } },
                                             arguments: 
                                              [ { type: 'BinaryExpression',
                                                  operator: '+',
                                                  left: { type: 'Literal', value: '', raw: '""' },
                                                  right: { type: 'Identifier', name: '_rep' } } ] } },
                                        { type: 'ExpressionStatement',
                                          expression: 
                                           { type: 'AssignmentExpression',
                                             operator: '+=',
                                             left: { type: 'Identifier', name: '_rep' },
                                             right: { type: 'Literal', value: 2, raw: '2' } } } ] },
                                  rest: null,
                                  generator: false,
                                  expression: false },
                               index: 1 } ],
                          tainted: false,
                          stack: true,
                          scope: [Circular] } ],
                     references: 
                      [ { identifier: { type: 'Identifier', name: 'res' },
                          from: [Circular],
                          tainted: false,
                          resolved: 
                           { name: 'res',
                             identifiers: [ { type: 'Identifier', name: 'res' } ],
                             references: [ [Circular] ],
                             defs: 
                              [ { type: 'Parameter',
                                  name: { type: 'Identifier', name: 'res' },
                                  node: 
                                   { type: 'FunctionExpression',
                                     id: { type: 'Identifier', name: 'replyB' },
                                     params: 
                                      [ { type: 'Identifier', name: 'req' },
                                        { type: 'Identifier', name: 'res' } ],
                                     defaults: [],
                                     body: 
                                      { type: 'BlockStatement',
                                        body: 
                                         [ { type: 'ExpressionStatement',
                                             expression: 
                                              { type: 'CallExpression',
                                                callee: 
                                                 { type: 'MemberExpression',
                                                   computed: false,
                                                   object: { type: 'Identifier', name: 'res' },
                                                   property: { type: 'Identifier', name: 'send' } },
                                                arguments: 
                                                 [ { type: 'BinaryExpression',
                                                     operator: '+',
                                                     left: { type: 'Literal', value: '', raw: '""' },
                                                     right: { type: 'Identifier', name: '_rep' } } ] } },
                                           { type: 'ExpressionStatement',
                                             expression: 
                                              { type: 'AssignmentExpression',
                                                operator: '+=',
                                                left: { type: 'Identifier', name: '_rep' },
                                                right: { type: 'Literal', value: 2, raw: '2' } } } ] },
                                     rest: null,
                                     generator: false,
                                     expression: false },
                                  index: 1 } ],
                             tainted: false,
                             stack: true,
                             scope: [Circular] },
                          flag: 1,
                          __maybeImplicitGlobal: undefined },
                        [Circular],
                        { identifier: { type: 'Identifier', name: '_rep' },
                          from: [Circular],
                          tainted: false,
                          resolved: null,
                          flag: 3,
                          writeExpr: { type: 'Literal', value: 2, raw: '2' },
                          __maybeImplicitGlobal: undefined } ],
                     left: null,
                     variableScope: [Circular],
                     functionExpressionScope: false,
                     directCallToEvalScope: false,
                     thisFound: false,
                     upper: 
                      { type: 'function',
                        set: 
                         { __data: 
                            { '$replyB': 
                               { name: 'replyB',
                                 identifiers: [ { type: 'Identifier', name: 'replyB' } ],
                                 references: [],
                                 defs: 
                                  [ { type: 'FunctionName',
                                      name: { type: 'Identifier', name: 'replyB' },
                                      node: 
                                       { type: 'FunctionExpression',
                                         id: { type: 'Identifier', name: 'replyB' },
                                         params: 
                                          [ { type: 'Identifier', name: 'req' },
                                            { type: 'Identifier', name: 'res' } ],
                                         defaults: [],
                                         body: 
                                          { type: 'BlockStatement',
                                            body: 
                                             [ { type: 'ExpressionStatement',
                                                 expression: 
                                                  { type: 'CallExpression',
                                                    callee: 
                                                     { type: 'MemberExpression',
                                                       computed: false,
                                                       object: { type: 'Identifier', name: 'res' },
                                                       property: { type: 'Identifier', name: 'send' } },
                                                    arguments: 
                                                     [ { type: 'BinaryExpression',
                                                         operator: '+',
                                                         left: { type: 'Literal', value: '', raw: '""' },
                                                         right: { type: 'Identifier', name: '_rep' } } ] } },
                                               { type: 'ExpressionStatement',
                                                 expression: 
                                                  { type: 'AssignmentExpression',
                                                    operator: '+=',
                                                    left: { type: 'Identifier', name: '_rep' },
                                                    right: { type: 'Literal', value: 2, raw: '2' } } } ] },
                                         rest: null,
                                         generator: false,
                                         expression: false } } ],
                                 tainted: false,
                                 stack: true,
                                 scope: [Circular] } } },
                        taints: { __data: {} },
                        dynamic: false,
                        block: 
                         { type: 'FunctionExpression',
                           id: { type: 'Identifier', name: 'replyB' },
                           params: 
                            [ { type: 'Identifier', name: 'req' },
                              { type: 'Identifier', name: 'res' } ],
                           defaults: [],
                           body: 
                            { type: 'BlockStatement',
                              body: 
                               [ { type: 'ExpressionStatement',
                                   expression: 
                                    { type: 'CallExpression',
                                      callee: 
                                       { type: 'MemberExpression',
                                         computed: false,
                                         object: { type: 'Identifier', name: 'res' },
                                         property: { type: 'Identifier', name: 'send' } },
                                      arguments: 
                                       [ { type: 'BinaryExpression',
                                           operator: '+',
                                           left: { type: 'Literal', value: '', raw: '""' },
                                           right: { type: 'Identifier', name: '_rep' } } ] } },
                                 { type: 'ExpressionStatement',
                                   expression: 
                                    { type: 'AssignmentExpression',
                                      operator: '+=',
                                      left: { type: 'Identifier', name: '_rep' },
                                      right: { type: 'Literal', value: 2, raw: '2' } } } ] },
                           rest: null,
                           generator: false,
                           expression: false },
                        through: 
                         [ [Circular],
                           { identifier: { type: 'Identifier', name: '_rep' },
                             from: [Circular],
                             tainted: false,
                             resolved: null,
                             flag: 3,
                             writeExpr: { type: 'Literal', value: 2, raw: '2' },
                             __maybeImplicitGlobal: undefined } ],
                        variables: 
                         [ { name: 'replyB',
                             identifiers: [ { type: 'Identifier', name: 'replyB' } ],
                             references: [],
                             defs: 
                              [ { type: 'FunctionName',
                                  name: { type: 'Identifier', name: 'replyB' },
                                  node: 
                                   { type: 'FunctionExpression',
                                     id: { type: 'Identifier', name: 'replyB' },
                                     params: 
                                      [ { type: 'Identifier', name: 'req' },
                                        { type: 'Identifier', name: 'res' } ],
                                     defaults: [],
                                     body: 
                                      { type: 'BlockStatement',
                                        body: 
                                         [ { type: 'ExpressionStatement',
                                             expression: 
                                              { type: 'CallExpression',
                                                callee: 
                                                 { type: 'MemberExpression',
                                                   computed: false,
                                                   object: { type: 'Identifier', name: 'res' },
                                                   property: { type: 'Identifier', name: 'send' } },
                                                arguments: 
                                                 [ { type: 'BinaryExpression',
                                                     operator: '+',
                                                     left: { type: 'Literal', value: '', raw: '""' },
                                                     right: { type: 'Identifier', name: '_rep' } } ] } },
                                           { type: 'ExpressionStatement',
                                             expression: 
                                              { type: 'AssignmentExpression',
                                                operator: '+=',
                                                left: { type: 'Identifier', name: '_rep' },
                                                right: { type: 'Literal', value: 2, raw: '2' } } } ] },
                                     rest: null,
                                     generator: false,
                                     expression: false } } ],
                             tainted: false,
                             stack: true,
                             scope: [Circular] } ],
                        references: [],
                        left: null,
                        variableScope: [Circular],
                        functionExpressionScope: true,
                        directCallToEvalScope: false,
                        thisFound: false,
                        upper: [Circular],
                        isStrict: false,
                        childScopes: [ [Circular] ] },
                     isStrict: false,
                     childScopes: [] },
                  tainted: false,
                  resolved: null,
                  flag: 1,
                  __maybeImplicitGlobal: undefined },
                { identifier: { type: 'Identifier', name: '_rep' },
                  from: 
                   { type: 'function',
                     set: 
                      { __data: 
                         { '$arguments': 
                            { name: 'arguments',
                              identifiers: [],
                              references: [],
                              defs: [],
                              tainted: false,
                              stack: true,
                              scope: [Circular] },
                           '$req': 
                            { name: 'req',
                              identifiers: [ { type: 'Identifier', name: 'req' } ],
                              references: [],
                              defs: 
                               [ { type: 'Parameter',
                                   name: { type: 'Identifier', name: 'req' },
                                   node: 
                                    { type: 'FunctionExpression',
                                      id: { type: 'Identifier', name: 'replyB' },
                                      params: 
                                       [ { type: 'Identifier', name: 'req' },
                                         { type: 'Identifier', name: 'res' } ],
                                      defaults: [],
                                      body: 
                                       { type: 'BlockStatement',
                                         body: 
                                          [ { type: 'ExpressionStatement',
                                              expression: 
                                               { type: 'CallExpression',
                                                 callee: 
                                                  { type: 'MemberExpression',
                                                    computed: false,
                                                    object: { type: 'Identifier', name: 'res' },
                                                    property: { type: 'Identifier', name: 'send' } },
                                                 arguments: 
                                                  [ { type: 'BinaryExpression',
                                                      operator: '+',
                                                      left: { type: 'Literal', value: '', raw: '""' },
                                                      right: { type: 'Identifier', name: '_rep' } } ] } },
                                            { type: 'ExpressionStatement',
                                              expression: 
                                               { type: 'AssignmentExpression',
                                                 operator: '+=',
                                                 left: { type: 'Identifier', name: '_rep' },
                                                 right: { type: 'Literal', value: 2, raw: '2' } } } ] },
                                      rest: null,
                                      generator: false,
                                      expression: false },
                                   index: 0 } ],
                              tainted: false,
                              stack: true,
                              scope: [Circular] },
                           '$res': 
                            { name: 'res',
                              identifiers: [ { type: 'Identifier', name: 'res' } ],
                              references: 
                               [ { identifier: { type: 'Identifier', name: 'res' },
                                   from: [Circular],
                                   tainted: false,
                                   resolved: [Circular],
                                   flag: 1,
                                   __maybeImplicitGlobal: undefined } ],
                              defs: 
                               [ { type: 'Parameter',
                                   name: { type: 'Identifier', name: 'res' },
                                   node: 
                                    { type: 'FunctionExpression',
                                      id: { type: 'Identifier', name: 'replyB' },
                                      params: 
                                       [ { type: 'Identifier', name: 'req' },
                                         { type: 'Identifier', name: 'res' } ],
                                      defaults: [],
                                      body: 
                                       { type: 'BlockStatement',
                                         body: 
                                          [ { type: 'ExpressionStatement',
                                              expression: 
                                               { type: 'CallExpression',
                                                 callee: 
                                                  { type: 'MemberExpression',
                                                    computed: false,
                                                    object: { type: 'Identifier', name: 'res' },
                                                    property: { type: 'Identifier', name: 'send' } },
                                                 arguments: 
                                                  [ { type: 'BinaryExpression',
                                                      operator: '+',
                                                      left: { type: 'Literal', value: '', raw: '""' },
                                                      right: { type: 'Identifier', name: '_rep' } } ] } },
                                            { type: 'ExpressionStatement',
                                              expression: 
                                               { type: 'AssignmentExpression',
                                                 operator: '+=',
                                                 left: { type: 'Identifier', name: '_rep' },
                                                 right: { type: 'Literal', value: 2, raw: '2' } } } ] },
                                      rest: null,
                                      generator: false,
                                      expression: false },
                                   index: 1 } ],
                              tainted: false,
                              stack: true,
                              scope: [Circular] } } },
                     taints: { __data: { '$arguments': true } },
                     dynamic: false,
                     block: 
                      { type: 'FunctionExpression',
                        id: { type: 'Identifier', name: 'replyB' },
                        params: 
                         [ { type: 'Identifier', name: 'req' },
                           { type: 'Identifier', name: 'res' } ],
                        defaults: [],
                        body: 
                         { type: 'BlockStatement',
                           body: 
                            [ { type: 'ExpressionStatement',
                                expression: 
                                 { type: 'CallExpression',
                                   callee: 
                                    { type: 'MemberExpression',
                                      computed: false,
                                      object: { type: 'Identifier', name: 'res' },
                                      property: { type: 'Identifier', name: 'send' } },
                                   arguments: 
                                    [ { type: 'BinaryExpression',
                                        operator: '+',
                                        left: { type: 'Literal', value: '', raw: '""' },
                                        right: { type: 'Identifier', name: '_rep' } } ] } },
                              { type: 'ExpressionStatement',
                                expression: 
                                 { type: 'AssignmentExpression',
                                   operator: '+=',
                                   left: { type: 'Identifier', name: '_rep' },
                                   right: { type: 'Literal', value: 2, raw: '2' } } } ] },
                        rest: null,
                        generator: false,
                        expression: false },
                     through: 
                      [ { identifier: { type: 'Identifier', name: '_rep' },
                          from: [Circular],
                          tainted: false,
                          resolved: null,
                          flag: 1,
                          __maybeImplicitGlobal: undefined },
                        [Circular] ],
                     variables: 
                      [ { name: 'arguments',
                          identifiers: [],
                          references: [],
                          defs: [],
                          tainted: false,
                          stack: true,
                          scope: [Circular] },
                        { name: 'req',
                          identifiers: [ { type: 'Identifier', name: 'req' } ],
                          references: [],
                          defs: 
                           [ { type: 'Parameter',
                               name: { type: 'Identifier', name: 'req' },
                               node: 
                                { type: 'FunctionExpression',
                                  id: { type: 'Identifier', name: 'replyB' },
                                  params: 
                                   [ { type: 'Identifier', name: 'req' },
                                     { type: 'Identifier', name: 'res' } ],
                                  defaults: [],
                                  body: 
                                   { type: 'BlockStatement',
                                     body: 
                                      [ { type: 'ExpressionStatement',
                                          expression: 
                                           { type: 'CallExpression',
                                             callee: 
                                              { type: 'MemberExpression',
                                                computed: false,
                                                object: { type: 'Identifier', name: 'res' },
                                                property: { type: 'Identifier', name: 'send' } },
                                             arguments: 
                                              [ { type: 'BinaryExpression',
                                                  operator: '+',
                                                  left: { type: 'Literal', value: '', raw: '""' },
                                                  right: { type: 'Identifier', name: '_rep' } } ] } },
                                        { type: 'ExpressionStatement',
                                          expression: 
                                           { type: 'AssignmentExpression',
                                             operator: '+=',
                                             left: { type: 'Identifier', name: '_rep' },
                                             right: { type: 'Literal', value: 2, raw: '2' } } } ] },
                                  rest: null,
                                  generator: false,
                                  expression: false },
                               index: 0 } ],
                          tainted: false,
                          stack: true,
                          scope: [Circular] },
                        { name: 'res',
                          identifiers: [ { type: 'Identifier', name: 'res' } ],
                          references: 
                           [ { identifier: { type: 'Identifier', name: 'res' },
                               from: [Circular],
                               tainted: false,
                               resolved: [Circular],
                               flag: 1,
                               __maybeImplicitGlobal: undefined } ],
                          defs: 
                           [ { type: 'Parameter',
                               name: { type: 'Identifier', name: 'res' },
                               node: 
                                { type: 'FunctionExpression',
                                  id: { type: 'Identifier', name: 'replyB' },
                                  params: 
                                   [ { type: 'Identifier', name: 'req' },
                                     { type: 'Identifier', name: 'res' } ],
                                  defaults: [],
                                  body: 
                                   { type: 'BlockStatement',
                                     body: 
                                      [ { type: 'ExpressionStatement',
                                          expression: 
                                           { type: 'CallExpression',
                                             callee: 
                                              { type: 'MemberExpression',
                                                computed: false,
                                                object: { type: 'Identifier', name: 'res' },
                                                property: { type: 'Identifier', name: 'send' } },
                                             arguments: 
                                              [ { type: 'BinaryExpression',
                                                  operator: '+',
                                                  left: { type: 'Literal', value: '', raw: '""' },
                                                  right: { type: 'Identifier', name: '_rep' } } ] } },
                                        { type: 'ExpressionStatement',
                                          expression: 
                                           { type: 'AssignmentExpression',
                                             operator: '+=',
                                             left: { type: 'Identifier', name: '_rep' },
                                             right: { type: 'Literal', value: 2, raw: '2' } } } ] },
                                  rest: null,
                                  generator: false,
                                  expression: false },
                               index: 1 } ],
                          tainted: false,
                          stack: true,
                          scope: [Circular] } ],
                     references: 
                      [ { identifier: { type: 'Identifier', name: 'res' },
                          from: [Circular],
                          tainted: false,
                          resolved: 
                           { name: 'res',
                             identifiers: [ { type: 'Identifier', name: 'res' } ],
                             references: [ [Circular] ],
                             defs: 
                              [ { type: 'Parameter',
                                  name: { type: 'Identifier', name: 'res' },
                                  node: 
                                   { type: 'FunctionExpression',
                                     id: { type: 'Identifier', name: 'replyB' },
                                     params: 
                                      [ { type: 'Identifier', name: 'req' },
                                        { type: 'Identifier', name: 'res' } ],
                                     defaults: [],
                                     body: 
                                      { type: 'BlockStatement',
                                        body: 
                                         [ { type: 'ExpressionStatement',
                                             expression: 
                                              { type: 'CallExpression',
                                                callee: 
                                                 { type: 'MemberExpression',
                                                   computed: false,
                                                   object: { type: 'Identifier', name: 'res' },
                                                   property: { type: 'Identifier', name: 'send' } },
                                                arguments: 
                                                 [ { type: 'BinaryExpression',
                                                     operator: '+',
                                                     left: { type: 'Literal', value: '', raw: '""' },
                                                     right: { type: 'Identifier', name: '_rep' } } ] } },
                                           { type: 'ExpressionStatement',
                                             expression: 
                                              { type: 'AssignmentExpression',
                                                operator: '+=',
                                                left: { type: 'Identifier', name: '_rep' },
                                                right: { type: 'Literal', value: 2, raw: '2' } } } ] },
                                     rest: null,
                                     generator: false,
                                     expression: false },
                                  index: 1 } ],
                             tainted: false,
                             stack: true,
                             scope: [Circular] },
                          flag: 1,
                          __maybeImplicitGlobal: undefined },
                        { identifier: { type: 'Identifier', name: '_rep' },
                          from: [Circular],
                          tainted: false,
                          resolved: null,
                          flag: 1,
                          __maybeImplicitGlobal: undefined },
                        [Circular] ],
                     left: null,
                     variableScope: [Circular],
                     functionExpressionScope: false,
                     directCallToEvalScope: false,
                     thisFound: false,
                     upper: 
                      { type: 'function',
                        set: 
                         { __data: 
                            { '$replyB': 
                               { name: 'replyB',
                                 identifiers: [ { type: 'Identifier', name: 'replyB' } ],
                                 references: [],
                                 defs: 
                                  [ { type: 'FunctionName',
                                      name: { type: 'Identifier', name: 'replyB' },
                                      node: 
                                       { type: 'FunctionExpression',
                                         id: { type: 'Identifier', name: 'replyB' },
                                         params: 
                                          [ { type: 'Identifier', name: 'req' },
                                            { type: 'Identifier', name: 'res' } ],
                                         defaults: [],
                                         body: 
                                          { type: 'BlockStatement',
                                            body: 
                                             [ { type: 'ExpressionStatement',
                                                 expression: 
                                                  { type: 'CallExpression',
                                                    callee: 
                                                     { type: 'MemberExpression',
                                                       computed: false,
                                                       object: { type: 'Identifier', name: 'res' },
                                                       property: { type: 'Identifier', name: 'send' } },
                                                    arguments: 
                                                     [ { type: 'BinaryExpression',
                                                         operator: '+',
                                                         left: { type: 'Literal', value: '', raw: '""' },
                                                         right: { type: 'Identifier', name: '_rep' } } ] } },
                                               { type: 'ExpressionStatement',
                                                 expression: 
                                                  { type: 'AssignmentExpression',
                                                    operator: '+=',
                                                    left: { type: 'Identifier', name: '_rep' },
                                                    right: { type: 'Literal', value: 2, raw: '2' } } } ] },
                                         rest: null,
                                         generator: false,
                                         expression: false } } ],
                                 tainted: false,
                                 stack: true,
                                 scope: [Circular] } } },
                        taints: { __data: {} },
                        dynamic: false,
                        block: 
                         { type: 'FunctionExpression',
                           id: { type: 'Identifier', name: 'replyB' },
                           params: 
                            [ { type: 'Identifier', name: 'req' },
                              { type: 'Identifier', name: 'res' } ],
                           defaults: [],
                           body: 
                            { type: 'BlockStatement',
                              body: 
                               [ { type: 'ExpressionStatement',
                                   expression: 
                                    { type: 'CallExpression',
                                      callee: 
                                       { type: 'MemberExpression',
                                         computed: false,
                                         object: { type: 'Identifier', name: 'res' },
                                         property: { type: 'Identifier', name: 'send' } },
                                      arguments: 
                                       [ { type: 'BinaryExpression',
                                           operator: '+',
                                           left: { type: 'Literal', value: '', raw: '""' },
                                           right: { type: 'Identifier', name: '_rep' } } ] } },
                                 { type: 'ExpressionStatement',
                                   expression: 
                                    { type: 'AssignmentExpression',
                                      operator: '+=',
                                      left: { type: 'Identifier', name: '_rep' },
                                      right: { type: 'Literal', value: 2, raw: '2' } } } ] },
                           rest: null,
                           generator: false,
                           expression: false },
                        through: 
                         [ { identifier: { type: 'Identifier', name: '_rep' },
                             from: [Circular],
                             tainted: false,
                             resolved: null,
                             flag: 1,
                             __maybeImplicitGlobal: undefined },
                           [Circular] ],
                        variables: 
                         [ { name: 'replyB',
                             identifiers: [ { type: 'Identifier', name: 'replyB' } ],
                             references: [],
                             defs: 
                              [ { type: 'FunctionName',
                                  name: { type: 'Identifier', name: 'replyB' },
                                  node: 
                                   { type: 'FunctionExpression',
                                     id: { type: 'Identifier', name: 'replyB' },
                                     params: 
                                      [ { type: 'Identifier', name: 'req' },
                                        { type: 'Identifier', name: 'res' } ],
                                     defaults: [],
                                     body: 
                                      { type: 'BlockStatement',
                                        body: 
                                         [ { type: 'ExpressionStatement',
                                             expression: 
                                              { type: 'CallExpression',
                                                callee: 
                                                 { type: 'MemberExpression',
                                                   computed: false,
                                                   object: { type: 'Identifier', name: 'res' },
                                                   property: { type: 'Identifier', name: 'send' } },
                                                arguments: 
                                                 [ { type: 'BinaryExpression',
                                                     operator: '+',
                                                     left: { type: 'Literal', value: '', raw: '""' },
                                                     right: { type: 'Identifier', name: '_rep' } } ] } },
                                           { type: 'ExpressionStatement',
                                             expression: 
                                              { type: 'AssignmentExpression',
                                                operator: '+=',
                                                left: { type: 'Identifier', name: '_rep' },
                                                right: { type: 'Literal', value: 2, raw: '2' } } } ] },
                                     rest: null,
                                     generator: false,
                                     expression: false } } ],
                             tainted: false,
                             stack: true,
                             scope: [Circular] } ],
                        references: [],
                        left: null,
                        variableScope: [Circular],
                        functionExpressionScope: true,
                        directCallToEvalScope: false,
                        thisFound: false,
                        upper: [Circular],
                        isStrict: false,
                        childScopes: [ [Circular] ] },
                     isStrict: false,
                     childScopes: [] },
                  tainted: false,
                  resolved: null,
                  flag: 3,
                  writeExpr: { type: 'Literal', value: 2, raw: '2' },
                  __maybeImplicitGlobal: undefined },
                { identifier: { type: 'Identifier', name: 'module' },
                  from: [Circular],
                  tainted: false,
                  resolved: null,
                  flag: 1,
                  __maybeImplicitGlobal: undefined },
                { identifier: { type: 'Identifier', name: 'app' },
                  from: [Circular],
                  tainted: false,
                  resolved: null,
                  flag: 1,
                  __maybeImplicitGlobal: undefined },
                { identifier: { type: 'Identifier', name: 'console' },
                  from: [Circular],
                  tainted: false,
                  resolved: null,
                  flag: 1,
                  __maybeImplicitGlobal: undefined },
                { identifier: { type: 'Identifier', name: 'app' },
                  from: [Circular],
                  tainted: false,
                  resolved: null,
                  flag: 1,
                  __maybeImplicitGlobal: undefined },
                { identifier: { type: 'Identifier', name: 'exports' },
                  from: [Circular],
                  tainted: false,
                  resolved: null,
                  flag: 1,
                  __maybeImplicitGlobal: undefined } ],
             variables: 
              [ { name: 'app',
                  identifiers: [ { type: 'Identifier', name: 'app' } ],
                  references: [],
                  defs: 
                   [ { type: 'Variable',
                       name: { type: 'Identifier', name: 'app' },
                       node: 
                        { type: 'VariableDeclarator',
                          id: { type: 'Identifier', name: 'app' },
                          init: 
                           { type: 'CallExpression',
                             callee: 
                              { type: 'CallExpression',
                                callee: { type: 'Identifier', name: 'require' },
                                arguments: [ { type: 'Literal', value: 'express', raw: '\'express\'' } ] },
                             arguments: [] } },
                       index: 0,
                       parent: 
                        { type: 'VariableDeclaration',
                          declarations: 
                           [ { type: 'VariableDeclarator',
                               id: { type: 'Identifier', name: 'app' },
                               init: 
                                { type: 'CallExpression',
                                  callee: 
                                   { type: 'CallExpression',
                                     callee: { type: 'Identifier', name: 'require' },
                                     arguments: [ { type: 'Literal', value: 'express', raw: '\'express\'' } ] },
                                  arguments: [] } } ],
                          kind: 'var' } } ],
                  tainted: false,
                  stack: true,
                  scope: [Circular] },
                { name: '_rep',
                  identifiers: [ { type: 'Identifier', name: '_rep' } ],
                  references: [],
                  defs: 
                   [ { type: 'Variable',
                       name: { type: 'Identifier', name: '_rep' },
                       node: 
                        { type: 'VariableDeclarator',
                          id: { type: 'Identifier', name: '_rep' },
                          init: { type: 'Literal', value: 42, raw: '42' } },
                       index: 0,
                       parent: 
                        { type: 'VariableDeclaration',
                          declarations: 
                           [ { type: 'VariableDeclarator',
                               id: { type: 'Identifier', name: '_rep' },
                               init: { type: 'Literal', value: 42, raw: '42' } } ],
                          kind: 'var' } } ],
                  tainted: false,
                  stack: true,
                  scope: [Circular] } ],
             references: 
              [ { identifier: { type: 'Identifier', name: 'app' },
                  from: [Circular],
                  tainted: false,
                  resolved: null,
                  flag: 2,
                  writeExpr: 
                   { type: 'CallExpression',
                     callee: 
                      { type: 'CallExpression',
                        callee: { type: 'Identifier', name: 'require' },
                        arguments: [ { type: 'Literal', value: 'express', raw: '\'express\'' } ] },
                     arguments: [] },
                  __maybeImplicitGlobal: false },
                { identifier: { type: 'Identifier', name: 'require' },
                  from: [Circular],
                  tainted: false,
                  resolved: null,
                  flag: 1,
                  __maybeImplicitGlobal: undefined },
                { identifier: { type: 'Identifier', name: '_rep' },
                  from: [Circular],
                  tainted: false,
                  resolved: null,
                  flag: 2,
                  writeExpr: { type: 'Literal', value: 42, raw: '42' },
                  __maybeImplicitGlobal: false },
                { identifier: { type: 'Identifier', name: 'app' },
                  from: [Circular],
                  tainted: false,
                  resolved: null,
                  flag: 1,
                  __maybeImplicitGlobal: undefined },
                { identifier: { type: 'Identifier', name: 'app' },
                  from: [Circular],
                  tainted: false,
                  resolved: null,
                  flag: 1,
                  __maybeImplicitGlobal: undefined },
                { identifier: { type: 'Identifier', name: 'module' },
                  from: [Circular],
                  tainted: false,
                  resolved: null,
                  flag: 1,
                  __maybeImplicitGlobal: undefined },
                { identifier: { type: 'Identifier', name: 'app' },
                  from: [Circular],
                  tainted: false,
                  resolved: null,
                  flag: 1,
                  __maybeImplicitGlobal: undefined },
                { identifier: { type: 'Identifier', name: 'console' },
                  from: [Circular],
                  tainted: false,
                  resolved: null,
                  flag: 1,
                  __maybeImplicitGlobal: undefined },
                { identifier: { type: 'Identifier', name: 'app' },
                  from: [Circular],
                  tainted: false,
                  resolved: null,
                  flag: 1,
                  __maybeImplicitGlobal: undefined },
                { identifier: { type: 'Identifier', name: 'exports' },
                  from: [Circular],
                  tainted: false,
                  resolved: null,
                  flag: 1,
                  __maybeImplicitGlobal: undefined } ],
             left: null,
             variableScope: [Circular],
             functionExpressionScope: false,
             directCallToEvalScope: false,
             thisFound: false,
             upper: null,
             isStrict: false,
             childScopes: 
              [ [Circular],
                { type: 'function',
                  set: 
                   { __data: 
                      { '$replyB': 
                         { name: 'replyB',
                           identifiers: [ { type: 'Identifier', name: 'replyB' } ],
                           references: [],
                           defs: 
                            [ { type: 'FunctionName',
                                name: { type: 'Identifier', name: 'replyB' },
                                node: 
                                 { type: 'FunctionExpression',
                                   id: { type: 'Identifier', name: 'replyB' },
                                   params: 
                                    [ { type: 'Identifier', name: 'req' },
                                      { type: 'Identifier', name: 'res' } ],
                                   defaults: [],
                                   body: 
                                    { type: 'BlockStatement',
                                      body: 
                                       [ { type: 'ExpressionStatement',
                                           expression: 
                                            { type: 'CallExpression',
                                              callee: 
                                               { type: 'MemberExpression',
                                                 computed: false,
                                                 object: { type: 'Identifier', name: 'res' },
                                                 property: { type: 'Identifier', name: 'send' } },
                                              arguments: 
                                               [ { type: 'BinaryExpression',
                                                   operator: '+',
                                                   left: { type: 'Literal', value: '', raw: '""' },
                                                   right: { type: 'Identifier', name: '_rep' } } ] } },
                                         { type: 'ExpressionStatement',
                                           expression: 
                                            { type: 'AssignmentExpression',
                                              operator: '+=',
                                              left: { type: 'Identifier', name: '_rep' },
                                              right: { type: 'Literal', value: 2, raw: '2' } } } ] },
                                   rest: null,
                                   generator: false,
                                   expression: false } } ],
                           tainted: false,
                           stack: true,
                           scope: [Circular] } } },
                  taints: { __data: {} },
                  dynamic: false,
                  block: 
                   { type: 'FunctionExpression',
                     id: { type: 'Identifier', name: 'replyB' },
                     params: 
                      [ { type: 'Identifier', name: 'req' },
                        { type: 'Identifier', name: 'res' } ],
                     defaults: [],
                     body: 
                      { type: 'BlockStatement',
                        body: 
                         [ { type: 'ExpressionStatement',
                             expression: 
                              { type: 'CallExpression',
                                callee: 
                                 { type: 'MemberExpression',
                                   computed: false,
                                   object: { type: 'Identifier', name: 'res' },
                                   property: { type: 'Identifier', name: 'send' } },
                                arguments: 
                                 [ { type: 'BinaryExpression',
                                     operator: '+',
                                     left: { type: 'Literal', value: '', raw: '""' },
                                     right: { type: 'Identifier', name: '_rep' } } ] } },
                           { type: 'ExpressionStatement',
                             expression: 
                              { type: 'AssignmentExpression',
                                operator: '+=',
                                left: { type: 'Identifier', name: '_rep' },
                                right: { type: 'Literal', value: 2, raw: '2' } } } ] },
                     rest: null,
                     generator: false,
                     expression: false },
                  through: 
                   [ { identifier: { type: 'Identifier', name: '_rep' },
                       from: 
                        { type: 'function',
                          set: 
                           { __data: 
                              { '$arguments': 
                                 { name: 'arguments',
                                   identifiers: [],
                                   references: [],
                                   defs: [],
                                   tainted: false,
                                   stack: true,
                                   scope: [Circular] },
                                '$req': 
                                 { name: 'req',
                                   identifiers: [ { type: 'Identifier', name: 'req' } ],
                                   references: [],
                                   defs: 
                                    [ { type: 'Parameter',
                                        name: { type: 'Identifier', name: 'req' },
                                        node: 
                                         { type: 'FunctionExpression',
                                           id: { type: 'Identifier', name: 'replyB' },
                                           params: 
                                            [ { type: 'Identifier', name: 'req' },
                                              { type: 'Identifier', name: 'res' } ],
                                           defaults: [],
                                           body: 
                                            { type: 'BlockStatement',
                                              body: 
                                               [ { type: 'ExpressionStatement',
                                                   expression: 
                                                    { type: 'CallExpression',
                                                      callee: 
                                                       { type: 'MemberExpression',
                                                         computed: false,
                                                         object: { type: 'Identifier', name: 'res' },
                                                         property: { type: 'Identifier', name: 'send' } },
                                                      arguments: 
                                                       [ { type: 'BinaryExpression',
                                                           operator: '+',
                                                           left: { type: 'Literal', value: '', raw: '""' },
                                                           right: { type: 'Identifier', name: '_rep' } } ] } },
                                                 { type: 'ExpressionStatement',
                                                   expression: 
                                                    { type: 'AssignmentExpression',
                                                      operator: '+=',
                                                      left: { type: 'Identifier', name: '_rep' },
                                                      right: { type: 'Literal', value: 2, raw: '2' } } } ] },
                                           rest: null,
                                           generator: false,
                                           expression: false },
                                        index: 0 } ],
                                   tainted: false,
                                   stack: true,
                                   scope: [Circular] },
                                '$res': 
                                 { name: 'res',
                                   identifiers: [ { type: 'Identifier', name: 'res' } ],
                                   references: 
                                    [ { identifier: { type: 'Identifier', name: 'res' },
                                        from: [Circular],
                                        tainted: false,
                                        resolved: [Circular],
                                        flag: 1,
                                        __maybeImplicitGlobal: undefined } ],
                                   defs: 
                                    [ { type: 'Parameter',
                                        name: { type: 'Identifier', name: 'res' },
                                        node: 
                                         { type: 'FunctionExpression',
                                           id: { type: 'Identifier', name: 'replyB' },
                                           params: 
                                            [ { type: 'Identifier', name: 'req' },
                                              { type: 'Identifier', name: 'res' } ],
                                           defaults: [],
                                           body: 
                                            { type: 'BlockStatement',
                                              body: 
                                               [ { type: 'ExpressionStatement',
                                                   expression: 
                                                    { type: 'CallExpression',
                                                      callee: 
                                                       { type: 'MemberExpression',
                                                         computed: false,
                                                         object: { type: 'Identifier', name: 'res' },
                                                         property: { type: 'Identifier', name: 'send' } },
                                                      arguments: 
                                                       [ { type: 'BinaryExpression',
                                                           operator: '+',
                                                           left: { type: 'Literal', value: '', raw: '""' },
                                                           right: { type: 'Identifier', name: '_rep' } } ] } },
                                                 { type: 'ExpressionStatement',
                                                   expression: 
                                                    { type: 'AssignmentExpression',
                                                      operator: '+=',
                                                      left: { type: 'Identifier', name: '_rep' },
                                                      right: { type: 'Literal', value: 2, raw: '2' } } } ] },
                                           rest: null,
                                           generator: false,
                                           expression: false },
                                        index: 1 } ],
                                   tainted: false,
                                   stack: true,
                                   scope: [Circular] } } },
                          taints: { __data: { '$arguments': true } },
                          dynamic: false,
                          block: 
                           { type: 'FunctionExpression',
                             id: { type: 'Identifier', name: 'replyB' },
                             params: 
                              [ { type: 'Identifier', name: 'req' },
                                { type: 'Identifier', name: 'res' } ],
                             defaults: [],
                             body: 
                              { type: 'BlockStatement',
                                body: 
                                 [ { type: 'ExpressionStatement',
                                     expression: 
                                      { type: 'CallExpression',
                                        callee: 
                                         { type: 'MemberExpression',
                                           computed: false,
                                           object: { type: 'Identifier', name: 'res' },
                                           property: { type: 'Identifier', name: 'send' } },
                                        arguments: 
                                         [ { type: 'BinaryExpression',
                                             operator: '+',
                                             left: { type: 'Literal', value: '', raw: '""' },
                                             right: { type: 'Identifier', name: '_rep' } } ] } },
                                   { type: 'ExpressionStatement',
                                     expression: 
                                      { type: 'AssignmentExpression',
                                        operator: '+=',
                                        left: { type: 'Identifier', name: '_rep' },
                                        right: { type: 'Literal', value: 2, raw: '2' } } } ] },
                             rest: null,
                             generator: false,
                             expression: false },
                          through: 
                           [ [Circular],
                             { identifier: { type: 'Identifier', name: '_rep' },
                               from: [Circular],
                               tainted: false,
                               resolved: null,
                               flag: 3,
                               writeExpr: { type: 'Literal', value: 2, raw: '2' },
                               __maybeImplicitGlobal: undefined } ],
                          variables: 
                           [ { name: 'arguments',
                               identifiers: [],
                               references: [],
                               defs: [],
                               tainted: false,
                               stack: true,
                               scope: [Circular] },
                             { name: 'req',
                               identifiers: [ { type: 'Identifier', name: 'req' } ],
                               references: [],
                               defs: 
                                [ { type: 'Parameter',
                                    name: { type: 'Identifier', name: 'req' },
                                    node: 
                                     { type: 'FunctionExpression',
                                       id: { type: 'Identifier', name: 'replyB' },
                                       params: 
                                        [ { type: 'Identifier', name: 'req' },
                                          { type: 'Identifier', name: 'res' } ],
                                       defaults: [],
                                       body: 
                                        { type: 'BlockStatement',
                                          body: 
                                           [ { type: 'ExpressionStatement',
                                               expression: 
                                                { type: 'CallExpression',
                                                  callee: 
                                                   { type: 'MemberExpression',
                                                     computed: false,
                                                     object: { type: 'Identifier', name: 'res' },
                                                     property: { type: 'Identifier', name: 'send' } },
                                                  arguments: 
                                                   [ { type: 'BinaryExpression',
                                                       operator: '+',
                                                       left: { type: 'Literal', value: '', raw: '""' },
                                                       right: { type: 'Identifier', name: '_rep' } } ] } },
                                             { type: 'ExpressionStatement',
                                               expression: 
                                                { type: 'AssignmentExpression',
                                                  operator: '+=',
                                                  left: { type: 'Identifier', name: '_rep' },
                                                  right: { type: 'Literal', value: 2, raw: '2' } } } ] },
                                       rest: null,
                                       generator: false,
                                       expression: false },
                                    index: 0 } ],
                               tainted: false,
                               stack: true,
                               scope: [Circular] },
                             { name: 'res',
                               identifiers: [ { type: 'Identifier', name: 'res' } ],
                               references: 
                                [ { identifier: { type: 'Identifier', name: 'res' },
                                    from: [Circular],
                                    tainted: false,
                                    resolved: [Circular],
                                    flag: 1,
                                    __maybeImplicitGlobal: undefined } ],
                               defs: 
                                [ { type: 'Parameter',
                                    name: { type: 'Identifier', name: 'res' },
                                    node: 
                                     { type: 'FunctionExpression',
                                       id: { type: 'Identifier', name: 'replyB' },
                                       params: 
                                        [ { type: 'Identifier', name: 'req' },
                                          { type: 'Identifier', name: 'res' } ],
                                       defaults: [],
                                       body: 
                                        { type: 'BlockStatement',
                                          body: 
                                           [ { type: 'ExpressionStatement',
                                               expression: 
                                                { type: 'CallExpression',
                                                  callee: 
                                                   { type: 'MemberExpression',
                                                     computed: false,
                                                     object: { type: 'Identifier', name: 'res' },
                                                     property: { type: 'Identifier', name: 'send' } },
                                                  arguments: 
                                                   [ { type: 'BinaryExpression',
                                                       operator: '+',
                                                       left: { type: 'Literal', value: '', raw: '""' },
                                                       right: { type: 'Identifier', name: '_rep' } } ] } },
                                             { type: 'ExpressionStatement',
                                               expression: 
                                                { type: 'AssignmentExpression',
                                                  operator: '+=',
                                                  left: { type: 'Identifier', name: '_rep' },
                                                  right: { type: 'Literal', value: 2, raw: '2' } } } ] },
                                       rest: null,
                                       generator: false,
                                       expression: false },
                                    index: 1 } ],
                               tainted: false,
                               stack: true,
                               scope: [Circular] } ],
                          references: 
                           [ { identifier: { type: 'Identifier', name: 'res' },
                               from: [Circular],
                               tainted: false,
                               resolved: 
                                { name: 'res',
                                  identifiers: [ { type: 'Identifier', name: 'res' } ],
                                  references: [ [Circular] ],
                                  defs: 
                                   [ { type: 'Parameter',
                                       name: { type: 'Identifier', name: 'res' },
                                       node: 
                                        { type: 'FunctionExpression',
                                          id: { type: 'Identifier', name: 'replyB' },
                                          params: 
                                           [ { type: 'Identifier', name: 'req' },
                                             { type: 'Identifier', name: 'res' } ],
                                          defaults: [],
                                          body: 
                                           { type: 'BlockStatement',
                                             body: 
                                              [ { type: 'ExpressionStatement',
                                                  expression: 
                                                   { type: 'CallExpression',
                                                     callee: 
                                                      { type: 'MemberExpression',
                                                        computed: false,
                                                        object: { type: 'Identifier', name: 'res' },
                                                        property: { type: 'Identifier', name: 'send' } },
                                                     arguments: 
                                                      [ { type: 'BinaryExpression',
                                                          operator: '+',
                                                          left: { type: 'Literal', value: '', raw: '""' },
                                                          right: { type: 'Identifier', name: '_rep' } } ] } },
                                                { type: 'ExpressionStatement',
                                                  expression: 
                                                   { type: 'AssignmentExpression',
                                                     operator: '+=',
                                                     left: { type: 'Identifier', name: '_rep' },
                                                     right: { type: 'Literal', value: 2, raw: '2' } } } ] },
                                          rest: null,
                                          generator: false,
                                          expression: false },
                                       index: 1 } ],
                                  tainted: false,
                                  stack: true,
                                  scope: [Circular] },
                               flag: 1,
                               __maybeImplicitGlobal: undefined },
                             [Circular],
                             { identifier: { type: 'Identifier', name: '_rep' },
                               from: [Circular],
                               tainted: false,
                               resolved: null,
                               flag: 3,
                               writeExpr: { type: 'Literal', value: 2, raw: '2' },
                               __maybeImplicitGlobal: undefined } ],
                          left: null,
                          variableScope: [Circular],
                          functionExpressionScope: false,
                          directCallToEvalScope: false,
                          thisFound: false,
                          upper: [Circular],
                          isStrict: false,
                          childScopes: [] },
                       tainted: false,
                       resolved: null,
                       flag: 1,
                       __maybeImplicitGlobal: undefined },
                     { identifier: { type: 'Identifier', name: '_rep' },
                       from: 
                        { type: 'function',
                          set: 
                           { __data: 
                              { '$arguments': 
                                 { name: 'arguments',
                                   identifiers: [],
                                   references: [],
                                   defs: [],
                                   tainted: false,
                                   stack: true,
                                   scope: [Circular] },
                                '$req': 
                                 { name: 'req',
                                   identifiers: [ { type: 'Identifier', name: 'req' } ],
                                   references: [],
                                   defs: 
                                    [ { type: 'Parameter',
                                        name: { type: 'Identifier', name: 'req' },
                                        node: 
                                         { type: 'FunctionExpression',
                                           id: { type: 'Identifier', name: 'replyB' },
                                           params: 
                                            [ { type: 'Identifier', name: 'req' },
                                              { type: 'Identifier', name: 'res' } ],
                                           defaults: [],
                                           body: 
                                            { type: 'BlockStatement',
                                              body: 
                                               [ { type: 'ExpressionStatement',
                                                   expression: 
                                                    { type: 'CallExpression',
                                                      callee: 
                                                       { type: 'MemberExpression',
                                                         computed: false,
                                                         object: { type: 'Identifier', name: 'res' },
                                                         property: { type: 'Identifier', name: 'send' } },
                                                      arguments: 
                                                       [ { type: 'BinaryExpression',
                                                           operator: '+',
                                                           left: { type: 'Literal', value: '', raw: '""' },
                                                           right: { type: 'Identifier', name: '_rep' } } ] } },
                                                 { type: 'ExpressionStatement',
                                                   expression: 
                                                    { type: 'AssignmentExpression',
                                                      operator: '+=',
                                                      left: { type: 'Identifier', name: '_rep' },
                                                      right: { type: 'Literal', value: 2, raw: '2' } } } ] },
                                           rest: null,
                                           generator: false,
                                           expression: false },
                                        index: 0 } ],
                                   tainted: false,
                                   stack: true,
                                   scope: [Circular] },
                                '$res': 
                                 { name: 'res',
                                   identifiers: [ { type: 'Identifier', name: 'res' } ],
                                   references: 
                                    [ { identifier: { type: 'Identifier', name: 'res' },
                                        from: [Circular],
                                        tainted: false,
                                        resolved: [Circular],
                                        flag: 1,
                                        __maybeImplicitGlobal: undefined } ],
                                   defs: 
                                    [ { type: 'Parameter',
                                        name: { type: 'Identifier', name: 'res' },
                                        node: 
                                         { type: 'FunctionExpression',
                                           id: { type: 'Identifier', name: 'replyB' },
                                           params: 
                                            [ { type: 'Identifier', name: 'req' },
                                              { type: 'Identifier', name: 'res' } ],
                                           defaults: [],
                                           body: 
                                            { type: 'BlockStatement',
                                              body: 
                                               [ { type: 'ExpressionStatement',
                                                   expression: 
                                                    { type: 'CallExpression',
                                                      callee: 
                                                       { type: 'MemberExpression',
                                                         computed: false,
                                                         object: { type: 'Identifier', name: 'res' },
                                                         property: { type: 'Identifier', name: 'send' } },
                                                      arguments: 
                                                       [ { type: 'BinaryExpression',
                                                           operator: '+',
                                                           left: { type: 'Literal', value: '', raw: '""' },
                                                           right: { type: 'Identifier', name: '_rep' } } ] } },
                                                 { type: 'ExpressionStatement',
                                                   expression: 
                                                    { type: 'AssignmentExpression',
                                                      operator: '+=',
                                                      left: { type: 'Identifier', name: '_rep' },
                                                      right: { type: 'Literal', value: 2, raw: '2' } } } ] },
                                           rest: null,
                                           generator: false,
                                           expression: false },
                                        index: 1 } ],
                                   tainted: false,
                                   stack: true,
                                   scope: [Circular] } } },
                          taints: { __data: { '$arguments': true } },
                          dynamic: false,
                          block: 
                           { type: 'FunctionExpression',
                             id: { type: 'Identifier', name: 'replyB' },
                             params: 
                              [ { type: 'Identifier', name: 'req' },
                                { type: 'Identifier', name: 'res' } ],
                             defaults: [],
                             body: 
                              { type: 'BlockStatement',
                                body: 
                                 [ { type: 'ExpressionStatement',
                                     expression: 
                                      { type: 'CallExpression',
                                        callee: 
                                         { type: 'MemberExpression',
                                           computed: false,
                                           object: { type: 'Identifier', name: 'res' },
                                           property: { type: 'Identifier', name: 'send' } },
                                        arguments: 
                                         [ { type: 'BinaryExpression',
                                             operator: '+',
                                             left: { type: 'Literal', value: '', raw: '""' },
                                             right: { type: 'Identifier', name: '_rep' } } ] } },
                                   { type: 'ExpressionStatement',
                                     expression: 
                                      { type: 'AssignmentExpression',
                                        operator: '+=',
                                        left: { type: 'Identifier', name: '_rep' },
                                        right: { type: 'Literal', value: 2, raw: '2' } } } ] },
                             rest: null,
                             generator: false,
                             expression: false },
                          through: 
                           [ { identifier: { type: 'Identifier', name: '_rep' },
                               from: [Circular],
                               tainted: false,
                               resolved: null,
                               flag: 1,
                               __maybeImplicitGlobal: undefined },
                             [Circular] ],
                          variables: 
                           [ { name: 'arguments',
                               identifiers: [],
                               references: [],
                               defs: [],
                               tainted: false,
                               stack: true,
                               scope: [Circular] },
                             { name: 'req',
                               identifiers: [ { type: 'Identifier', name: 'req' } ],
                               references: [],
                               defs: 
                                [ { type: 'Parameter',
                                    name: { type: 'Identifier', name: 'req' },
                                    node: 
                                     { type: 'FunctionExpression',
                                       id: { type: 'Identifier', name: 'replyB' },
                                       params: 
                                        [ { type: 'Identifier', name: 'req' },
                                          { type: 'Identifier', name: 'res' } ],
                                       defaults: [],
                                       body: 
                                        { type: 'BlockStatement',
                                          body: 
                                           [ { type: 'ExpressionStatement',
                                               expression: 
                                                { type: 'CallExpression',
                                                  callee: 
                                                   { type: 'MemberExpression',
                                                     computed: false,
                                                     object: { type: 'Identifier', name: 'res' },
                                                     property: { type: 'Identifier', name: 'send' } },
                                                  arguments: 
                                                   [ { type: 'BinaryExpression',
                                                       operator: '+',
                                                       left: { type: 'Literal', value: '', raw: '""' },
                                                       right: { type: 'Identifier', name: '_rep' } } ] } },
                                             { type: 'ExpressionStatement',
                                               expression: 
                                                { type: 'AssignmentExpression',
                                                  operator: '+=',
                                                  left: { type: 'Identifier', name: '_rep' },
                                                  right: { type: 'Literal', value: 2, raw: '2' } } } ] },
                                       rest: null,
                                       generator: false,
                                       expression: false },
                                    index: 0 } ],
                               tainted: false,
                               stack: true,
                               scope: [Circular] },
                             { name: 'res',
                               identifiers: [ { type: 'Identifier', name: 'res' } ],
                               references: 
                                [ { identifier: { type: 'Identifier', name: 'res' },
                                    from: [Circular],
                                    tainted: false,
                                    resolved: [Circular],
                                    flag: 1,
                                    __maybeImplicitGlobal: undefined } ],
                               defs: 
                                [ { type: 'Parameter',
                                    name: { type: 'Identifier', name: 'res' },
                                    node: 
                                     { type: 'FunctionExpression',
                                       id: { type: 'Identifier', name: 'replyB' },
                                       params: 
                                        [ { type: 'Identifier', name: 'req' },
                                          { type: 'Identifier', name: 'res' } ],
                                       defaults: [],
                                       body: 
                                        { type: 'BlockStatement',
                                          body: 
                                           [ { type: 'ExpressionStatement',
                                               expression: 
                                                { type: 'CallExpression',
                                                  callee: 
                                                   { type: 'MemberExpression',
                                                     computed: false,
                                                     object: { type: 'Identifier', name: 'res' },
                                                     property: { type: 'Identifier', name: 'send' } },
                                                  arguments: 
                                                   [ { type: 'BinaryExpression',
                                                       operator: '+',
                                                       left: { type: 'Literal', value: '', raw: '""' },
                                                       right: { type: 'Identifier', name: '_rep' } } ] } },
                                             { type: 'ExpressionStatement',
                                               expression: 
                                                { type: 'AssignmentExpression',
                                                  operator: '+=',
                                                  left: { type: 'Identifier', name: '_rep' },
                                                  right: { type: 'Literal', value: 2, raw: '2' } } } ] },
                                       rest: null,
                                       generator: false,
                                       expression: false },
                                    index: 1 } ],
                               tainted: false,
                               stack: true,
                               scope: [Circular] } ],
                          references: 
                           [ { identifier: { type: 'Identifier', name: 'res' },
                               from: [Circular],
                               tainted: false,
                               resolved: 
                                { name: 'res',
                                  identifiers: [ { type: 'Identifier', name: 'res' } ],
                                  references: [ [Circular] ],
                                  defs: 
                                   [ { type: 'Parameter',
                                       name: { type: 'Identifier', name: 'res' },
                                       node: 
                                        { type: 'FunctionExpression',
                                          id: { type: 'Identifier', name: 'replyB' },
                                          params: 
                                           [ { type: 'Identifier', name: 'req' },
                                             { type: 'Identifier', name: 'res' } ],
                                          defaults: [],
                                          body: 
                                           { type: 'BlockStatement',
                                             body: 
                                              [ { type: 'ExpressionStatement',
                                                  expression: 
                                                   { type: 'CallExpression',
                                                     callee: 
                                                      { type: 'MemberExpression',
                                                        computed: false,
                                                        object: { type: 'Identifier', name: 'res' },
                                                        property: { type: 'Identifier', name: 'send' } },
                                                     arguments: 
                                                      [ { type: 'BinaryExpression',
                                                          operator: '+',
                                                          left: { type: 'Literal', value: '', raw: '""' },
                                                          right: { type: 'Identifier', name: '_rep' } } ] } },
                                                { type: 'ExpressionStatement',
                                                  expression: 
                                                   { type: 'AssignmentExpression',
                                                     operator: '+=',
                                                     left: { type: 'Identifier', name: '_rep' },
                                                     right: { type: 'Literal', value: 2, raw: '2' } } } ] },
                                          rest: null,
                                          generator: false,
                                          expression: false },
                                       index: 1 } ],
                                  tainted: false,
                                  stack: true,
                                  scope: [Circular] },
                               flag: 1,
                               __maybeImplicitGlobal: undefined },
                             { identifier: { type: 'Identifier', name: '_rep' },
                               from: [Circular],
                               tainted: false,
                               resolved: null,
                               flag: 1,
                               __maybeImplicitGlobal: undefined },
                             [Circular] ],
                          left: null,
                          variableScope: [Circular],
                          functionExpressionScope: false,
                          directCallToEvalScope: false,
                          thisFound: false,
                          upper: [Circular],
                          isStrict: false,
                          childScopes: [] },
                       tainted: false,
                       resolved: null,
                       flag: 3,
                       writeExpr: { type: 'Literal', value: 2, raw: '2' },
                       __maybeImplicitGlobal: undefined } ],
                  variables: 
                   [ { name: 'replyB',
                       identifiers: [ { type: 'Identifier', name: 'replyB' } ],
                       references: [],
                       defs: 
                        [ { type: 'FunctionName',
                            name: { type: 'Identifier', name: 'replyB' },
                            node: 
                             { type: 'FunctionExpression',
                               id: { type: 'Identifier', name: 'replyB' },
                               params: 
                                [ { type: 'Identifier', name: 'req' },
                                  { type: 'Identifier', name: 'res' } ],
                               defaults: [],
                               body: 
                                { type: 'BlockStatement',
                                  body: 
                                   [ { type: 'ExpressionStatement',
                                       expression: 
                                        { type: 'CallExpression',
                                          callee: 
                                           { type: 'MemberExpression',
                                             computed: false,
                                             object: { type: 'Identifier', name: 'res' },
                                             property: { type: 'Identifier', name: 'send' } },
                                          arguments: 
                                           [ { type: 'BinaryExpression',
                                               operator: '+',
                                               left: { type: 'Literal', value: '', raw: '""' },
                                               right: { type: 'Identifier', name: '_rep' } } ] } },
                                     { type: 'ExpressionStatement',
                                       expression: 
                                        { type: 'AssignmentExpression',
                                          operator: '+=',
                                          left: { type: 'Identifier', name: '_rep' },
                                          right: { type: 'Literal', value: 2, raw: '2' } } } ] },
                               rest: null,
                               generator: false,
                               expression: false } } ],
                       tainted: false,
                       stack: true,
                       scope: [Circular] } ],
                  references: [],
                  left: null,
                  variableScope: [Circular],
                  functionExpressionScope: true,
                  directCallToEvalScope: false,
                  thisFound: false,
                  upper: [Circular],
                  isStrict: false,
                  childScopes: 
                   [ { type: 'function',
                       set: 
                        { __data: 
                           { '$arguments': 
                              { name: 'arguments',
                                identifiers: [],
                                references: [],
                                defs: [],
                                tainted: false,
                                stack: true,
                                scope: [Circular] },
                             '$req': 
                              { name: 'req',
                                identifiers: [ { type: 'Identifier', name: 'req' } ],
                                references: [],
                                defs: 
                                 [ { type: 'Parameter',
                                     name: { type: 'Identifier', name: 'req' },
                                     node: 
                                      { type: 'FunctionExpression',
                                        id: { type: 'Identifier', name: 'replyB' },
                                        params: 
                                         [ { type: 'Identifier', name: 'req' },
                                           { type: 'Identifier', name: 'res' } ],
                                        defaults: [],
                                        body: 
                                         { type: 'BlockStatement',
                                           body: 
                                            [ { type: 'ExpressionStatement',
                                                expression: 
                                                 { type: 'CallExpression',
                                                   callee: 
                                                    { type: 'MemberExpression',
                                                      computed: false,
                                                      object: { type: 'Identifier', name: 'res' },
                                                      property: { type: 'Identifier', name: 'send' } },
                                                   arguments: 
                                                    [ { type: 'BinaryExpression',
                                                        operator: '+',
                                                        left: { type: 'Literal', value: '', raw: '""' },
                                                        right: { type: 'Identifier', name: '_rep' } } ] } },
                                              { type: 'ExpressionStatement',
                                                expression: 
                                                 { type: 'AssignmentExpression',
                                                   operator: '+=',
                                                   left: { type: 'Identifier', name: '_rep' },
                                                   right: { type: 'Literal', value: 2, raw: '2' } } } ] },
                                        rest: null,
                                        generator: false,
                                        expression: false },
                                     index: 0 } ],
                                tainted: false,
                                stack: true,
                                scope: [Circular] },
                             '$res': 
                              { name: 'res',
                                identifiers: [ { type: 'Identifier', name: 'res' } ],
                                references: 
                                 [ { identifier: { type: 'Identifier', name: 'res' },
                                     from: [Circular],
                                     tainted: false,
                                     resolved: [Circular],
                                     flag: 1,
                                     __maybeImplicitGlobal: undefined } ],
                                defs: 
                                 [ { type: 'Parameter',
                                     name: { type: 'Identifier', name: 'res' },
                                     node: 
                                      { type: 'FunctionExpression',
                                        id: { type: 'Identifier', name: 'replyB' },
                                        params: 
                                         [ { type: 'Identifier', name: 'req' },
                                           { type: 'Identifier', name: 'res' } ],
                                        defaults: [],
                                        body: 
                                         { type: 'BlockStatement',
                                           body: 
                                            [ { type: 'ExpressionStatement',
                                                expression: 
                                                 { type: 'CallExpression',
                                                   callee: 
                                                    { type: 'MemberExpression',
                                                      computed: false,
                                                      object: { type: 'Identifier', name: 'res' },
                                                      property: { type: 'Identifier', name: 'send' } },
                                                   arguments: 
                                                    [ { type: 'BinaryExpression',
                                                        operator: '+',
                                                        left: { type: 'Literal', value: '', raw: '""' },
                                                        right: { type: 'Identifier', name: '_rep' } } ] } },
                                              { type: 'ExpressionStatement',
                                                expression: 
                                                 { type: 'AssignmentExpression',
                                                   operator: '+=',
                                                   left: { type: 'Identifier', name: '_rep' },
                                                   right: { type: 'Literal', value: 2, raw: '2' } } } ] },
                                        rest: null,
                                        generator: false,
                                        expression: false },
                                     index: 1 } ],
                                tainted: false,
                                stack: true,
                                scope: [Circular] } } },
                       taints: { __data: { '$arguments': true } },
                       dynamic: false,
                       block: 
                        { type: 'FunctionExpression',
                          id: { type: 'Identifier', name: 'replyB' },
                          params: 
                           [ { type: 'Identifier', name: 'req' },
                             { type: 'Identifier', name: 'res' } ],
                          defaults: [],
                          body: 
                           { type: 'BlockStatement',
                             body: 
                              [ { type: 'ExpressionStatement',
                                  expression: 
                                   { type: 'CallExpression',
                                     callee: 
                                      { type: 'MemberExpression',
                                        computed: false,
                                        object: { type: 'Identifier', name: 'res' },
                                        property: { type: 'Identifier', name: 'send' } },
                                     arguments: 
                                      [ { type: 'BinaryExpression',
                                          operator: '+',
                                          left: { type: 'Literal', value: '', raw: '""' },
                                          right: { type: 'Identifier', name: '_rep' } } ] } },
                                { type: 'ExpressionStatement',
                                  expression: 
                                   { type: 'AssignmentExpression',
                                     operator: '+=',
                                     left: { type: 'Identifier', name: '_rep' },
                                     right: { type: 'Literal', value: 2, raw: '2' } } } ] },
                          rest: null,
                          generator: false,
                          expression: false },
                       through: 
                        [ { identifier: { type: 'Identifier', name: '_rep' },
                            from: [Circular],
                            tainted: false,
                            resolved: null,
                            flag: 1,
                            __maybeImplicitGlobal: undefined },
                          { identifier: { type: 'Identifier', name: '_rep' },
                            from: [Circular],
                            tainted: false,
                            resolved: null,
                            flag: 3,
                            writeExpr: { type: 'Literal', value: 2, raw: '2' },
                            __maybeImplicitGlobal: undefined } ],
                       variables: 
                        [ { name: 'arguments',
                            identifiers: [],
                            references: [],
                            defs: [],
                            tainted: false,
                            stack: true,
                            scope: [Circular] },
                          { name: 'req',
                            identifiers: [ { type: 'Identifier', name: 'req' } ],
                            references: [],
                            defs: 
                             [ { type: 'Parameter',
                                 name: { type: 'Identifier', name: 'req' },
                                 node: 
                                  { type: 'FunctionExpression',
                                    id: { type: 'Identifier', name: 'replyB' },
                                    params: 
                                     [ { type: 'Identifier', name: 'req' },
                                       { type: 'Identifier', name: 'res' } ],
                                    defaults: [],
                                    body: 
                                     { type: 'BlockStatement',
                                       body: 
                                        [ { type: 'ExpressionStatement',
                                            expression: 
                                             { type: 'CallExpression',
                                               callee: 
                                                { type: 'MemberExpression',
                                                  computed: false,
                                                  object: { type: 'Identifier', name: 'res' },
                                                  property: { type: 'Identifier', name: 'send' } },
                                               arguments: 
                                                [ { type: 'BinaryExpression',
                                                    operator: '+',
                                                    left: { type: 'Literal', value: '', raw: '""' },
                                                    right: { type: 'Identifier', name: '_rep' } } ] } },
                                          { type: 'ExpressionStatement',
                                            expression: 
                                             { type: 'AssignmentExpression',
                                               operator: '+=',
                                               left: { type: 'Identifier', name: '_rep' },
                                               right: { type: 'Literal', value: 2, raw: '2' } } } ] },
                                    rest: null,
                                    generator: false,
                                    expression: false },
                                 index: 0 } ],
                            tainted: false,
                            stack: true,
                            scope: [Circular] },
                          { name: 'res',
                            identifiers: [ { type: 'Identifier', name: 'res' } ],
                            references: 
                             [ { identifier: { type: 'Identifier', name: 'res' },
                                 from: [Circular],
                                 tainted: false,
                                 resolved: [Circular],
                                 flag: 1,
                                 __maybeImplicitGlobal: undefined } ],
                            defs: 
                             [ { type: 'Parameter',
                                 name: { type: 'Identifier', name: 'res' },
                                 node: 
                                  { type: 'FunctionExpression',
                                    id: { type: 'Identifier', name: 'replyB' },
                                    params: 
                                     [ { type: 'Identifier', name: 'req' },
                                       { type: 'Identifier', name: 'res' } ],
                                    defaults: [],
                                    body: 
                                     { type: 'BlockStatement',
                                       body: 
                                        [ { type: 'ExpressionStatement',
                                            expression: 
                                             { type: 'CallExpression',
                                               callee: 
                                                { type: 'MemberExpression',
                                                  computed: false,
                                                  object: { type: 'Identifier', name: 'res' },
                                                  property: { type: 'Identifier', name: 'send' } },
                                               arguments: 
                                                [ { type: 'BinaryExpression',
                                                    operator: '+',
                                                    left: { type: 'Literal', value: '', raw: '""' },
                                                    right: { type: 'Identifier', name: '_rep' } } ] } },
                                          { type: 'ExpressionStatement',
                                            expression: 
                                             { type: 'AssignmentExpression',
                                               operator: '+=',
                                               left: { type: 'Identifier', name: '_rep' },
                                               right: { type: 'Literal', value: 2, raw: '2' } } } ] },
                                    rest: null,
                                    generator: false,
                                    expression: false },
                                 index: 1 } ],
                            tainted: false,
                            stack: true,
                            scope: [Circular] } ],
                       references: 
                        [ { identifier: { type: 'Identifier', name: 'res' },
                            from: [Circular],
                            tainted: false,
                            resolved: 
                             { name: 'res',
                               identifiers: [ { type: 'Identifier', name: 'res' } ],
                               references: [ [Circular] ],
                               defs: 
                                [ { type: 'Parameter',
                                    name: { type: 'Identifier', name: 'res' },
                                    node: 
                                     { type: 'FunctionExpression',
                                       id: { type: 'Identifier', name: 'replyB' },
                                       params: 
                                        [ { type: 'Identifier', name: 'req' },
                                          { type: 'Identifier', name: 'res' } ],
                                       defaults: [],
                                       body: 
                                        { type: 'BlockStatement',
                                          body: 
                                           [ { type: 'ExpressionStatement',
                                               expression: 
                                                { type: 'CallExpression',
                                                  callee: 
                                                   { type: 'MemberExpression',
                                                     computed: false,
                                                     object: { type: 'Identifier', name: 'res' },
                                                     property: { type: 'Identifier', name: 'send' } },
                                                  arguments: 
                                                   [ { type: 'BinaryExpression',
                                                       operator: '+',
                                                       left: { type: 'Literal', value: '', raw: '""' },
                                                       right: { type: 'Identifier', name: '_rep' } } ] } },
                                             { type: 'ExpressionStatement',
                                               expression: 
                                                { type: 'AssignmentExpression',
                                                  operator: '+=',
                                                  left: { type: 'Identifier', name: '_rep' },
                                                  right: { type: 'Literal', value: 2, raw: '2' } } } ] },
                                       rest: null,
                                       generator: false,
                                       expression: false },
                                    index: 1 } ],
                               tainted: false,
                               stack: true,
                               scope: [Circular] },
                            flag: 1,
                            __maybeImplicitGlobal: undefined },
                          { identifier: { type: 'Identifier', name: '_rep' },
                            from: [Circular],
                            tainted: false,
                            resolved: null,
                            flag: 1,
                            __maybeImplicitGlobal: undefined },
                          { identifier: { type: 'Identifier', name: '_rep' },
                            from: [Circular],
                            tainted: false,
                            resolved: null,
                            flag: 3,
                            writeExpr: { type: 'Literal', value: 2, raw: '2' },
                            __maybeImplicitGlobal: undefined } ],
                       left: null,
                       variableScope: [Circular],
                       functionExpressionScope: false,
                       directCallToEvalScope: false,
                       thisFound: false,
                       upper: [Circular],
                       isStrict: false,
                       childScopes: [] } ] } ],
             implicit: { set: { __data: {} }, variables: [] } },
          isStrict: false,
          childScopes: [ [Circular] ] },
       isStrict: false,
       childScopes: [] },
     { type: 'function',
       set: 
        { __data: 
           { '$replyB': 
              { name: 'replyB',
                identifiers: [ { type: 'Identifier', name: 'replyB' } ],
                references: [],
                defs: 
                 [ { type: 'FunctionName',
                     name: { type: 'Identifier', name: 'replyB' },
                     node: 
                      { type: 'FunctionExpression',
                        id: { type: 'Identifier', name: 'replyB' },
                        params: 
                         [ { type: 'Identifier', name: 'req' },
                           { type: 'Identifier', name: 'res' } ],
                        defaults: [],
                        body: 
                         { type: 'BlockStatement',
                           body: 
                            [ { type: 'ExpressionStatement',
                                expression: 
                                 { type: 'CallExpression',
                                   callee: 
                                    { type: 'MemberExpression',
                                      computed: false,
                                      object: { type: 'Identifier', name: 'res' },
                                      property: { type: 'Identifier', name: 'send' } },
                                   arguments: 
                                    [ { type: 'BinaryExpression',
                                        operator: '+',
                                        left: { type: 'Literal', value: '', raw: '""' },
                                        right: { type: 'Identifier', name: '_rep' } } ] } },
                              { type: 'ExpressionStatement',
                                expression: 
                                 { type: 'AssignmentExpression',
                                   operator: '+=',
                                   left: { type: 'Identifier', name: '_rep' },
                                   right: { type: 'Literal', value: 2, raw: '2' } } } ] },
                        rest: null,
                        generator: false,
                        expression: false } } ],
                tainted: false,
                stack: true,
                scope: [Circular] } } },
       taints: { __data: {} },
       dynamic: false,
       block: 
        { type: 'FunctionExpression',
          id: { type: 'Identifier', name: 'replyB' },
          params: 
           [ { type: 'Identifier', name: 'req' },
             { type: 'Identifier', name: 'res' } ],
          defaults: [],
          body: 
           { type: 'BlockStatement',
             body: 
              [ { type: 'ExpressionStatement',
                  expression: 
                   { type: 'CallExpression',
                     callee: 
                      { type: 'MemberExpression',
                        computed: false,
                        object: { type: 'Identifier', name: 'res' },
                        property: { type: 'Identifier', name: 'send' } },
                     arguments: 
                      [ { type: 'BinaryExpression',
                          operator: '+',
                          left: { type: 'Literal', value: '', raw: '""' },
                          right: { type: 'Identifier', name: '_rep' } } ] } },
                { type: 'ExpressionStatement',
                  expression: 
                   { type: 'AssignmentExpression',
                     operator: '+=',
                     left: { type: 'Identifier', name: '_rep' },
                     right: { type: 'Literal', value: 2, raw: '2' } } } ] },
          rest: null,
          generator: false,
          expression: false },
       through: 
        [ { identifier: { type: 'Identifier', name: '_rep' },
            from: 
             { type: 'function',
               set: 
                { __data: 
                   { '$arguments': 
                      { name: 'arguments',
                        identifiers: [],
                        references: [],
                        defs: [],
                        tainted: false,
                        stack: true,
                        scope: [Circular] },
                     '$req': 
                      { name: 'req',
                        identifiers: [ { type: 'Identifier', name: 'req' } ],
                        references: [],
                        defs: 
                         [ { type: 'Parameter',
                             name: { type: 'Identifier', name: 'req' },
                             node: 
                              { type: 'FunctionExpression',
                                id: { type: 'Identifier', name: 'replyB' },
                                params: 
                                 [ { type: 'Identifier', name: 'req' },
                                   { type: 'Identifier', name: 'res' } ],
                                defaults: [],
                                body: 
                                 { type: 'BlockStatement',
                                   body: 
                                    [ { type: 'ExpressionStatement',
                                        expression: 
                                         { type: 'CallExpression',
                                           callee: 
                                            { type: 'MemberExpression',
                                              computed: false,
                                              object: { type: 'Identifier', name: 'res' },
                                              property: { type: 'Identifier', name: 'send' } },
                                           arguments: 
                                            [ { type: 'BinaryExpression',
                                                operator: '+',
                                                left: { type: 'Literal', value: '', raw: '""' },
                                                right: { type: 'Identifier', name: '_rep' } } ] } },
                                      { type: 'ExpressionStatement',
                                        expression: 
                                         { type: 'AssignmentExpression',
                                           operator: '+=',
                                           left: { type: 'Identifier', name: '_rep' },
                                           right: { type: 'Literal', value: 2, raw: '2' } } } ] },
                                rest: null,
                                generator: false,
                                expression: false },
                             index: 0 } ],
                        tainted: false,
                        stack: true,
                        scope: [Circular] },
                     '$res': 
                      { name: 'res',
                        identifiers: [ { type: 'Identifier', name: 'res' } ],
                        references: 
                         [ { identifier: { type: 'Identifier', name: 'res' },
                             from: [Circular],
                             tainted: false,
                             resolved: [Circular],
                             flag: 1,
                             __maybeImplicitGlobal: undefined } ],
                        defs: 
                         [ { type: 'Parameter',
                             name: { type: 'Identifier', name: 'res' },
                             node: 
                              { type: 'FunctionExpression',
                                id: { type: 'Identifier', name: 'replyB' },
                                params: 
                                 [ { type: 'Identifier', name: 'req' },
                                   { type: 'Identifier', name: 'res' } ],
                                defaults: [],
                                body: 
                                 { type: 'BlockStatement',
                                   body: 
                                    [ { type: 'ExpressionStatement',
                                        expression: 
                                         { type: 'CallExpression',
                                           callee: 
                                            { type: 'MemberExpression',
                                              computed: false,
                                              object: { type: 'Identifier', name: 'res' },
                                              property: { type: 'Identifier', name: 'send' } },
                                           arguments: 
                                            [ { type: 'BinaryExpression',
                                                operator: '+',
                                                left: { type: 'Literal', value: '', raw: '""' },
                                                right: { type: 'Identifier', name: '_rep' } } ] } },
                                      { type: 'ExpressionStatement',
                                        expression: 
                                         { type: 'AssignmentExpression',
                                           operator: '+=',
                                           left: { type: 'Identifier', name: '_rep' },
                                           right: { type: 'Literal', value: 2, raw: '2' } } } ] },
                                rest: null,
                                generator: false,
                                expression: false },
                             index: 1 } ],
                        tainted: false,
                        stack: true,
                        scope: [Circular] } } },
               taints: { __data: { '$arguments': true } },
               dynamic: false,
               block: 
                { type: 'FunctionExpression',
                  id: { type: 'Identifier', name: 'replyB' },
                  params: 
                   [ { type: 'Identifier', name: 'req' },
                     { type: 'Identifier', name: 'res' } ],
                  defaults: [],
                  body: 
                   { type: 'BlockStatement',
                     body: 
                      [ { type: 'ExpressionStatement',
                          expression: 
                           { type: 'CallExpression',
                             callee: 
                              { type: 'MemberExpression',
                                computed: false,
                                object: { type: 'Identifier', name: 'res' },
                                property: { type: 'Identifier', name: 'send' } },
                             arguments: 
                              [ { type: 'BinaryExpression',
                                  operator: '+',
                                  left: { type: 'Literal', value: '', raw: '""' },
                                  right: { type: 'Identifier', name: '_rep' } } ] } },
                        { type: 'ExpressionStatement',
                          expression: 
                           { type: 'AssignmentExpression',
                             operator: '+=',
                             left: { type: 'Identifier', name: '_rep' },
                             right: { type: 'Literal', value: 2, raw: '2' } } } ] },
                  rest: null,
                  generator: false,
                  expression: false },
               through: 
                [ [Circular],
                  { identifier: { type: 'Identifier', name: '_rep' },
                    from: [Circular],
                    tainted: false,
                    resolved: null,
                    flag: 3,
                    writeExpr: { type: 'Literal', value: 2, raw: '2' },
                    __maybeImplicitGlobal: undefined } ],
               variables: 
                [ { name: 'arguments',
                    identifiers: [],
                    references: [],
                    defs: [],
                    tainted: false,
                    stack: true,
                    scope: [Circular] },
                  { name: 'req',
                    identifiers: [ { type: 'Identifier', name: 'req' } ],
                    references: [],
                    defs: 
                     [ { type: 'Parameter',
                         name: { type: 'Identifier', name: 'req' },
                         node: 
                          { type: 'FunctionExpression',
                            id: { type: 'Identifier', name: 'replyB' },
                            params: 
                             [ { type: 'Identifier', name: 'req' },
                               { type: 'Identifier', name: 'res' } ],
                            defaults: [],
                            body: 
                             { type: 'BlockStatement',
                               body: 
                                [ { type: 'ExpressionStatement',
                                    expression: 
                                     { type: 'CallExpression',
                                       callee: 
                                        { type: 'MemberExpression',
                                          computed: false,
                                          object: { type: 'Identifier', name: 'res' },
                                          property: { type: 'Identifier', name: 'send' } },
                                       arguments: 
                                        [ { type: 'BinaryExpression',
                                            operator: '+',
                                            left: { type: 'Literal', value: '', raw: '""' },
                                            right: { type: 'Identifier', name: '_rep' } } ] } },
                                  { type: 'ExpressionStatement',
                                    expression: 
                                     { type: 'AssignmentExpression',
                                       operator: '+=',
                                       left: { type: 'Identifier', name: '_rep' },
                                       right: { type: 'Literal', value: 2, raw: '2' } } } ] },
                            rest: null,
                            generator: false,
                            expression: false },
                         index: 0 } ],
                    tainted: false,
                    stack: true,
                    scope: [Circular] },
                  { name: 'res',
                    identifiers: [ { type: 'Identifier', name: 'res' } ],
                    references: 
                     [ { identifier: { type: 'Identifier', name: 'res' },
                         from: [Circular],
                         tainted: false,
                         resolved: [Circular],
                         flag: 1,
                         __maybeImplicitGlobal: undefined } ],
                    defs: 
                     [ { type: 'Parameter',
                         name: { type: 'Identifier', name: 'res' },
                         node: 
                          { type: 'FunctionExpression',
                            id: { type: 'Identifier', name: 'replyB' },
                            params: 
                             [ { type: 'Identifier', name: 'req' },
                               { type: 'Identifier', name: 'res' } ],
                            defaults: [],
                            body: 
                             { type: 'BlockStatement',
                               body: 
                                [ { type: 'ExpressionStatement',
                                    expression: 
                                     { type: 'CallExpression',
                                       callee: 
                                        { type: 'MemberExpression',
                                          computed: false,
                                          object: { type: 'Identifier', name: 'res' },
                                          property: { type: 'Identifier', name: 'send' } },
                                       arguments: 
                                        [ { type: 'BinaryExpression',
                                            operator: '+',
                                            left: { type: 'Literal', value: '', raw: '""' },
                                            right: { type: 'Identifier', name: '_rep' } } ] } },
                                  { type: 'ExpressionStatement',
                                    expression: 
                                     { type: 'AssignmentExpression',
                                       operator: '+=',
                                       left: { type: 'Identifier', name: '_rep' },
                                       right: { type: 'Literal', value: 2, raw: '2' } } } ] },
                            rest: null,
                            generator: false,
                            expression: false },
                         index: 1 } ],
                    tainted: false,
                    stack: true,
                    scope: [Circular] } ],
               references: 
                [ { identifier: { type: 'Identifier', name: 'res' },
                    from: [Circular],
                    tainted: false,
                    resolved: 
                     { name: 'res',
                       identifiers: [ { type: 'Identifier', name: 'res' } ],
                       references: [ [Circular] ],
                       defs: 
                        [ { type: 'Parameter',
                            name: { type: 'Identifier', name: 'res' },
                            node: 
                             { type: 'FunctionExpression',
                               id: { type: 'Identifier', name: 'replyB' },
                               params: 
                                [ { type: 'Identifier', name: 'req' },
                                  { type: 'Identifier', name: 'res' } ],
                               defaults: [],
                               body: 
                                { type: 'BlockStatement',
                                  body: 
                                   [ { type: 'ExpressionStatement',
                                       expression: 
                                        { type: 'CallExpression',
                                          callee: 
                                           { type: 'MemberExpression',
                                             computed: false,
                                             object: { type: 'Identifier', name: 'res' },
                                             property: { type: 'Identifier', name: 'send' } },
                                          arguments: 
                                           [ { type: 'BinaryExpression',
                                               operator: '+',
                                               left: { type: 'Literal', value: '', raw: '""' },
                                               right: { type: 'Identifier', name: '_rep' } } ] } },
                                     { type: 'ExpressionStatement',
                                       expression: 
                                        { type: 'AssignmentExpression',
                                          operator: '+=',
                                          left: { type: 'Identifier', name: '_rep' },
                                          right: { type: 'Literal', value: 2, raw: '2' } } } ] },
                               rest: null,
                               generator: false,
                               expression: false },
                            index: 1 } ],
                       tainted: false,
                       stack: true,
                       scope: [Circular] },
                    flag: 1,
                    __maybeImplicitGlobal: undefined },
                  [Circular],
                  { identifier: { type: 'Identifier', name: '_rep' },
                    from: [Circular],
                    tainted: false,
                    resolved: null,
                    flag: 3,
                    writeExpr: { type: 'Literal', value: 2, raw: '2' },
                    __maybeImplicitGlobal: undefined } ],
               left: null,
               variableScope: [Circular],
               functionExpressionScope: false,
               directCallToEvalScope: false,
               thisFound: false,
               upper: [Circular],
               isStrict: false,
               childScopes: [] },
            tainted: false,
            resolved: null,
            flag: 1,
            __maybeImplicitGlobal: undefined },
          { identifier: { type: 'Identifier', name: '_rep' },
            from: 
             { type: 'function',
               set: 
                { __data: 
                   { '$arguments': 
                      { name: 'arguments',
                        identifiers: [],
                        references: [],
                        defs: [],
                        tainted: false,
                        stack: true,
                        scope: [Circular] },
                     '$req': 
                      { name: 'req',
                        identifiers: [ { type: 'Identifier', name: 'req' } ],
                        references: [],
                        defs: 
                         [ { type: 'Parameter',
                             name: { type: 'Identifier', name: 'req' },
                             node: 
                              { type: 'FunctionExpression',
                                id: { type: 'Identifier', name: 'replyB' },
                                params: 
                                 [ { type: 'Identifier', name: 'req' },
                                   { type: 'Identifier', name: 'res' } ],
                                defaults: [],
                                body: 
                                 { type: 'BlockStatement',
                                   body: 
                                    [ { type: 'ExpressionStatement',
                                        expression: 
                                         { type: 'CallExpression',
                                           callee: 
                                            { type: 'MemberExpression',
                                              computed: false,
                                              object: { type: 'Identifier', name: 'res' },
                                              property: { type: 'Identifier', name: 'send' } },
                                           arguments: 
                                            [ { type: 'BinaryExpression',
                                                operator: '+',
                                                left: { type: 'Literal', value: '', raw: '""' },
                                                right: { type: 'Identifier', name: '_rep' } } ] } },
                                      { type: 'ExpressionStatement',
                                        expression: 
                                         { type: 'AssignmentExpression',
                                           operator: '+=',
                                           left: { type: 'Identifier', name: '_rep' },
                                           right: { type: 'Literal', value: 2, raw: '2' } } } ] },
                                rest: null,
                                generator: false,
                                expression: false },
                             index: 0 } ],
                        tainted: false,
                        stack: true,
                        scope: [Circular] },
                     '$res': 
                      { name: 'res',
                        identifiers: [ { type: 'Identifier', name: 'res' } ],
                        references: 
                         [ { identifier: { type: 'Identifier', name: 'res' },
                             from: [Circular],
                             tainted: false,
                             resolved: [Circular],
                             flag: 1,
                             __maybeImplicitGlobal: undefined } ],
                        defs: 
                         [ { type: 'Parameter',
                             name: { type: 'Identifier', name: 'res' },
                             node: 
                              { type: 'FunctionExpression',
                                id: { type: 'Identifier', name: 'replyB' },
                                params: 
                                 [ { type: 'Identifier', name: 'req' },
                                   { type: 'Identifier', name: 'res' } ],
                                defaults: [],
                                body: 
                                 { type: 'BlockStatement',
                                   body: 
                                    [ { type: 'ExpressionStatement',
                                        expression: 
                                         { type: 'CallExpression',
                                           callee: 
                                            { type: 'MemberExpression',
                                              computed: false,
                                              object: { type: 'Identifier', name: 'res' },
                                              property: { type: 'Identifier', name: 'send' } },
                                           arguments: 
                                            [ { type: 'BinaryExpression',
                                                operator: '+',
                                                left: { type: 'Literal', value: '', raw: '""' },
                                                right: { type: 'Identifier', name: '_rep' } } ] } },
                                      { type: 'ExpressionStatement',
                                        expression: 
                                         { type: 'AssignmentExpression',
                                           operator: '+=',
                                           left: { type: 'Identifier', name: '_rep' },
                                           right: { type: 'Literal', value: 2, raw: '2' } } } ] },
                                rest: null,
                                generator: false,
                                expression: false },
                             index: 1 } ],
                        tainted: false,
                        stack: true,
                        scope: [Circular] } } },
               taints: { __data: { '$arguments': true } },
               dynamic: false,
               block: 
                { type: 'FunctionExpression',
                  id: { type: 'Identifier', name: 'replyB' },
                  params: 
                   [ { type: 'Identifier', name: 'req' },
                     { type: 'Identifier', name: 'res' } ],
                  defaults: [],
                  body: 
                   { type: 'BlockStatement',
                     body: 
                      [ { type: 'ExpressionStatement',
                          expression: 
                           { type: 'CallExpression',
                             callee: 
                              { type: 'MemberExpression',
                                computed: false,
                                object: { type: 'Identifier', name: 'res' },
                                property: { type: 'Identifier', name: 'send' } },
                             arguments: 
                              [ { type: 'BinaryExpression',
                                  operator: '+',
                                  left: { type: 'Literal', value: '', raw: '""' },
                                  right: { type: 'Identifier', name: '_rep' } } ] } },
                        { type: 'ExpressionStatement',
                          expression: 
                           { type: 'AssignmentExpression',
                             operator: '+=',
                             left: { type: 'Identifier', name: '_rep' },
                             right: { type: 'Literal', value: 2, raw: '2' } } } ] },
                  rest: null,
                  generator: false,
                  expression: false },
               through: 
                [ { identifier: { type: 'Identifier', name: '_rep' },
                    from: [Circular],
                    tainted: false,
                    resolved: null,
                    flag: 1,
                    __maybeImplicitGlobal: undefined },
                  [Circular] ],
               variables: 
                [ { name: 'arguments',
                    identifiers: [],
                    references: [],
                    defs: [],
                    tainted: false,
                    stack: true,
                    scope: [Circular] },
                  { name: 'req',
                    identifiers: [ { type: 'Identifier', name: 'req' } ],
                    references: [],
                    defs: 
                     [ { type: 'Parameter',
                         name: { type: 'Identifier', name: 'req' },
                         node: 
                          { type: 'FunctionExpression',
                            id: { type: 'Identifier', name: 'replyB' },
                            params: 
                             [ { type: 'Identifier', name: 'req' },
                               { type: 'Identifier', name: 'res' } ],
                            defaults: [],
                            body: 
                             { type: 'BlockStatement',
                               body: 
                                [ { type: 'ExpressionStatement',
                                    expression: 
                                     { type: 'CallExpression',
                                       callee: 
                                        { type: 'MemberExpression',
                                          computed: false,
                                          object: { type: 'Identifier', name: 'res' },
                                          property: { type: 'Identifier', name: 'send' } },
                                       arguments: 
                                        [ { type: 'BinaryExpression',
                                            operator: '+',
                                            left: { type: 'Literal', value: '', raw: '""' },
                                            right: { type: 'Identifier', name: '_rep' } } ] } },
                                  { type: 'ExpressionStatement',
                                    expression: 
                                     { type: 'AssignmentExpression',
                                       operator: '+=',
                                       left: { type: 'Identifier', name: '_rep' },
                                       right: { type: 'Literal', value: 2, raw: '2' } } } ] },
                            rest: null,
                            generator: false,
                            expression: false },
                         index: 0 } ],
                    tainted: false,
                    stack: true,
                    scope: [Circular] },
                  { name: 'res',
                    identifiers: [ { type: 'Identifier', name: 'res' } ],
                    references: 
                     [ { identifier: { type: 'Identifier', name: 'res' },
                         from: [Circular],
                         tainted: false,
                         resolved: [Circular],
                         flag: 1,
                         __maybeImplicitGlobal: undefined } ],
                    defs: 
                     [ { type: 'Parameter',
                         name: { type: 'Identifier', name: 'res' },
                         node: 
                          { type: 'FunctionExpression',
                            id: { type: 'Identifier', name: 'replyB' },
                            params: 
                             [ { type: 'Identifier', name: 'req' },
                               { type: 'Identifier', name: 'res' } ],
                            defaults: [],
                            body: 
                             { type: 'BlockStatement',
                               body: 
                                [ { type: 'ExpressionStatement',
                                    expression: 
                                     { type: 'CallExpression',
                                       callee: 
                                        { type: 'MemberExpression',
                                          computed: false,
                                          object: { type: 'Identifier', name: 'res' },
                                          property: { type: 'Identifier', name: 'send' } },
                                       arguments: 
                                        [ { type: 'BinaryExpression',
                                            operator: '+',
                                            left: { type: 'Literal', value: '', raw: '""' },
                                            right: { type: 'Identifier', name: '_rep' } } ] } },
                                  { type: 'ExpressionStatement',
                                    expression: 
                                     { type: 'AssignmentExpression',
                                       operator: '+=',
                                       left: { type: 'Identifier', name: '_rep' },
                                       right: { type: 'Literal', value: 2, raw: '2' } } } ] },
                            rest: null,
                            generator: false,
                            expression: false },
                         index: 1 } ],
                    tainted: false,
                    stack: true,
                    scope: [Circular] } ],
               references: 
                [ { identifier: { type: 'Identifier', name: 'res' },
                    from: [Circular],
                    tainted: false,
                    resolved: 
                     { name: 'res',
                       identifiers: [ { type: 'Identifier', name: 'res' } ],
                       references: [ [Circular] ],
                       defs: 
                        [ { type: 'Parameter',
                            name: { type: 'Identifier', name: 'res' },
                            node: 
                             { type: 'FunctionExpression',
                               id: { type: 'Identifier', name: 'replyB' },
                               params: 
                                [ { type: 'Identifier', name: 'req' },
                                  { type: 'Identifier', name: 'res' } ],
                               defaults: [],
                               body: 
                                { type: 'BlockStatement',
                                  body: 
                                   [ { type: 'ExpressionStatement',
                                       expression: 
                                        { type: 'CallExpression',
                                          callee: 
                                           { type: 'MemberExpression',
                                             computed: false,
                                             object: { type: 'Identifier', name: 'res' },
                                             property: { type: 'Identifier', name: 'send' } },
                                          arguments: 
                                           [ { type: 'BinaryExpression',
                                               operator: '+',
                                               left: { type: 'Literal', value: '', raw: '""' },
                                               right: { type: 'Identifier', name: '_rep' } } ] } },
                                     { type: 'ExpressionStatement',
                                       expression: 
                                        { type: 'AssignmentExpression',
                                          operator: '+=',
                                          left: { type: 'Identifier', name: '_rep' },
                                          right: { type: 'Literal', value: 2, raw: '2' } } } ] },
                               rest: null,
                               generator: false,
                               expression: false },
                            index: 1 } ],
                       tainted: false,
                       stack: true,
                       scope: [Circular] },
                    flag: 1,
                    __maybeImplicitGlobal: undefined },
                  { identifier: { type: 'Identifier', name: '_rep' },
                    from: [Circular],
                    tainted: false,
                    resolved: null,
                    flag: 1,
                    __maybeImplicitGlobal: undefined },
                  [Circular] ],
               left: null,
               variableScope: [Circular],
               functionExpressionScope: false,
               directCallToEvalScope: false,
               thisFound: false,
               upper: [Circular],
               isStrict: false,
               childScopes: [] },
            tainted: false,
            resolved: null,
            flag: 3,
            writeExpr: { type: 'Literal', value: 2, raw: '2' },
            __maybeImplicitGlobal: undefined } ],
       variables: 
        [ { name: 'replyB',
            identifiers: [ { type: 'Identifier', name: 'replyB' } ],
            references: [],
            defs: 
             [ { type: 'FunctionName',
                 name: { type: 'Identifier', name: 'replyB' },
                 node: 
                  { type: 'FunctionExpression',
                    id: { type: 'Identifier', name: 'replyB' },
                    params: 
                     [ { type: 'Identifier', name: 'req' },
                       { type: 'Identifier', name: 'res' } ],
                    defaults: [],
                    body: 
                     { type: 'BlockStatement',
                       body: 
                        [ { type: 'ExpressionStatement',
                            expression: 
                             { type: 'CallExpression',
                               callee: 
                                { type: 'MemberExpression',
                                  computed: false,
                                  object: { type: 'Identifier', name: 'res' },
                                  property: { type: 'Identifier', name: 'send' } },
                               arguments: 
                                [ { type: 'BinaryExpression',
                                    operator: '+',
                                    left: { type: 'Literal', value: '', raw: '""' },
                                    right: { type: 'Identifier', name: '_rep' } } ] } },
                          { type: 'ExpressionStatement',
                            expression: 
                             { type: 'AssignmentExpression',
                               operator: '+=',
                               left: { type: 'Identifier', name: '_rep' },
                               right: { type: 'Literal', value: 2, raw: '2' } } } ] },
                    rest: null,
                    generator: false,
                    expression: false } } ],
            tainted: false,
            stack: true,
            scope: [Circular] } ],
       references: [],
       left: null,
       variableScope: [Circular],
       functionExpressionScope: true,
       directCallToEvalScope: false,
       thisFound: false,
       upper: 
        { type: 'global',
          set: 
           { __data: 
              { '$app': 
                 { name: 'app',
                   identifiers: [ { type: 'Identifier', name: 'app' } ],
                   references: [],
                   defs: 
                    [ { type: 'Variable',
                        name: { type: 'Identifier', name: 'app' },
                        node: 
                         { type: 'VariableDeclarator',
                           id: { type: 'Identifier', name: 'app' },
                           init: 
                            { type: 'CallExpression',
                              callee: 
                               { type: 'CallExpression',
                                 callee: { type: 'Identifier', name: 'require' },
                                 arguments: [ { type: 'Literal', value: 'express', raw: '\'express\'' } ] },
                              arguments: [] } },
                        index: 0,
                        parent: 
                         { type: 'VariableDeclaration',
                           declarations: 
                            [ { type: 'VariableDeclarator',
                                id: { type: 'Identifier', name: 'app' },
                                init: 
                                 { type: 'CallExpression',
                                   callee: 
                                    { type: 'CallExpression',
                                      callee: { type: 'Identifier', name: 'require' },
                                      arguments: [ { type: 'Literal', value: 'express', raw: '\'express\'' } ] },
                                   arguments: [] } } ],
                           kind: 'var' } } ],
                   tainted: false,
                   stack: true,
                   scope: [Circular] },
                '$_rep': 
                 { name: '_rep',
                   identifiers: [ { type: 'Identifier', name: '_rep' } ],
                   references: [],
                   defs: 
                    [ { type: 'Variable',
                        name: { type: 'Identifier', name: '_rep' },
                        node: 
                         { type: 'VariableDeclarator',
                           id: { type: 'Identifier', name: '_rep' },
                           init: { type: 'Literal', value: 42, raw: '42' } },
                        index: 0,
                        parent: 
                         { type: 'VariableDeclaration',
                           declarations: 
                            [ { type: 'VariableDeclarator',
                                id: { type: 'Identifier', name: '_rep' },
                                init: { type: 'Literal', value: 42, raw: '42' } } ],
                           kind: 'var' } } ],
                   tainted: false,
                   stack: true,
                   scope: [Circular] } } },
          taints: { __data: {} },
          dynamic: true,
          block: 
           { type: 'Program',
             body: 
              [ { type: 'VariableDeclaration',
                  declarations: 
                   [ { type: 'VariableDeclarator',
                       id: { type: 'Identifier', name: 'app' },
                       init: 
                        { type: 'CallExpression',
                          callee: 
                           { type: 'CallExpression',
                             callee: { type: 'Identifier', name: 'require' },
                             arguments: [ { type: 'Literal', value: 'express', raw: '\'express\'' } ] },
                          arguments: [] } } ],
                  kind: 'var' },
                { type: 'VariableDeclaration',
                  declarations: 
                   [ { type: 'VariableDeclarator',
                       id: { type: 'Identifier', name: '_rep' },
                       init: { type: 'Literal', value: 42, raw: '42' } } ],
                  kind: 'var' },
                { type: 'ExpressionStatement',
                  expression: 
                   { type: 'CallExpression',
                     callee: 
                      { type: 'MemberExpression',
                        computed: false,
                        object: { type: 'Identifier', name: 'app' },
                        property: { type: 'Identifier', name: 'get' } },
                     arguments: 
                      [ { type: 'Literal', value: '/A', raw: '"/A"' },
                        { type: 'FunctionExpression',
                          id: { type: 'Identifier', name: 'replyA' },
                          params: 
                           [ { type: 'Identifier', name: 'req' },
                             { type: 'Identifier', name: 'res' } ],
                          defaults: [],
                          body: 
                           { type: 'BlockStatement',
                             body: 
                              [ { type: 'ExpressionStatement',
                                  expression: 
                                   { type: 'CallExpression',
                                     callee: 
                                      { type: 'MemberExpression',
                                        computed: false,
                                        object: { type: 'Identifier', name: 'res' },
                                        property: { type: 'Identifier', name: 'send' } },
                                     arguments: 
                                      [ { type: 'BinaryExpression',
                                          operator: '+',
                                          left: { type: 'Literal', value: '', raw: '""' },
                                          right: { type: 'Identifier', name: '_rep' } } ] } },
                                { type: 'ExpressionStatement',
                                  expression: 
                                   { type: 'AssignmentExpression',
                                     operator: '+=',
                                     left: { type: 'Identifier', name: '_rep' },
                                     right: { type: 'Literal', value: 1, raw: '1' } } } ] },
                          rest: null,
                          generator: false,
                          expression: false } ] } },
                { type: 'ExpressionStatement',
                  expression: 
                   { type: 'CallExpression',
                     callee: 
                      { type: 'MemberExpression',
                        computed: false,
                        object: { type: 'Identifier', name: 'app' },
                        property: { type: 'Identifier', name: 'get' } },
                     arguments: 
                      [ { type: 'Literal', value: '/B', raw: '"/B"' },
                        { type: 'FunctionExpression',
                          id: { type: 'Identifier', name: 'replyB' },
                          params: 
                           [ { type: 'Identifier', name: 'req' },
                             { type: 'Identifier', name: 'res' } ],
                          defaults: [],
                          body: 
                           { type: 'BlockStatement',
                             body: 
                              [ { type: 'ExpressionStatement',
                                  expression: 
                                   { type: 'CallExpression',
                                     callee: 
                                      { type: 'MemberExpression',
                                        computed: false,
                                        object: { type: 'Identifier', name: 'res' },
                                        property: { type: 'Identifier', name: 'send' } },
                                     arguments: 
                                      [ { type: 'BinaryExpression',
                                          operator: '+',
                                          left: { type: 'Literal', value: '', raw: '""' },
                                          right: { type: 'Identifier', name: '_rep' } } ] } },
                                { type: 'ExpressionStatement',
                                  expression: 
                                   { type: 'AssignmentExpression',
                                     operator: '+=',
                                     left: { type: 'Identifier', name: '_rep' },
                                     right: { type: 'Literal', value: 2, raw: '2' } } } ] },
                          rest: null,
                          generator: false,
                          expression: false } ] } },
                { type: 'IfStatement',
                  test: 
                   { type: 'UnaryExpression',
                     operator: '!',
                     argument: 
                      { type: 'MemberExpression',
                        computed: false,
                        object: { type: 'Identifier', name: 'module' },
                        property: { type: 'Identifier', name: 'parent' } },
                     prefix: true },
                  consequent: 
                   { type: 'BlockStatement',
                     body: 
                      [ { type: 'ExpressionStatement',
                          expression: 
                           { type: 'CallExpression',
                             callee: 
                              { type: 'MemberExpression',
                                computed: false,
                                object: { type: 'Identifier', name: 'app' },
                                property: { type: 'Identifier', name: 'listen' } },
                             arguments: [ { type: 'Literal', value: 8080, raw: '8080' } ] } },
                        { type: 'ExpressionStatement',
                          expression: 
                           { type: 'CallExpression',
                             callee: 
                              { type: 'MemberExpression',
                                computed: false,
                                object: { type: 'Identifier', name: 'console' },
                                property: { type: 'Identifier', name: 'log' } },
                             arguments: 
                              [ { type: 'Literal',
                                  value: '>> listening 8080',
                                  raw: '">> listening 8080"' } ] } } ] },
                  alternate: null },
                { type: 'ExpressionStatement',
                  expression: 
                   { type: 'AssignmentExpression',
                     operator: '=',
                     left: 
                      { type: 'MemberExpression',
                        computed: false,
                        object: { type: 'Identifier', name: 'exports' },
                        property: { type: 'Identifier', name: 'app' } },
                     right: { type: 'Identifier', name: 'app' } } } ] },
          through: 
           [ { identifier: { type: 'Identifier', name: 'app' },
               from: [Circular],
               tainted: false,
               resolved: null,
               flag: 2,
               writeExpr: 
                { type: 'CallExpression',
                  callee: 
                   { type: 'CallExpression',
                     callee: { type: 'Identifier', name: 'require' },
                     arguments: [ { type: 'Literal', value: 'express', raw: '\'express\'' } ] },
                  arguments: [] },
               __maybeImplicitGlobal: false },
             { identifier: { type: 'Identifier', name: 'require' },
               from: [Circular],
               tainted: false,
               resolved: null,
               flag: 1,
               __maybeImplicitGlobal: undefined },
             { identifier: { type: 'Identifier', name: '_rep' },
               from: [Circular],
               tainted: false,
               resolved: null,
               flag: 2,
               writeExpr: { type: 'Literal', value: 42, raw: '42' },
               __maybeImplicitGlobal: false },
             { identifier: { type: 'Identifier', name: 'app' },
               from: [Circular],
               tainted: false,
               resolved: null,
               flag: 1,
               __maybeImplicitGlobal: undefined },
             { identifier: { type: 'Identifier', name: '_rep' },
               from: 
                { type: 'function',
                  set: 
                   { __data: 
                      { '$arguments': 
                         { name: 'arguments',
                           identifiers: [],
                           references: [],
                           defs: [],
                           tainted: false,
                           stack: true,
                           scope: [Circular] },
                        '$req': 
                         { name: 'req',
                           identifiers: [ { type: 'Identifier', name: 'req' } ],
                           references: [],
                           defs: 
                            [ { type: 'Parameter',
                                name: { type: 'Identifier', name: 'req' },
                                node: 
                                 { type: 'FunctionExpression',
                                   id: { type: 'Identifier', name: 'replyA' },
                                   params: 
                                    [ { type: 'Identifier', name: 'req' },
                                      { type: 'Identifier', name: 'res' } ],
                                   defaults: [],
                                   body: 
                                    { type: 'BlockStatement',
                                      body: 
                                       [ { type: 'ExpressionStatement',
                                           expression: 
                                            { type: 'CallExpression',
                                              callee: 
                                               { type: 'MemberExpression',
                                                 computed: false,
                                                 object: { type: 'Identifier', name: 'res' },
                                                 property: { type: 'Identifier', name: 'send' } },
                                              arguments: 
                                               [ { type: 'BinaryExpression',
                                                   operator: '+',
                                                   left: { type: 'Literal', value: '', raw: '""' },
                                                   right: { type: 'Identifier', name: '_rep' } } ] } },
                                         { type: 'ExpressionStatement',
                                           expression: 
                                            { type: 'AssignmentExpression',
                                              operator: '+=',
                                              left: { type: 'Identifier', name: '_rep' },
                                              right: { type: 'Literal', value: 1, raw: '1' } } } ] },
                                   rest: null,
                                   generator: false,
                                   expression: false },
                                index: 0 } ],
                           tainted: false,
                           stack: true,
                           scope: [Circular] },
                        '$res': 
                         { name: 'res',
                           identifiers: [ { type: 'Identifier', name: 'res' } ],
                           references: 
                            [ { identifier: { type: 'Identifier', name: 'res' },
                                from: [Circular],
                                tainted: false,
                                resolved: [Circular],
                                flag: 1,
                                __maybeImplicitGlobal: undefined } ],
                           defs: 
                            [ { type: 'Parameter',
                                name: { type: 'Identifier', name: 'res' },
                                node: 
                                 { type: 'FunctionExpression',
                                   id: { type: 'Identifier', name: 'replyA' },
                                   params: 
                                    [ { type: 'Identifier', name: 'req' },
                                      { type: 'Identifier', name: 'res' } ],
                                   defaults: [],
                                   body: 
                                    { type: 'BlockStatement',
                                      body: 
                                       [ { type: 'ExpressionStatement',
                                           expression: 
                                            { type: 'CallExpression',
                                              callee: 
                                               { type: 'MemberExpression',
                                                 computed: false,
                                                 object: { type: 'Identifier', name: 'res' },
                                                 property: { type: 'Identifier', name: 'send' } },
                                              arguments: 
                                               [ { type: 'BinaryExpression',
                                                   operator: '+',
                                                   left: { type: 'Literal', value: '', raw: '""' },
                                                   right: { type: 'Identifier', name: '_rep' } } ] } },
                                         { type: 'ExpressionStatement',
                                           expression: 
                                            { type: 'AssignmentExpression',
                                              operator: '+=',
                                              left: { type: 'Identifier', name: '_rep' },
                                              right: { type: 'Literal', value: 1, raw: '1' } } } ] },
                                   rest: null,
                                   generator: false,
                                   expression: false },
                                index: 1 } ],
                           tainted: false,
                           stack: true,
                           scope: [Circular] } } },
                  taints: { __data: { '$arguments': true } },
                  dynamic: false,
                  block: 
                   { type: 'FunctionExpression',
                     id: { type: 'Identifier', name: 'replyA' },
                     params: 
                      [ { type: 'Identifier', name: 'req' },
                        { type: 'Identifier', name: 'res' } ],
                     defaults: [],
                     body: 
                      { type: 'BlockStatement',
                        body: 
                         [ { type: 'ExpressionStatement',
                             expression: 
                              { type: 'CallExpression',
                                callee: 
                                 { type: 'MemberExpression',
                                   computed: false,
                                   object: { type: 'Identifier', name: 'res' },
                                   property: { type: 'Identifier', name: 'send' } },
                                arguments: 
                                 [ { type: 'BinaryExpression',
                                     operator: '+',
                                     left: { type: 'Literal', value: '', raw: '""' },
                                     right: { type: 'Identifier', name: '_rep' } } ] } },
                           { type: 'ExpressionStatement',
                             expression: 
                              { type: 'AssignmentExpression',
                                operator: '+=',
                                left: { type: 'Identifier', name: '_rep' },
                                right: { type: 'Literal', value: 1, raw: '1' } } } ] },
                     rest: null,
                     generator: false,
                     expression: false },
                  through: 
                   [ [Circular],
                     { identifier: { type: 'Identifier', name: '_rep' },
                       from: [Circular],
                       tainted: false,
                       resolved: null,
                       flag: 3,
                       writeExpr: { type: 'Literal', value: 1, raw: '1' },
                       __maybeImplicitGlobal: undefined } ],
                  variables: 
                   [ { name: 'arguments',
                       identifiers: [],
                       references: [],
                       defs: [],
                       tainted: false,
                       stack: true,
                       scope: [Circular] },
                     { name: 'req',
                       identifiers: [ { type: 'Identifier', name: 'req' } ],
                       references: [],
                       defs: 
                        [ { type: 'Parameter',
                            name: { type: 'Identifier', name: 'req' },
                            node: 
                             { type: 'FunctionExpression',
                               id: { type: 'Identifier', name: 'replyA' },
                               params: 
                                [ { type: 'Identifier', name: 'req' },
                                  { type: 'Identifier', name: 'res' } ],
                               defaults: [],
                               body: 
                                { type: 'BlockStatement',
                                  body: 
                                   [ { type: 'ExpressionStatement',
                                       expression: 
                                        { type: 'CallExpression',
                                          callee: 
                                           { type: 'MemberExpression',
                                             computed: false,
                                             object: { type: 'Identifier', name: 'res' },
                                             property: { type: 'Identifier', name: 'send' } },
                                          arguments: 
                                           [ { type: 'BinaryExpression',
                                               operator: '+',
                                               left: { type: 'Literal', value: '', raw: '""' },
                                               right: { type: 'Identifier', name: '_rep' } } ] } },
                                     { type: 'ExpressionStatement',
                                       expression: 
                                        { type: 'AssignmentExpression',
                                          operator: '+=',
                                          left: { type: 'Identifier', name: '_rep' },
                                          right: { type: 'Literal', value: 1, raw: '1' } } } ] },
                               rest: null,
                               generator: false,
                               expression: false },
                            index: 0 } ],
                       tainted: false,
                       stack: true,
                       scope: [Circular] },
                     { name: 'res',
                       identifiers: [ { type: 'Identifier', name: 'res' } ],
                       references: 
                        [ { identifier: { type: 'Identifier', name: 'res' },
                            from: [Circular],
                            tainted: false,
                            resolved: [Circular],
                            flag: 1,
                            __maybeImplicitGlobal: undefined } ],
                       defs: 
                        [ { type: 'Parameter',
                            name: { type: 'Identifier', name: 'res' },
                            node: 
                             { type: 'FunctionExpression',
                               id: { type: 'Identifier', name: 'replyA' },
                               params: 
                                [ { type: 'Identifier', name: 'req' },
                                  { type: 'Identifier', name: 'res' } ],
                               defaults: [],
                               body: 
                                { type: 'BlockStatement',
                                  body: 
                                   [ { type: 'ExpressionStatement',
                                       expression: 
                                        { type: 'CallExpression',
                                          callee: 
                                           { type: 'MemberExpression',
                                             computed: false,
                                             object: { type: 'Identifier', name: 'res' },
                                             property: { type: 'Identifier', name: 'send' } },
                                          arguments: 
                                           [ { type: 'BinaryExpression',
                                               operator: '+',
                                               left: { type: 'Literal', value: '', raw: '""' },
                                               right: { type: 'Identifier', name: '_rep' } } ] } },
                                     { type: 'ExpressionStatement',
                                       expression: 
                                        { type: 'AssignmentExpression',
                                          operator: '+=',
                                          left: { type: 'Identifier', name: '_rep' },
                                          right: { type: 'Literal', value: 1, raw: '1' } } } ] },
                               rest: null,
                               generator: false,
                               expression: false },
                            index: 1 } ],
                       tainted: false,
                       stack: true,
                       scope: [Circular] } ],
                  references: 
                   [ { identifier: { type: 'Identifier', name: 'res' },
                       from: [Circular],
                       tainted: false,
                       resolved: 
                        { name: 'res',
                          identifiers: [ { type: 'Identifier', name: 'res' } ],
                          references: [ [Circular] ],
                          defs: 
                           [ { type: 'Parameter',
                               name: { type: 'Identifier', name: 'res' },
                               node: 
                                { type: 'FunctionExpression',
                                  id: { type: 'Identifier', name: 'replyA' },
                                  params: 
                                   [ { type: 'Identifier', name: 'req' },
                                     { type: 'Identifier', name: 'res' } ],
                                  defaults: [],
                                  body: 
                                   { type: 'BlockStatement',
                                     body: 
                                      [ { type: 'ExpressionStatement',
                                          expression: 
                                           { type: 'CallExpression',
                                             callee: 
                                              { type: 'MemberExpression',
                                                computed: false,
                                                object: { type: 'Identifier', name: 'res' },
                                                property: { type: 'Identifier', name: 'send' } },
                                             arguments: 
                                              [ { type: 'BinaryExpression',
                                                  operator: '+',
                                                  left: { type: 'Literal', value: '', raw: '""' },
                                                  right: { type: 'Identifier', name: '_rep' } } ] } },
                                        { type: 'ExpressionStatement',
                                          expression: 
                                           { type: 'AssignmentExpression',
                                             operator: '+=',
                                             left: { type: 'Identifier', name: '_rep' },
                                             right: { type: 'Literal', value: 1, raw: '1' } } } ] },
                                  rest: null,
                                  generator: false,
                                  expression: false },
                               index: 1 } ],
                          tainted: false,
                          stack: true,
                          scope: [Circular] },
                       flag: 1,
                       __maybeImplicitGlobal: undefined },
                     [Circular],
                     { identifier: { type: 'Identifier', name: '_rep' },
                       from: [Circular],
                       tainted: false,
                       resolved: null,
                       flag: 3,
                       writeExpr: { type: 'Literal', value: 1, raw: '1' },
                       __maybeImplicitGlobal: undefined } ],
                  left: null,
                  variableScope: [Circular],
                  functionExpressionScope: false,
                  directCallToEvalScope: false,
                  thisFound: false,
                  upper: 
                   { type: 'function',
                     set: 
                      { __data: 
                         { '$replyA': 
                            { name: 'replyA',
                              identifiers: [ { type: 'Identifier', name: 'replyA' } ],
                              references: [],
                              defs: 
                               [ { type: 'FunctionName',
                                   name: { type: 'Identifier', name: 'replyA' },
                                   node: 
                                    { type: 'FunctionExpression',
                                      id: { type: 'Identifier', name: 'replyA' },
                                      params: 
                                       [ { type: 'Identifier', name: 'req' },
                                         { type: 'Identifier', name: 'res' } ],
                                      defaults: [],
                                      body: 
                                       { type: 'BlockStatement',
                                         body: 
                                          [ { type: 'ExpressionStatement',
                                              expression: 
                                               { type: 'CallExpression',
                                                 callee: 
                                                  { type: 'MemberExpression',
                                                    computed: false,
                                                    object: { type: 'Identifier', name: 'res' },
                                                    property: { type: 'Identifier', name: 'send' } },
                                                 arguments: 
                                                  [ { type: 'BinaryExpression',
                                                      operator: '+',
                                                      left: { type: 'Literal', value: '', raw: '""' },
                                                      right: { type: 'Identifier', name: '_rep' } } ] } },
                                            { type: 'ExpressionStatement',
                                              expression: 
                                               { type: 'AssignmentExpression',
                                                 operator: '+=',
                                                 left: { type: 'Identifier', name: '_rep' },
                                                 right: { type: 'Literal', value: 1, raw: '1' } } } ] },
                                      rest: null,
                                      generator: false,
                                      expression: false } } ],
                              tainted: false,
                              stack: true,
                              scope: [Circular] } } },
                     taints: { __data: {} },
                     dynamic: false,
                     block: 
                      { type: 'FunctionExpression',
                        id: { type: 'Identifier', name: 'replyA' },
                        params: 
                         [ { type: 'Identifier', name: 'req' },
                           { type: 'Identifier', name: 'res' } ],
                        defaults: [],
                        body: 
                         { type: 'BlockStatement',
                           body: 
                            [ { type: 'ExpressionStatement',
                                expression: 
                                 { type: 'CallExpression',
                                   callee: 
                                    { type: 'MemberExpression',
                                      computed: false,
                                      object: { type: 'Identifier', name: 'res' },
                                      property: { type: 'Identifier', name: 'send' } },
                                   arguments: 
                                    [ { type: 'BinaryExpression',
                                        operator: '+',
                                        left: { type: 'Literal', value: '', raw: '""' },
                                        right: { type: 'Identifier', name: '_rep' } } ] } },
                              { type: 'ExpressionStatement',
                                expression: 
                                 { type: 'AssignmentExpression',
                                   operator: '+=',
                                   left: { type: 'Identifier', name: '_rep' },
                                   right: { type: 'Literal', value: 1, raw: '1' } } } ] },
                        rest: null,
                        generator: false,
                        expression: false },
                     through: 
                      [ [Circular],
                        { identifier: { type: 'Identifier', name: '_rep' },
                          from: [Circular],
                          tainted: false,
                          resolved: null,
                          flag: 3,
                          writeExpr: { type: 'Literal', value: 1, raw: '1' },
                          __maybeImplicitGlobal: undefined } ],
                     variables: 
                      [ { name: 'replyA',
                          identifiers: [ { type: 'Identifier', name: 'replyA' } ],
                          references: [],
                          defs: 
                           [ { type: 'FunctionName',
                               name: { type: 'Identifier', name: 'replyA' },
                               node: 
                                { type: 'FunctionExpression',
                                  id: { type: 'Identifier', name: 'replyA' },
                                  params: 
                                   [ { type: 'Identifier', name: 'req' },
                                     { type: 'Identifier', name: 'res' } ],
                                  defaults: [],
                                  body: 
                                   { type: 'BlockStatement',
                                     body: 
                                      [ { type: 'ExpressionStatement',
                                          expression: 
                                           { type: 'CallExpression',
                                             callee: 
                                              { type: 'MemberExpression',
                                                computed: false,
                                                object: { type: 'Identifier', name: 'res' },
                                                property: { type: 'Identifier', name: 'send' } },
                                             arguments: 
                                              [ { type: 'BinaryExpression',
                                                  operator: '+',
                                                  left: { type: 'Literal', value: '', raw: '""' },
                                                  right: { type: 'Identifier', name: '_rep' } } ] } },
                                        { type: 'ExpressionStatement',
                                          expression: 
                                           { type: 'AssignmentExpression',
                                             operator: '+=',
                                             left: { type: 'Identifier', name: '_rep' },
                                             right: { type: 'Literal', value: 1, raw: '1' } } } ] },
                                  rest: null,
                                  generator: false,
                                  expression: false } } ],
                          tainted: false,
                          stack: true,
                          scope: [Circular] } ],
                     references: [],
                     left: null,
                     variableScope: [Circular],
                     functionExpressionScope: true,
                     directCallToEvalScope: false,
                     thisFound: false,
                     upper: [Circular],
                     isStrict: false,
                     childScopes: [ [Circular] ] },
                  isStrict: false,
                  childScopes: [] },
               tainted: false,
               resolved: null,
               flag: 1,
               __maybeImplicitGlobal: undefined },
             { identifier: { type: 'Identifier', name: '_rep' },
               from: 
                { type: 'function',
                  set: 
                   { __data: 
                      { '$arguments': 
                         { name: 'arguments',
                           identifiers: [],
                           references: [],
                           defs: [],
                           tainted: false,
                           stack: true,
                           scope: [Circular] },
                        '$req': 
                         { name: 'req',
                           identifiers: [ { type: 'Identifier', name: 'req' } ],
                           references: [],
                           defs: 
                            [ { type: 'Parameter',
                                name: { type: 'Identifier', name: 'req' },
                                node: 
                                 { type: 'FunctionExpression',
                                   id: { type: 'Identifier', name: 'replyA' },
                                   params: 
                                    [ { type: 'Identifier', name: 'req' },
                                      { type: 'Identifier', name: 'res' } ],
                                   defaults: [],
                                   body: 
                                    { type: 'BlockStatement',
                                      body: 
                                       [ { type: 'ExpressionStatement',
                                           expression: 
                                            { type: 'CallExpression',
                                              callee: 
                                               { type: 'MemberExpression',
                                                 computed: false,
                                                 object: { type: 'Identifier', name: 'res' },
                                                 property: { type: 'Identifier', name: 'send' } },
                                              arguments: 
                                               [ { type: 'BinaryExpression',
                                                   operator: '+',
                                                   left: { type: 'Literal', value: '', raw: '""' },
                                                   right: { type: 'Identifier', name: '_rep' } } ] } },
                                         { type: 'ExpressionStatement',
                                           expression: 
                                            { type: 'AssignmentExpression',
                                              operator: '+=',
                                              left: { type: 'Identifier', name: '_rep' },
                                              right: { type: 'Literal', value: 1, raw: '1' } } } ] },
                                   rest: null,
                                   generator: false,
                                   expression: false },
                                index: 0 } ],
                           tainted: false,
                           stack: true,
                           scope: [Circular] },
                        '$res': 
                         { name: 'res',
                           identifiers: [ { type: 'Identifier', name: 'res' } ],
                           references: 
                            [ { identifier: { type: 'Identifier', name: 'res' },
                                from: [Circular],
                                tainted: false,
                                resolved: [Circular],
                                flag: 1,
                                __maybeImplicitGlobal: undefined } ],
                           defs: 
                            [ { type: 'Parameter',
                                name: { type: 'Identifier', name: 'res' },
                                node: 
                                 { type: 'FunctionExpression',
                                   id: { type: 'Identifier', name: 'replyA' },
                                   params: 
                                    [ { type: 'Identifier', name: 'req' },
                                      { type: 'Identifier', name: 'res' } ],
                                   defaults: [],
                                   body: 
                                    { type: 'BlockStatement',
                                      body: 
                                       [ { type: 'ExpressionStatement',
                                           expression: 
                                            { type: 'CallExpression',
                                              callee: 
                                               { type: 'MemberExpression',
                                                 computed: false,
                                                 object: { type: 'Identifier', name: 'res' },
                                                 property: { type: 'Identifier', name: 'send' } },
                                              arguments: 
                                               [ { type: 'BinaryExpression',
                                                   operator: '+',
                                                   left: { type: 'Literal', value: '', raw: '""' },
                                                   right: { type: 'Identifier', name: '_rep' } } ] } },
                                         { type: 'ExpressionStatement',
                                           expression: 
                                            { type: 'AssignmentExpression',
                                              operator: '+=',
                                              left: { type: 'Identifier', name: '_rep' },
                                              right: { type: 'Literal', value: 1, raw: '1' } } } ] },
                                   rest: null,
                                   generator: false,
                                   expression: false },
                                index: 1 } ],
                           tainted: false,
                           stack: true,
                           scope: [Circular] } } },
                  taints: { __data: { '$arguments': true } },
                  dynamic: false,
                  block: 
                   { type: 'FunctionExpression',
                     id: { type: 'Identifier', name: 'replyA' },
                     params: 
                      [ { type: 'Identifier', name: 'req' },
                        { type: 'Identifier', name: 'res' } ],
                     defaults: [],
                     body: 
                      { type: 'BlockStatement',
                        body: 
                         [ { type: 'ExpressionStatement',
                             expression: 
                              { type: 'CallExpression',
                                callee: 
                                 { type: 'MemberExpression',
                                   computed: false,
                                   object: { type: 'Identifier', name: 'res' },
                                   property: { type: 'Identifier', name: 'send' } },
                                arguments: 
                                 [ { type: 'BinaryExpression',
                                     operator: '+',
                                     left: { type: 'Literal', value: '', raw: '""' },
                                     right: { type: 'Identifier', name: '_rep' } } ] } },
                           { type: 'ExpressionStatement',
                             expression: 
                              { type: 'AssignmentExpression',
                                operator: '+=',
                                left: { type: 'Identifier', name: '_rep' },
                                right: { type: 'Literal', value: 1, raw: '1' } } } ] },
                     rest: null,
                     generator: false,
                     expression: false },
                  through: 
                   [ { identifier: { type: 'Identifier', name: '_rep' },
                       from: [Circular],
                       tainted: false,
                       resolved: null,
                       flag: 1,
                       __maybeImplicitGlobal: undefined },
                     [Circular] ],
                  variables: 
                   [ { name: 'arguments',
                       identifiers: [],
                       references: [],
                       defs: [],
                       tainted: false,
                       stack: true,
                       scope: [Circular] },
                     { name: 'req',
                       identifiers: [ { type: 'Identifier', name: 'req' } ],
                       references: [],
                       defs: 
                        [ { type: 'Parameter',
                            name: { type: 'Identifier', name: 'req' },
                            node: 
                             { type: 'FunctionExpression',
                               id: { type: 'Identifier', name: 'replyA' },
                               params: 
                                [ { type: 'Identifier', name: 'req' },
                                  { type: 'Identifier', name: 'res' } ],
                               defaults: [],
                               body: 
                                { type: 'BlockStatement',
                                  body: 
                                   [ { type: 'ExpressionStatement',
                                       expression: 
                                        { type: 'CallExpression',
                                          callee: 
                                           { type: 'MemberExpression',
                                             computed: false,
                                             object: { type: 'Identifier', name: 'res' },
                                             property: { type: 'Identifier', name: 'send' } },
                                          arguments: 
                                           [ { type: 'BinaryExpression',
                                               operator: '+',
                                               left: { type: 'Literal', value: '', raw: '""' },
                                               right: { type: 'Identifier', name: '_rep' } } ] } },
                                     { type: 'ExpressionStatement',
                                       expression: 
                                        { type: 'AssignmentExpression',
                                          operator: '+=',
                                          left: { type: 'Identifier', name: '_rep' },
                                          right: { type: 'Literal', value: 1, raw: '1' } } } ] },
                               rest: null,
                               generator: false,
                               expression: false },
                            index: 0 } ],
                       tainted: false,
                       stack: true,
                       scope: [Circular] },
                     { name: 'res',
                       identifiers: [ { type: 'Identifier', name: 'res' } ],
                       references: 
                        [ { identifier: { type: 'Identifier', name: 'res' },
                            from: [Circular],
                            tainted: false,
                            resolved: [Circular],
                            flag: 1,
                            __maybeImplicitGlobal: undefined } ],
                       defs: 
                        [ { type: 'Parameter',
                            name: { type: 'Identifier', name: 'res' },
                            node: 
                             { type: 'FunctionExpression',
                               id: { type: 'Identifier', name: 'replyA' },
                               params: 
                                [ { type: 'Identifier', name: 'req' },
                                  { type: 'Identifier', name: 'res' } ],
                               defaults: [],
                               body: 
                                { type: 'BlockStatement',
                                  body: 
                                   [ { type: 'ExpressionStatement',
                                       expression: 
                                        { type: 'CallExpression',
                                          callee: 
                                           { type: 'MemberExpression',
                                             computed: false,
                                             object: { type: 'Identifier', name: 'res' },
                                             property: { type: 'Identifier', name: 'send' } },
                                          arguments: 
                                           [ { type: 'BinaryExpression',
                                               operator: '+',
                                               left: { type: 'Literal', value: '', raw: '""' },
                                               right: { type: 'Identifier', name: '_rep' } } ] } },
                                     { type: 'ExpressionStatement',
                                       expression: 
                                        { type: 'AssignmentExpression',
                                          operator: '+=',
                                          left: { type: 'Identifier', name: '_rep' },
                                          right: { type: 'Literal', value: 1, raw: '1' } } } ] },
                               rest: null,
                               generator: false,
                               expression: false },
                            index: 1 } ],
                       tainted: false,
                       stack: true,
                       scope: [Circular] } ],
                  references: 
                   [ { identifier: { type: 'Identifier', name: 'res' },
                       from: [Circular],
                       tainted: false,
                       resolved: 
                        { name: 'res',
                          identifiers: [ { type: 'Identifier', name: 'res' } ],
                          references: [ [Circular] ],
                          defs: 
                           [ { type: 'Parameter',
                               name: { type: 'Identifier', name: 'res' },
                               node: 
                                { type: 'FunctionExpression',
                                  id: { type: 'Identifier', name: 'replyA' },
                                  params: 
                                   [ { type: 'Identifier', name: 'req' },
                                     { type: 'Identifier', name: 'res' } ],
                                  defaults: [],
                                  body: 
                                   { type: 'BlockStatement',
                                     body: 
                                      [ { type: 'ExpressionStatement',
                                          expression: 
                                           { type: 'CallExpression',
                                             callee: 
                                              { type: 'MemberExpression',
                                                computed: false,
                                                object: { type: 'Identifier', name: 'res' },
                                                property: { type: 'Identifier', name: 'send' } },
                                             arguments: 
                                              [ { type: 'BinaryExpression',
                                                  operator: '+',
                                                  left: { type: 'Literal', value: '', raw: '""' },
                                                  right: { type: 'Identifier', name: '_rep' } } ] } },
                                        { type: 'ExpressionStatement',
                                          expression: 
                                           { type: 'AssignmentExpression',
                                             operator: '+=',
                                             left: { type: 'Identifier', name: '_rep' },
                                             right: { type: 'Literal', value: 1, raw: '1' } } } ] },
                                  rest: null,
                                  generator: false,
                                  expression: false },
                               index: 1 } ],
                          tainted: false,
                          stack: true,
                          scope: [Circular] },
                       flag: 1,
                       __maybeImplicitGlobal: undefined },
                     { identifier: { type: 'Identifier', name: '_rep' },
                       from: [Circular],
                       tainted: false,
                       resolved: null,
                       flag: 1,
                       __maybeImplicitGlobal: undefined },
                     [Circular] ],
                  left: null,
                  variableScope: [Circular],
                  functionExpressionScope: false,
                  directCallToEvalScope: false,
                  thisFound: false,
                  upper: 
                   { type: 'function',
                     set: 
                      { __data: 
                         { '$replyA': 
                            { name: 'replyA',
                              identifiers: [ { type: 'Identifier', name: 'replyA' } ],
                              references: [],
                              defs: 
                               [ { type: 'FunctionName',
                                   name: { type: 'Identifier', name: 'replyA' },
                                   node: 
                                    { type: 'FunctionExpression',
                                      id: { type: 'Identifier', name: 'replyA' },
                                      params: 
                                       [ { type: 'Identifier', name: 'req' },
                                         { type: 'Identifier', name: 'res' } ],
                                      defaults: [],
                                      body: 
                                       { type: 'BlockStatement',
                                         body: 
                                          [ { type: 'ExpressionStatement',
                                              expression: 
                                               { type: 'CallExpression',
                                                 callee: 
                                                  { type: 'MemberExpression',
                                                    computed: false,
                                                    object: { type: 'Identifier', name: 'res' },
                                                    property: { type: 'Identifier', name: 'send' } },
                                                 arguments: 
                                                  [ { type: 'BinaryExpression',
                                                      operator: '+',
                                                      left: { type: 'Literal', value: '', raw: '""' },
                                                      right: { type: 'Identifier', name: '_rep' } } ] } },
                                            { type: 'ExpressionStatement',
                                              expression: 
                                               { type: 'AssignmentExpression',
                                                 operator: '+=',
                                                 left: { type: 'Identifier', name: '_rep' },
                                                 right: { type: 'Literal', value: 1, raw: '1' } } } ] },
                                      rest: null,
                                      generator: false,
                                      expression: false } } ],
                              tainted: false,
                              stack: true,
                              scope: [Circular] } } },
                     taints: { __data: {} },
                     dynamic: false,
                     block: 
                      { type: 'FunctionExpression',
                        id: { type: 'Identifier', name: 'replyA' },
                        params: 
                         [ { type: 'Identifier', name: 'req' },
                           { type: 'Identifier', name: 'res' } ],
                        defaults: [],
                        body: 
                         { type: 'BlockStatement',
                           body: 
                            [ { type: 'ExpressionStatement',
                                expression: 
                                 { type: 'CallExpression',
                                   callee: 
                                    { type: 'MemberExpression',
                                      computed: false,
                                      object: { type: 'Identifier', name: 'res' },
                                      property: { type: 'Identifier', name: 'send' } },
                                   arguments: 
                                    [ { type: 'BinaryExpression',
                                        operator: '+',
                                        left: { type: 'Literal', value: '', raw: '""' },
                                        right: { type: 'Identifier', name: '_rep' } } ] } },
                              { type: 'ExpressionStatement',
                                expression: 
                                 { type: 'AssignmentExpression',
                                   operator: '+=',
                                   left: { type: 'Identifier', name: '_rep' },
                                   right: { type: 'Literal', value: 1, raw: '1' } } } ] },
                        rest: null,
                        generator: false,
                        expression: false },
                     through: 
                      [ { identifier: { type: 'Identifier', name: '_rep' },
                          from: [Circular],
                          tainted: false,
                          resolved: null,
                          flag: 1,
                          __maybeImplicitGlobal: undefined },
                        [Circular] ],
                     variables: 
                      [ { name: 'replyA',
                          identifiers: [ { type: 'Identifier', name: 'replyA' } ],
                          references: [],
                          defs: 
                           [ { type: 'FunctionName',
                               name: { type: 'Identifier', name: 'replyA' },
                               node: 
                                { type: 'FunctionExpression',
                                  id: { type: 'Identifier', name: 'replyA' },
                                  params: 
                                   [ { type: 'Identifier', name: 'req' },
                                     { type: 'Identifier', name: 'res' } ],
                                  defaults: [],
                                  body: 
                                   { type: 'BlockStatement',
                                     body: 
                                      [ { type: 'ExpressionStatement',
                                          expression: 
                                           { type: 'CallExpression',
                                             callee: 
                                              { type: 'MemberExpression',
                                                computed: false,
                                                object: { type: 'Identifier', name: 'res' },
                                                property: { type: 'Identifier', name: 'send' } },
                                             arguments: 
                                              [ { type: 'BinaryExpression',
                                                  operator: '+',
                                                  left: { type: 'Literal', value: '', raw: '""' },
                                                  right: { type: 'Identifier', name: '_rep' } } ] } },
                                        { type: 'ExpressionStatement',
                                          expression: 
                                           { type: 'AssignmentExpression',
                                             operator: '+=',
                                             left: { type: 'Identifier', name: '_rep' },
                                             right: { type: 'Literal', value: 1, raw: '1' } } } ] },
                                  rest: null,
                                  generator: false,
                                  expression: false } } ],
                          tainted: false,
                          stack: true,
                          scope: [Circular] } ],
                     references: [],
                     left: null,
                     variableScope: [Circular],
                     functionExpressionScope: true,
                     directCallToEvalScope: false,
                     thisFound: false,
                     upper: [Circular],
                     isStrict: false,
                     childScopes: [ [Circular] ] },
                  isStrict: false,
                  childScopes: [] },
               tainted: false,
               resolved: null,
               flag: 3,
               writeExpr: { type: 'Literal', value: 1, raw: '1' },
               __maybeImplicitGlobal: undefined },
             { identifier: { type: 'Identifier', name: 'app' },
               from: [Circular],
               tainted: false,
               resolved: null,
               flag: 1,
               __maybeImplicitGlobal: undefined },
             { identifier: { type: 'Identifier', name: '_rep' },
               from: 
                { type: 'function',
                  set: 
                   { __data: 
                      { '$arguments': 
                         { name: 'arguments',
                           identifiers: [],
                           references: [],
                           defs: [],
                           tainted: false,
                           stack: true,
                           scope: [Circular] },
                        '$req': 
                         { name: 'req',
                           identifiers: [ { type: 'Identifier', name: 'req' } ],
                           references: [],
                           defs: 
                            [ { type: 'Parameter',
                                name: { type: 'Identifier', name: 'req' },
                                node: 
                                 { type: 'FunctionExpression',
                                   id: { type: 'Identifier', name: 'replyB' },
                                   params: 
                                    [ { type: 'Identifier', name: 'req' },
                                      { type: 'Identifier', name: 'res' } ],
                                   defaults: [],
                                   body: 
                                    { type: 'BlockStatement',
                                      body: 
                                       [ { type: 'ExpressionStatement',
                                           expression: 
                                            { type: 'CallExpression',
                                              callee: 
                                               { type: 'MemberExpression',
                                                 computed: false,
                                                 object: { type: 'Identifier', name: 'res' },
                                                 property: { type: 'Identifier', name: 'send' } },
                                              arguments: 
                                               [ { type: 'BinaryExpression',
                                                   operator: '+',
                                                   left: { type: 'Literal', value: '', raw: '""' },
                                                   right: { type: 'Identifier', name: '_rep' } } ] } },
                                         { type: 'ExpressionStatement',
                                           expression: 
                                            { type: 'AssignmentExpression',
                                              operator: '+=',
                                              left: { type: 'Identifier', name: '_rep' },
                                              right: { type: 'Literal', value: 2, raw: '2' } } } ] },
                                   rest: null,
                                   generator: false,
                                   expression: false },
                                index: 0 } ],
                           tainted: false,
                           stack: true,
                           scope: [Circular] },
                        '$res': 
                         { name: 'res',
                           identifiers: [ { type: 'Identifier', name: 'res' } ],
                           references: 
                            [ { identifier: { type: 'Identifier', name: 'res' },
                                from: [Circular],
                                tainted: false,
                                resolved: [Circular],
                                flag: 1,
                                __maybeImplicitGlobal: undefined } ],
                           defs: 
                            [ { type: 'Parameter',
                                name: { type: 'Identifier', name: 'res' },
                                node: 
                                 { type: 'FunctionExpression',
                                   id: { type: 'Identifier', name: 'replyB' },
                                   params: 
                                    [ { type: 'Identifier', name: 'req' },
                                      { type: 'Identifier', name: 'res' } ],
                                   defaults: [],
                                   body: 
                                    { type: 'BlockStatement',
                                      body: 
                                       [ { type: 'ExpressionStatement',
                                           expression: 
                                            { type: 'CallExpression',
                                              callee: 
                                               { type: 'MemberExpression',
                                                 computed: false,
                                                 object: { type: 'Identifier', name: 'res' },
                                                 property: { type: 'Identifier', name: 'send' } },
                                              arguments: 
                                               [ { type: 'BinaryExpression',
                                                   operator: '+',
                                                   left: { type: 'Literal', value: '', raw: '""' },
                                                   right: { type: 'Identifier', name: '_rep' } } ] } },
                                         { type: 'ExpressionStatement',
                                           expression: 
                                            { type: 'AssignmentExpression',
                                              operator: '+=',
                                              left: { type: 'Identifier', name: '_rep' },
                                              right: { type: 'Literal', value: 2, raw: '2' } } } ] },
                                   rest: null,
                                   generator: false,
                                   expression: false },
                                index: 1 } ],
                           tainted: false,
                           stack: true,
                           scope: [Circular] } } },
                  taints: { __data: { '$arguments': true } },
                  dynamic: false,
                  block: 
                   { type: 'FunctionExpression',
                     id: { type: 'Identifier', name: 'replyB' },
                     params: 
                      [ { type: 'Identifier', name: 'req' },
                        { type: 'Identifier', name: 'res' } ],
                     defaults: [],
                     body: 
                      { type: 'BlockStatement',
                        body: 
                         [ { type: 'ExpressionStatement',
                             expression: 
                              { type: 'CallExpression',
                                callee: 
                                 { type: 'MemberExpression',
                                   computed: false,
                                   object: { type: 'Identifier', name: 'res' },
                                   property: { type: 'Identifier', name: 'send' } },
                                arguments: 
                                 [ { type: 'BinaryExpression',
                                     operator: '+',
                                     left: { type: 'Literal', value: '', raw: '""' },
                                     right: { type: 'Identifier', name: '_rep' } } ] } },
                           { type: 'ExpressionStatement',
                             expression: 
                              { type: 'AssignmentExpression',
                                operator: '+=',
                                left: { type: 'Identifier', name: '_rep' },
                                right: { type: 'Literal', value: 2, raw: '2' } } } ] },
                     rest: null,
                     generator: false,
                     expression: false },
                  through: 
                   [ [Circular],
                     { identifier: { type: 'Identifier', name: '_rep' },
                       from: [Circular],
                       tainted: false,
                       resolved: null,
                       flag: 3,
                       writeExpr: { type: 'Literal', value: 2, raw: '2' },
                       __maybeImplicitGlobal: undefined } ],
                  variables: 
                   [ { name: 'arguments',
                       identifiers: [],
                       references: [],
                       defs: [],
                       tainted: false,
                       stack: true,
                       scope: [Circular] },
                     { name: 'req',
                       identifiers: [ { type: 'Identifier', name: 'req' } ],
                       references: [],
                       defs: 
                        [ { type: 'Parameter',
                            name: { type: 'Identifier', name: 'req' },
                            node: 
                             { type: 'FunctionExpression',
                               id: { type: 'Identifier', name: 'replyB' },
                               params: 
                                [ { type: 'Identifier', name: 'req' },
                                  { type: 'Identifier', name: 'res' } ],
                               defaults: [],
                               body: 
                                { type: 'BlockStatement',
                                  body: 
                                   [ { type: 'ExpressionStatement',
                                       expression: 
                                        { type: 'CallExpression',
                                          callee: 
                                           { type: 'MemberExpression',
                                             computed: false,
                                             object: { type: 'Identifier', name: 'res' },
                                             property: { type: 'Identifier', name: 'send' } },
                                          arguments: 
                                           [ { type: 'BinaryExpression',
                                               operator: '+',
                                               left: { type: 'Literal', value: '', raw: '""' },
                                               right: { type: 'Identifier', name: '_rep' } } ] } },
                                     { type: 'ExpressionStatement',
                                       expression: 
                                        { type: 'AssignmentExpression',
                                          operator: '+=',
                                          left: { type: 'Identifier', name: '_rep' },
                                          right: { type: 'Literal', value: 2, raw: '2' } } } ] },
                               rest: null,
                               generator: false,
                               expression: false },
                            index: 0 } ],
                       tainted: false,
                       stack: true,
                       scope: [Circular] },
                     { name: 'res',
                       identifiers: [ { type: 'Identifier', name: 'res' } ],
                       references: 
                        [ { identifier: { type: 'Identifier', name: 'res' },
                            from: [Circular],
                            tainted: false,
                            resolved: [Circular],
                            flag: 1,
                            __maybeImplicitGlobal: undefined } ],
                       defs: 
                        [ { type: 'Parameter',
                            name: { type: 'Identifier', name: 'res' },
                            node: 
                             { type: 'FunctionExpression',
                               id: { type: 'Identifier', name: 'replyB' },
                               params: 
                                [ { type: 'Identifier', name: 'req' },
                                  { type: 'Identifier', name: 'res' } ],
                               defaults: [],
                               body: 
                                { type: 'BlockStatement',
                                  body: 
                                   [ { type: 'ExpressionStatement',
                                       expression: 
                                        { type: 'CallExpression',
                                          callee: 
                                           { type: 'MemberExpression',
                                             computed: false,
                                             object: { type: 'Identifier', name: 'res' },
                                             property: { type: 'Identifier', name: 'send' } },
                                          arguments: 
                                           [ { type: 'BinaryExpression',
                                               operator: '+',
                                               left: { type: 'Literal', value: '', raw: '""' },
                                               right: { type: 'Identifier', name: '_rep' } } ] } },
                                     { type: 'ExpressionStatement',
                                       expression: 
                                        { type: 'AssignmentExpression',
                                          operator: '+=',
                                          left: { type: 'Identifier', name: '_rep' },
                                          right: { type: 'Literal', value: 2, raw: '2' } } } ] },
                               rest: null,
                               generator: false,
                               expression: false },
                            index: 1 } ],
                       tainted: false,
                       stack: true,
                       scope: [Circular] } ],
                  references: 
                   [ { identifier: { type: 'Identifier', name: 'res' },
                       from: [Circular],
                       tainted: false,
                       resolved: 
                        { name: 'res',
                          identifiers: [ { type: 'Identifier', name: 'res' } ],
                          references: [ [Circular] ],
                          defs: 
                           [ { type: 'Parameter',
                               name: { type: 'Identifier', name: 'res' },
                               node: 
                                { type: 'FunctionExpression',
                                  id: { type: 'Identifier', name: 'replyB' },
                                  params: 
                                   [ { type: 'Identifier', name: 'req' },
                                     { type: 'Identifier', name: 'res' } ],
                                  defaults: [],
                                  body: 
                                   { type: 'BlockStatement',
                                     body: 
                                      [ { type: 'ExpressionStatement',
                                          expression: 
                                           { type: 'CallExpression',
                                             callee: 
                                              { type: 'MemberExpression',
                                                computed: false,
                                                object: { type: 'Identifier', name: 'res' },
                                                property: { type: 'Identifier', name: 'send' } },
                                             arguments: 
                                              [ { type: 'BinaryExpression',
                                                  operator: '+',
                                                  left: { type: 'Literal', value: '', raw: '""' },
                                                  right: { type: 'Identifier', name: '_rep' } } ] } },
                                        { type: 'ExpressionStatement',
                                          expression: 
                                           { type: 'AssignmentExpression',
                                             operator: '+=',
                                             left: { type: 'Identifier', name: '_rep' },
                                             right: { type: 'Literal', value: 2, raw: '2' } } } ] },
                                  rest: null,
                                  generator: false,
                                  expression: false },
                               index: 1 } ],
                          tainted: false,
                          stack: true,
                          scope: [Circular] },
                       flag: 1,
                       __maybeImplicitGlobal: undefined },
                     [Circular],
                     { identifier: { type: 'Identifier', name: '_rep' },
                       from: [Circular],
                       tainted: false,
                       resolved: null,
                       flag: 3,
                       writeExpr: { type: 'Literal', value: 2, raw: '2' },
                       __maybeImplicitGlobal: undefined } ],
                  left: null,
                  variableScope: [Circular],
                  functionExpressionScope: false,
                  directCallToEvalScope: false,
                  thisFound: false,
                  upper: [Circular],
                  isStrict: false,
                  childScopes: [] },
               tainted: false,
               resolved: null,
               flag: 1,
               __maybeImplicitGlobal: undefined },
             { identifier: { type: 'Identifier', name: '_rep' },
               from: 
                { type: 'function',
                  set: 
                   { __data: 
                      { '$arguments': 
                         { name: 'arguments',
                           identifiers: [],
                           references: [],
                           defs: [],
                           tainted: false,
                           stack: true,
                           scope: [Circular] },
                        '$req': 
                         { name: 'req',
                           identifiers: [ { type: 'Identifier', name: 'req' } ],
                           references: [],
                           defs: 
                            [ { type: 'Parameter',
                                name: { type: 'Identifier', name: 'req' },
                                node: 
                                 { type: 'FunctionExpression',
                                   id: { type: 'Identifier', name: 'replyB' },
                                   params: 
                                    [ { type: 'Identifier', name: 'req' },
                                      { type: 'Identifier', name: 'res' } ],
                                   defaults: [],
                                   body: 
                                    { type: 'BlockStatement',
                                      body: 
                                       [ { type: 'ExpressionStatement',
                                           expression: 
                                            { type: 'CallExpression',
                                              callee: 
                                               { type: 'MemberExpression',
                                                 computed: false,
                                                 object: { type: 'Identifier', name: 'res' },
                                                 property: { type: 'Identifier', name: 'send' } },
                                              arguments: 
                                               [ { type: 'BinaryExpression',
                                                   operator: '+',
                                                   left: { type: 'Literal', value: '', raw: '""' },
                                                   right: { type: 'Identifier', name: '_rep' } } ] } },
                                         { type: 'ExpressionStatement',
                                           expression: 
                                            { type: 'AssignmentExpression',
                                              operator: '+=',
                                              left: { type: 'Identifier', name: '_rep' },
                                              right: { type: 'Literal', value: 2, raw: '2' } } } ] },
                                   rest: null,
                                   generator: false,
                                   expression: false },
                                index: 0 } ],
                           tainted: false,
                           stack: true,
                           scope: [Circular] },
                        '$res': 
                         { name: 'res',
                           identifiers: [ { type: 'Identifier', name: 'res' } ],
                           references: 
                            [ { identifier: { type: 'Identifier', name: 'res' },
                                from: [Circular],
                                tainted: false,
                                resolved: [Circular],
                                flag: 1,
                                __maybeImplicitGlobal: undefined } ],
                           defs: 
                            [ { type: 'Parameter',
                                name: { type: 'Identifier', name: 'res' },
                                node: 
                                 { type: 'FunctionExpression',
                                   id: { type: 'Identifier', name: 'replyB' },
                                   params: 
                                    [ { type: 'Identifier', name: 'req' },
                                      { type: 'Identifier', name: 'res' } ],
                                   defaults: [],
                                   body: 
                                    { type: 'BlockStatement',
                                      body: 
                                       [ { type: 'ExpressionStatement',
                                           expression: 
                                            { type: 'CallExpression',
                                              callee: 
                                               { type: 'MemberExpression',
                                                 computed: false,
                                                 object: { type: 'Identifier', name: 'res' },
                                                 property: { type: 'Identifier', name: 'send' } },
                                              arguments: 
                                               [ { type: 'BinaryExpression',
                                                   operator: '+',
                                                   left: { type: 'Literal', value: '', raw: '""' },
                                                   right: { type: 'Identifier', name: '_rep' } } ] } },
                                         { type: 'ExpressionStatement',
                                           expression: 
                                            { type: 'AssignmentExpression',
                                              operator: '+=',
                                              left: { type: 'Identifier', name: '_rep' },
                                              right: { type: 'Literal', value: 2, raw: '2' } } } ] },
                                   rest: null,
                                   generator: false,
                                   expression: false },
                                index: 1 } ],
                           tainted: false,
                           stack: true,
                           scope: [Circular] } } },
                  taints: { __data: { '$arguments': true } },
                  dynamic: false,
                  block: 
                   { type: 'FunctionExpression',
                     id: { type: 'Identifier', name: 'replyB' },
                     params: 
                      [ { type: 'Identifier', name: 'req' },
                        { type: 'Identifier', name: 'res' } ],
                     defaults: [],
                     body: 
                      { type: 'BlockStatement',
                        body: 
                         [ { type: 'ExpressionStatement',
                             expression: 
                              { type: 'CallExpression',
                                callee: 
                                 { type: 'MemberExpression',
                                   computed: false,
                                   object: { type: 'Identifier', name: 'res' },
                                   property: { type: 'Identifier', name: 'send' } },
                                arguments: 
                                 [ { type: 'BinaryExpression',
                                     operator: '+',
                                     left: { type: 'Literal', value: '', raw: '""' },
                                     right: { type: 'Identifier', name: '_rep' } } ] } },
                           { type: 'ExpressionStatement',
                             expression: 
                              { type: 'AssignmentExpression',
                                operator: '+=',
                                left: { type: 'Identifier', name: '_rep' },
                                right: { type: 'Literal', value: 2, raw: '2' } } } ] },
                     rest: null,
                     generator: false,
                     expression: false },
                  through: 
                   [ { identifier: { type: 'Identifier', name: '_rep' },
                       from: [Circular],
                       tainted: false,
                       resolved: null,
                       flag: 1,
                       __maybeImplicitGlobal: undefined },
                     [Circular] ],
                  variables: 
                   [ { name: 'arguments',
                       identifiers: [],
                       references: [],
                       defs: [],
                       tainted: false,
                       stack: true,
                       scope: [Circular] },
                     { name: 'req',
                       identifiers: [ { type: 'Identifier', name: 'req' } ],
                       references: [],
                       defs: 
                        [ { type: 'Parameter',
                            name: { type: 'Identifier', name: 'req' },
                            node: 
                             { type: 'FunctionExpression',
                               id: { type: 'Identifier', name: 'replyB' },
                               params: 
                                [ { type: 'Identifier', name: 'req' },
                                  { type: 'Identifier', name: 'res' } ],
                               defaults: [],
                               body: 
                                { type: 'BlockStatement',
                                  body: 
                                   [ { type: 'ExpressionStatement',
                                       expression: 
                                        { type: 'CallExpression',
                                          callee: 
                                           { type: 'MemberExpression',
                                             computed: false,
                                             object: { type: 'Identifier', name: 'res' },
                                             property: { type: 'Identifier', name: 'send' } },
                                          arguments: 
                                           [ { type: 'BinaryExpression',
                                               operator: '+',
                                               left: { type: 'Literal', value: '', raw: '""' },
                                               right: { type: 'Identifier', name: '_rep' } } ] } },
                                     { type: 'ExpressionStatement',
                                       expression: 
                                        { type: 'AssignmentExpression',
                                          operator: '+=',
                                          left: { type: 'Identifier', name: '_rep' },
                                          right: { type: 'Literal', value: 2, raw: '2' } } } ] },
                               rest: null,
                               generator: false,
                               expression: false },
                            index: 0 } ],
                       tainted: false,
                       stack: true,
                       scope: [Circular] },
                     { name: 'res',
                       identifiers: [ { type: 'Identifier', name: 'res' } ],
                       references: 
                        [ { identifier: { type: 'Identifier', name: 'res' },
                            from: [Circular],
                            tainted: false,
                            resolved: [Circular],
                            flag: 1,
                            __maybeImplicitGlobal: undefined } ],
                       defs: 
                        [ { type: 'Parameter',
                            name: { type: 'Identifier', name: 'res' },
                            node: 
                             { type: 'FunctionExpression',
                               id: { type: 'Identifier', name: 'replyB' },
                               params: 
                                [ { type: 'Identifier', name: 'req' },
                                  { type: 'Identifier', name: 'res' } ],
                               defaults: [],
                               body: 
                                { type: 'BlockStatement',
                                  body: 
                                   [ { type: 'ExpressionStatement',
                                       expression: 
                                        { type: 'CallExpression',
                                          callee: 
                                           { type: 'MemberExpression',
                                             computed: false,
                                             object: { type: 'Identifier', name: 'res' },
                                             property: { type: 'Identifier', name: 'send' } },
                                          arguments: 
                                           [ { type: 'BinaryExpression',
                                               operator: '+',
                                               left: { type: 'Literal', value: '', raw: '""' },
                                               right: { type: 'Identifier', name: '_rep' } } ] } },
                                     { type: 'ExpressionStatement',
                                       expression: 
                                        { type: 'AssignmentExpression',
                                          operator: '+=',
                                          left: { type: 'Identifier', name: '_rep' },
                                          right: { type: 'Literal', value: 2, raw: '2' } } } ] },
                               rest: null,
                               generator: false,
                               expression: false },
                            index: 1 } ],
                       tainted: false,
                       stack: true,
                       scope: [Circular] } ],
                  references: 
                   [ { identifier: { type: 'Identifier', name: 'res' },
                       from: [Circular],
                       tainted: false,
                       resolved: 
                        { name: 'res',
                          identifiers: [ { type: 'Identifier', name: 'res' } ],
                          references: [ [Circular] ],
                          defs: 
                           [ { type: 'Parameter',
                               name: { type: 'Identifier', name: 'res' },
                               node: 
                                { type: 'FunctionExpression',
                                  id: { type: 'Identifier', name: 'replyB' },
                                  params: 
                                   [ { type: 'Identifier', name: 'req' },
                                     { type: 'Identifier', name: 'res' } ],
                                  defaults: [],
                                  body: 
                                   { type: 'BlockStatement',
                                     body: 
                                      [ { type: 'ExpressionStatement',
                                          expression: 
                                           { type: 'CallExpression',
                                             callee: 
                                              { type: 'MemberExpression',
                                                computed: false,
                                                object: { type: 'Identifier', name: 'res' },
                                                property: { type: 'Identifier', name: 'send' } },
                                             arguments: 
                                              [ { type: 'BinaryExpression',
                                                  operator: '+',
                                                  left: { type: 'Literal', value: '', raw: '""' },
                                                  right: { type: 'Identifier', name: '_rep' } } ] } },
                                        { type: 'ExpressionStatement',
                                          expression: 
                                           { type: 'AssignmentExpression',
                                             operator: '+=',
                                             left: { type: 'Identifier', name: '_rep' },
                                             right: { type: 'Literal', value: 2, raw: '2' } } } ] },
                                  rest: null,
                                  generator: false,
                                  expression: false },
                               index: 1 } ],
                          tainted: false,
                          stack: true,
                          scope: [Circular] },
                       flag: 1,
                       __maybeImplicitGlobal: undefined },
                     { identifier: { type: 'Identifier', name: '_rep' },
                       from: [Circular],
                       tainted: false,
                       resolved: null,
                       flag: 1,
                       __maybeImplicitGlobal: undefined },
                     [Circular] ],
                  left: null,
                  variableScope: [Circular],
                  functionExpressionScope: false,
                  directCallToEvalScope: false,
                  thisFound: false,
                  upper: [Circular],
                  isStrict: false,
                  childScopes: [] },
               tainted: false,
               resolved: null,
               flag: 3,
               writeExpr: { type: 'Literal', value: 2, raw: '2' },
               __maybeImplicitGlobal: undefined },
             { identifier: { type: 'Identifier', name: 'module' },
               from: [Circular],
               tainted: false,
               resolved: null,
               flag: 1,
               __maybeImplicitGlobal: undefined },
             { identifier: { type: 'Identifier', name: 'app' },
               from: [Circular],
               tainted: false,
               resolved: null,
               flag: 1,
               __maybeImplicitGlobal: undefined },
             { identifier: { type: 'Identifier', name: 'console' },
               from: [Circular],
               tainted: false,
               resolved: null,
               flag: 1,
               __maybeImplicitGlobal: undefined },
             { identifier: { type: 'Identifier', name: 'app' },
               from: [Circular],
               tainted: false,
               resolved: null,
               flag: 1,
               __maybeImplicitGlobal: undefined },
             { identifier: { type: 'Identifier', name: 'exports' },
               from: [Circular],
               tainted: false,
               resolved: null,
               flag: 1,
               __maybeImplicitGlobal: undefined } ],
          variables: 
           [ { name: 'app',
               identifiers: [ { type: 'Identifier', name: 'app' } ],
               references: [],
               defs: 
                [ { type: 'Variable',
                    name: { type: 'Identifier', name: 'app' },
                    node: 
                     { type: 'VariableDeclarator',
                       id: { type: 'Identifier', name: 'app' },
                       init: 
                        { type: 'CallExpression',
                          callee: 
                           { type: 'CallExpression',
                             callee: { type: 'Identifier', name: 'require' },
                             arguments: [ { type: 'Literal', value: 'express', raw: '\'express\'' } ] },
                          arguments: [] } },
                    index: 0,
                    parent: 
                     { type: 'VariableDeclaration',
                       declarations: 
                        [ { type: 'VariableDeclarator',
                            id: { type: 'Identifier', name: 'app' },
                            init: 
                             { type: 'CallExpression',
                               callee: 
                                { type: 'CallExpression',
                                  callee: { type: 'Identifier', name: 'require' },
                                  arguments: [ { type: 'Literal', value: 'express', raw: '\'express\'' } ] },
                               arguments: [] } } ],
                       kind: 'var' } } ],
               tainted: false,
               stack: true,
               scope: [Circular] },
             { name: '_rep',
               identifiers: [ { type: 'Identifier', name: '_rep' } ],
               references: [],
               defs: 
                [ { type: 'Variable',
                    name: { type: 'Identifier', name: '_rep' },
                    node: 
                     { type: 'VariableDeclarator',
                       id: { type: 'Identifier', name: '_rep' },
                       init: { type: 'Literal', value: 42, raw: '42' } },
                    index: 0,
                    parent: 
                     { type: 'VariableDeclaration',
                       declarations: 
                        [ { type: 'VariableDeclarator',
                            id: { type: 'Identifier', name: '_rep' },
                            init: { type: 'Literal', value: 42, raw: '42' } } ],
                       kind: 'var' } } ],
               tainted: false,
               stack: true,
               scope: [Circular] } ],
          references: 
           [ { identifier: { type: 'Identifier', name: 'app' },
               from: [Circular],
               tainted: false,
               resolved: null,
               flag: 2,
               writeExpr: 
                { type: 'CallExpression',
                  callee: 
                   { type: 'CallExpression',
                     callee: { type: 'Identifier', name: 'require' },
                     arguments: [ { type: 'Literal', value: 'express', raw: '\'express\'' } ] },
                  arguments: [] },
               __maybeImplicitGlobal: false },
             { identifier: { type: 'Identifier', name: 'require' },
               from: [Circular],
               tainted: false,
               resolved: null,
               flag: 1,
               __maybeImplicitGlobal: undefined },
             { identifier: { type: 'Identifier', name: '_rep' },
               from: [Circular],
               tainted: false,
               resolved: null,
               flag: 2,
               writeExpr: { type: 'Literal', value: 42, raw: '42' },
               __maybeImplicitGlobal: false },
             { identifier: { type: 'Identifier', name: 'app' },
               from: [Circular],
               tainted: false,
               resolved: null,
               flag: 1,
               __maybeImplicitGlobal: undefined },
             { identifier: { type: 'Identifier', name: 'app' },
               from: [Circular],
               tainted: false,
               resolved: null,
               flag: 1,
               __maybeImplicitGlobal: undefined },
             { identifier: { type: 'Identifier', name: 'module' },
               from: [Circular],
               tainted: false,
               resolved: null,
               flag: 1,
               __maybeImplicitGlobal: undefined },
             { identifier: { type: 'Identifier', name: 'app' },
               from: [Circular],
               tainted: false,
               resolved: null,
               flag: 1,
               __maybeImplicitGlobal: undefined },
             { identifier: { type: 'Identifier', name: 'console' },
               from: [Circular],
               tainted: false,
               resolved: null,
               flag: 1,
               __maybeImplicitGlobal: undefined },
             { identifier: { type: 'Identifier', name: 'app' },
               from: [Circular],
               tainted: false,
               resolved: null,
               flag: 1,
               __maybeImplicitGlobal: undefined },
             { identifier: { type: 'Identifier', name: 'exports' },
               from: [Circular],
               tainted: false,
               resolved: null,
               flag: 1,
               __maybeImplicitGlobal: undefined } ],
          left: null,
          variableScope: [Circular],
          functionExpressionScope: false,
          directCallToEvalScope: false,
          thisFound: false,
          upper: null,
          isStrict: false,
          childScopes: 
           [ { type: 'function',
               set: 
                { __data: 
                   { '$replyA': 
                      { name: 'replyA',
                        identifiers: [ { type: 'Identifier', name: 'replyA' } ],
                        references: [],
                        defs: 
                         [ { type: 'FunctionName',
                             name: { type: 'Identifier', name: 'replyA' },
                             node: 
                              { type: 'FunctionExpression',
                                id: { type: 'Identifier', name: 'replyA' },
                                params: 
                                 [ { type: 'Identifier', name: 'req' },
                                   { type: 'Identifier', name: 'res' } ],
                                defaults: [],
                                body: 
                                 { type: 'BlockStatement',
                                   body: 
                                    [ { type: 'ExpressionStatement',
                                        expression: 
                                         { type: 'CallExpression',
                                           callee: 
                                            { type: 'MemberExpression',
                                              computed: false,
                                              object: { type: 'Identifier', name: 'res' },
                                              property: { type: 'Identifier', name: 'send' } },
                                           arguments: 
                                            [ { type: 'BinaryExpression',
                                                operator: '+',
                                                left: { type: 'Literal', value: '', raw: '""' },
                                                right: { type: 'Identifier', name: '_rep' } } ] } },
                                      { type: 'ExpressionStatement',
                                        expression: 
                                         { type: 'AssignmentExpression',
                                           operator: '+=',
                                           left: { type: 'Identifier', name: '_rep' },
                                           right: { type: 'Literal', value: 1, raw: '1' } } } ] },
                                rest: null,
                                generator: false,
                                expression: false } } ],
                        tainted: false,
                        stack: true,
                        scope: [Circular] } } },
               taints: { __data: {} },
               dynamic: false,
               block: 
                { type: 'FunctionExpression',
                  id: { type: 'Identifier', name: 'replyA' },
                  params: 
                   [ { type: 'Identifier', name: 'req' },
                     { type: 'Identifier', name: 'res' } ],
                  defaults: [],
                  body: 
                   { type: 'BlockStatement',
                     body: 
                      [ { type: 'ExpressionStatement',
                          expression: 
                           { type: 'CallExpression',
                             callee: 
                              { type: 'MemberExpression',
                                computed: false,
                                object: { type: 'Identifier', name: 'res' },
                                property: { type: 'Identifier', name: 'send' } },
                             arguments: 
                              [ { type: 'BinaryExpression',
                                  operator: '+',
                                  left: { type: 'Literal', value: '', raw: '""' },
                                  right: { type: 'Identifier', name: '_rep' } } ] } },
                        { type: 'ExpressionStatement',
                          expression: 
                           { type: 'AssignmentExpression',
                             operator: '+=',
                             left: { type: 'Identifier', name: '_rep' },
                             right: { type: 'Literal', value: 1, raw: '1' } } } ] },
                  rest: null,
                  generator: false,
                  expression: false },
               through: 
                [ { identifier: { type: 'Identifier', name: '_rep' },
                    from: 
                     { type: 'function',
                       set: 
                        { __data: 
                           { '$arguments': 
                              { name: 'arguments',
                                identifiers: [],
                                references: [],
                                defs: [],
                                tainted: false,
                                stack: true,
                                scope: [Circular] },
                             '$req': 
                              { name: 'req',
                                identifiers: [ { type: 'Identifier', name: 'req' } ],
                                references: [],
                                defs: 
                                 [ { type: 'Parameter',
                                     name: { type: 'Identifier', name: 'req' },
                                     node: 
                                      { type: 'FunctionExpression',
                                        id: { type: 'Identifier', name: 'replyA' },
                                        params: 
                                         [ { type: 'Identifier', name: 'req' },
                                           { type: 'Identifier', name: 'res' } ],
                                        defaults: [],
                                        body: 
                                         { type: 'BlockStatement',
                                           body: 
                                            [ { type: 'ExpressionStatement',
                                                expression: 
                                                 { type: 'CallExpression',
                                                   callee: 
                                                    { type: 'MemberExpression',
                                                      computed: false,
                                                      object: { type: 'Identifier', name: 'res' },
                                                      property: { type: 'Identifier', name: 'send' } },
                                                   arguments: 
                                                    [ { type: 'BinaryExpression',
                                                        operator: '+',
                                                        left: { type: 'Literal', value: '', raw: '""' },
                                                        right: { type: 'Identifier', name: '_rep' } } ] } },
                                              { type: 'ExpressionStatement',
                                                expression: 
                                                 { type: 'AssignmentExpression',
                                                   operator: '+=',
                                                   left: { type: 'Identifier', name: '_rep' },
                                                   right: { type: 'Literal', value: 1, raw: '1' } } } ] },
                                        rest: null,
                                        generator: false,
                                        expression: false },
                                     index: 0 } ],
                                tainted: false,
                                stack: true,
                                scope: [Circular] },
                             '$res': 
                              { name: 'res',
                                identifiers: [ { type: 'Identifier', name: 'res' } ],
                                references: 
                                 [ { identifier: { type: 'Identifier', name: 'res' },
                                     from: [Circular],
                                     tainted: false,
                                     resolved: [Circular],
                                     flag: 1,
                                     __maybeImplicitGlobal: undefined } ],
                                defs: 
                                 [ { type: 'Parameter',
                                     name: { type: 'Identifier', name: 'res' },
                                     node: 
                                      { type: 'FunctionExpression',
                                        id: { type: 'Identifier', name: 'replyA' },
                                        params: 
                                         [ { type: 'Identifier', name: 'req' },
                                           { type: 'Identifier', name: 'res' } ],
                                        defaults: [],
                                        body: 
                                         { type: 'BlockStatement',
                                           body: 
                                            [ { type: 'ExpressionStatement',
                                                expression: 
                                                 { type: 'CallExpression',
                                                   callee: 
                                                    { type: 'MemberExpression',
                                                      computed: false,
                                                      object: { type: 'Identifier', name: 'res' },
                                                      property: { type: 'Identifier', name: 'send' } },
                                                   arguments: 
                                                    [ { type: 'BinaryExpression',
                                                        operator: '+',
                                                        left: { type: 'Literal', value: '', raw: '""' },
                                                        right: { type: 'Identifier', name: '_rep' } } ] } },
                                              { type: 'ExpressionStatement',
                                                expression: 
                                                 { type: 'AssignmentExpression',
                                                   operator: '+=',
                                                   left: { type: 'Identifier', name: '_rep' },
                                                   right: { type: 'Literal', value: 1, raw: '1' } } } ] },
                                        rest: null,
                                        generator: false,
                                        expression: false },
                                     index: 1 } ],
                                tainted: false,
                                stack: true,
                                scope: [Circular] } } },
                       taints: { __data: { '$arguments': true } },
                       dynamic: false,
                       block: 
                        { type: 'FunctionExpression',
                          id: { type: 'Identifier', name: 'replyA' },
                          params: 
                           [ { type: 'Identifier', name: 'req' },
                             { type: 'Identifier', name: 'res' } ],
                          defaults: [],
                          body: 
                           { type: 'BlockStatement',
                             body: 
                              [ { type: 'ExpressionStatement',
                                  expression: 
                                   { type: 'CallExpression',
                                     callee: 
                                      { type: 'MemberExpression',
                                        computed: false,
                                        object: { type: 'Identifier', name: 'res' },
                                        property: { type: 'Identifier', name: 'send' } },
                                     arguments: 
                                      [ { type: 'BinaryExpression',
                                          operator: '+',
                                          left: { type: 'Literal', value: '', raw: '""' },
                                          right: { type: 'Identifier', name: '_rep' } } ] } },
                                { type: 'ExpressionStatement',
                                  expression: 
                                   { type: 'AssignmentExpression',
                                     operator: '+=',
                                     left: { type: 'Identifier', name: '_rep' },
                                     right: { type: 'Literal', value: 1, raw: '1' } } } ] },
                          rest: null,
                          generator: false,
                          expression: false },
                       through: 
                        [ [Circular],
                          { identifier: { type: 'Identifier', name: '_rep' },
                            from: [Circular],
                            tainted: false,
                            resolved: null,
                            flag: 3,
                            writeExpr: { type: 'Literal', value: 1, raw: '1' },
                            __maybeImplicitGlobal: undefined } ],
                       variables: 
                        [ { name: 'arguments',
                            identifiers: [],
                            references: [],
                            defs: [],
                            tainted: false,
                            stack: true,
                            scope: [Circular] },
                          { name: 'req',
                            identifiers: [ { type: 'Identifier', name: 'req' } ],
                            references: [],
                            defs: 
                             [ { type: 'Parameter',
                                 name: { type: 'Identifier', name: 'req' },
                                 node: 
                                  { type: 'FunctionExpression',
                                    id: { type: 'Identifier', name: 'replyA' },
                                    params: 
                                     [ { type: 'Identifier', name: 'req' },
                                       { type: 'Identifier', name: 'res' } ],
                                    defaults: [],
                                    body: 
                                     { type: 'BlockStatement',
                                       body: 
                                        [ { type: 'ExpressionStatement',
                                            expression: 
                                             { type: 'CallExpression',
                                               callee: 
                                                { type: 'MemberExpression',
                                                  computed: false,
                                                  object: { type: 'Identifier', name: 'res' },
                                                  property: { type: 'Identifier', name: 'send' } },
                                               arguments: 
                                                [ { type: 'BinaryExpression',
                                                    operator: '+',
                                                    left: { type: 'Literal', value: '', raw: '""' },
                                                    right: { type: 'Identifier', name: '_rep' } } ] } },
                                          { type: 'ExpressionStatement',
                                            expression: 
                                             { type: 'AssignmentExpression',
                                               operator: '+=',
                                               left: { type: 'Identifier', name: '_rep' },
                                               right: { type: 'Literal', value: 1, raw: '1' } } } ] },
                                    rest: null,
                                    generator: false,
                                    expression: false },
                                 index: 0 } ],
                            tainted: false,
                            stack: true,
                            scope: [Circular] },
                          { name: 'res',
                            identifiers: [ { type: 'Identifier', name: 'res' } ],
                            references: 
                             [ { identifier: { type: 'Identifier', name: 'res' },
                                 from: [Circular],
                                 tainted: false,
                                 resolved: [Circular],
                                 flag: 1,
                                 __maybeImplicitGlobal: undefined } ],
                            defs: 
                             [ { type: 'Parameter',
                                 name: { type: 'Identifier', name: 'res' },
                                 node: 
                                  { type: 'FunctionExpression',
                                    id: { type: 'Identifier', name: 'replyA' },
                                    params: 
                                     [ { type: 'Identifier', name: 'req' },
                                       { type: 'Identifier', name: 'res' } ],
                                    defaults: [],
                                    body: 
                                     { type: 'BlockStatement',
                                       body: 
                                        [ { type: 'ExpressionStatement',
                                            expression: 
                                             { type: 'CallExpression',
                                               callee: 
                                                { type: 'MemberExpression',
                                                  computed: false,
                                                  object: { type: 'Identifier', name: 'res' },
                                                  property: { type: 'Identifier', name: 'send' } },
                                               arguments: 
                                                [ { type: 'BinaryExpression',
                                                    operator: '+',
                                                    left: { type: 'Literal', value: '', raw: '""' },
                                                    right: { type: 'Identifier', name: '_rep' } } ] } },
                                          { type: 'ExpressionStatement',
                                            expression: 
                                             { type: 'AssignmentExpression',
                                               operator: '+=',
                                               left: { type: 'Identifier', name: '_rep' },
                                               right: { type: 'Literal', value: 1, raw: '1' } } } ] },
                                    rest: null,
                                    generator: false,
                                    expression: false },
                                 index: 1 } ],
                            tainted: false,
                            stack: true,
                            scope: [Circular] } ],
                       references: 
                        [ { identifier: { type: 'Identifier', name: 'res' },
                            from: [Circular],
                            tainted: false,
                            resolved: 
                             { name: 'res',
                               identifiers: [ { type: 'Identifier', name: 'res' } ],
                               references: [ [Circular] ],
                               defs: 
                                [ { type: 'Parameter',
                                    name: { type: 'Identifier', name: 'res' },
                                    node: 
                                     { type: 'FunctionExpression',
                                       id: { type: 'Identifier', name: 'replyA' },
                                       params: 
                                        [ { type: 'Identifier', name: 'req' },
                                          { type: 'Identifier', name: 'res' } ],
                                       defaults: [],
                                       body: 
                                        { type: 'BlockStatement',
                                          body: 
                                           [ { type: 'ExpressionStatement',
                                               expression: 
                                                { type: 'CallExpression',
                                                  callee: 
                                                   { type: 'MemberExpression',
                                                     computed: false,
                                                     object: { type: 'Identifier', name: 'res' },
                                                     property: { type: 'Identifier', name: 'send' } },
                                                  arguments: 
                                                   [ { type: 'BinaryExpression',
                                                       operator: '+',
                                                       left: { type: 'Literal', value: '', raw: '""' },
                                                       right: { type: 'Identifier', name: '_rep' } } ] } },
                                             { type: 'ExpressionStatement',
                                               expression: 
                                                { type: 'AssignmentExpression',
                                                  operator: '+=',
                                                  left: { type: 'Identifier', name: '_rep' },
                                                  right: { type: 'Literal', value: 1, raw: '1' } } } ] },
                                       rest: null,
                                       generator: false,
                                       expression: false },
                                    index: 1 } ],
                               tainted: false,
                               stack: true,
                               scope: [Circular] },
                            flag: 1,
                            __maybeImplicitGlobal: undefined },
                          [Circular],
                          { identifier: { type: 'Identifier', name: '_rep' },
                            from: [Circular],
                            tainted: false,
                            resolved: null,
                            flag: 3,
                            writeExpr: { type: 'Literal', value: 1, raw: '1' },
                            __maybeImplicitGlobal: undefined } ],
                       left: null,
                       variableScope: [Circular],
                       functionExpressionScope: false,
                       directCallToEvalScope: false,
                       thisFound: false,
                       upper: [Circular],
                       isStrict: false,
                       childScopes: [] },
                    tainted: false,
                    resolved: null,
                    flag: 1,
                    __maybeImplicitGlobal: undefined },
                  { identifier: { type: 'Identifier', name: '_rep' },
                    from: 
                     { type: 'function',
                       set: 
                        { __data: 
                           { '$arguments': 
                              { name: 'arguments',
                                identifiers: [],
                                references: [],
                                defs: [],
                                tainted: false,
                                stack: true,
                                scope: [Circular] },
                             '$req': 
                              { name: 'req',
                                identifiers: [ { type: 'Identifier', name: 'req' } ],
                                references: [],
                                defs: 
                                 [ { type: 'Parameter',
                                     name: { type: 'Identifier', name: 'req' },
                                     node: 
                                      { type: 'FunctionExpression',
                                        id: { type: 'Identifier', name: 'replyA' },
                                        params: 
                                         [ { type: 'Identifier', name: 'req' },
                                           { type: 'Identifier', name: 'res' } ],
                                        defaults: [],
                                        body: 
                                         { type: 'BlockStatement',
                                           body: 
                                            [ { type: 'ExpressionStatement',
                                                expression: 
                                                 { type: 'CallExpression',
                                                   callee: 
                                                    { type: 'MemberExpression',
                                                      computed: false,
                                                      object: { type: 'Identifier', name: 'res' },
                                                      property: { type: 'Identifier', name: 'send' } },
                                                   arguments: 
                                                    [ { type: 'BinaryExpression',
                                                        operator: '+',
                                                        left: { type: 'Literal', value: '', raw: '""' },
                                                        right: { type: 'Identifier', name: '_rep' } } ] } },
                                              { type: 'ExpressionStatement',
                                                expression: 
                                                 { type: 'AssignmentExpression',
                                                   operator: '+=',
                                                   left: { type: 'Identifier', name: '_rep' },
                                                   right: { type: 'Literal', value: 1, raw: '1' } } } ] },
                                        rest: null,
                                        generator: false,
                                        expression: false },
                                     index: 0 } ],
                                tainted: false,
                                stack: true,
                                scope: [Circular] },
                             '$res': 
                              { name: 'res',
                                identifiers: [ { type: 'Identifier', name: 'res' } ],
                                references: 
                                 [ { identifier: { type: 'Identifier', name: 'res' },
                                     from: [Circular],
                                     tainted: false,
                                     resolved: [Circular],
                                     flag: 1,
                                     __maybeImplicitGlobal: undefined } ],
                                defs: 
                                 [ { type: 'Parameter',
                                     name: { type: 'Identifier', name: 'res' },
                                     node: 
                                      { type: 'FunctionExpression',
                                        id: { type: 'Identifier', name: 'replyA' },
                                        params: 
                                         [ { type: 'Identifier', name: 'req' },
                                           { type: 'Identifier', name: 'res' } ],
                                        defaults: [],
                                        body: 
                                         { type: 'BlockStatement',
                                           body: 
                                            [ { type: 'ExpressionStatement',
                                                expression: 
                                                 { type: 'CallExpression',
                                                   callee: 
                                                    { type: 'MemberExpression',
                                                      computed: false,
                                                      object: { type: 'Identifier', name: 'res' },
                                                      property: { type: 'Identifier', name: 'send' } },
                                                   arguments: 
                                                    [ { type: 'BinaryExpression',
                                                        operator: '+',
                                                        left: { type: 'Literal', value: '', raw: '""' },
                                                        right: { type: 'Identifier', name: '_rep' } } ] } },
                                              { type: 'ExpressionStatement',
                                                expression: 
                                                 { type: 'AssignmentExpression',
                                                   operator: '+=',
                                                   left: { type: 'Identifier', name: '_rep' },
                                                   right: { type: 'Literal', value: 1, raw: '1' } } } ] },
                                        rest: null,
                                        generator: false,
                                        expression: false },
                                     index: 1 } ],
                                tainted: false,
                                stack: true,
                                scope: [Circular] } } },
                       taints: { __data: { '$arguments': true } },
                       dynamic: false,
                       block: 
                        { type: 'FunctionExpression',
                          id: { type: 'Identifier', name: 'replyA' },
                          params: 
                           [ { type: 'Identifier', name: 'req' },
                             { type: 'Identifier', name: 'res' } ],
                          defaults: [],
                          body: 
                           { type: 'BlockStatement',
                             body: 
                              [ { type: 'ExpressionStatement',
                                  expression: 
                                   { type: 'CallExpression',
                                     callee: 
                                      { type: 'MemberExpression',
                                        computed: false,
                                        object: { type: 'Identifier', name: 'res' },
                                        property: { type: 'Identifier', name: 'send' } },
                                     arguments: 
                                      [ { type: 'BinaryExpression',
                                          operator: '+',
                                          left: { type: 'Literal', value: '', raw: '""' },
                                          right: { type: 'Identifier', name: '_rep' } } ] } },
                                { type: 'ExpressionStatement',
                                  expression: 
                                   { type: 'AssignmentExpression',
                                     operator: '+=',
                                     left: { type: 'Identifier', name: '_rep' },
                                     right: { type: 'Literal', value: 1, raw: '1' } } } ] },
                          rest: null,
                          generator: false,
                          expression: false },
                       through: 
                        [ { identifier: { type: 'Identifier', name: '_rep' },
                            from: [Circular],
                            tainted: false,
                            resolved: null,
                            flag: 1,
                            __maybeImplicitGlobal: undefined },
                          [Circular] ],
                       variables: 
                        [ { name: 'arguments',
                            identifiers: [],
                            references: [],
                            defs: [],
                            tainted: false,
                            stack: true,
                            scope: [Circular] },
                          { name: 'req',
                            identifiers: [ { type: 'Identifier', name: 'req' } ],
                            references: [],
                            defs: 
                             [ { type: 'Parameter',
                                 name: { type: 'Identifier', name: 'req' },
                                 node: 
                                  { type: 'FunctionExpression',
                                    id: { type: 'Identifier', name: 'replyA' },
                                    params: 
                                     [ { type: 'Identifier', name: 'req' },
                                       { type: 'Identifier', name: 'res' } ],
                                    defaults: [],
                                    body: 
                                     { type: 'BlockStatement',
                                       body: 
                                        [ { type: 'ExpressionStatement',
                                            expression: 
                                             { type: 'CallExpression',
                                               callee: 
                                                { type: 'MemberExpression',
                                                  computed: false,
                                                  object: { type: 'Identifier', name: 'res' },
                                                  property: { type: 'Identifier', name: 'send' } },
                                               arguments: 
                                                [ { type: 'BinaryExpression',
                                                    operator: '+',
                                                    left: { type: 'Literal', value: '', raw: '""' },
                                                    right: { type: 'Identifier', name: '_rep' } } ] } },
                                          { type: 'ExpressionStatement',
                                            expression: 
                                             { type: 'AssignmentExpression',
                                               operator: '+=',
                                               left: { type: 'Identifier', name: '_rep' },
                                               right: { type: 'Literal', value: 1, raw: '1' } } } ] },
                                    rest: null,
                                    generator: false,
                                    expression: false },
                                 index: 0 } ],
                            tainted: false,
                            stack: true,
                            scope: [Circular] },
                          { name: 'res',
                            identifiers: [ { type: 'Identifier', name: 'res' } ],
                            references: 
                             [ { identifier: { type: 'Identifier', name: 'res' },
                                 from: [Circular],
                                 tainted: false,
                                 resolved: [Circular],
                                 flag: 1,
                                 __maybeImplicitGlobal: undefined } ],
                            defs: 
                             [ { type: 'Parameter',
                                 name: { type: 'Identifier', name: 'res' },
                                 node: 
                                  { type: 'FunctionExpression',
                                    id: { type: 'Identifier', name: 'replyA' },
                                    params: 
                                     [ { type: 'Identifier', name: 'req' },
                                       { type: 'Identifier', name: 'res' } ],
                                    defaults: [],
                                    body: 
                                     { type: 'BlockStatement',
                                       body: 
                                        [ { type: 'ExpressionStatement',
                                            expression: 
                                             { type: 'CallExpression',
                                               callee: 
                                                { type: 'MemberExpression',
                                                  computed: false,
                                                  object: { type: 'Identifier', name: 'res' },
                                                  property: { type: 'Identifier', name: 'send' } },
                                               arguments: 
                                                [ { type: 'BinaryExpression',
                                                    operator: '+',
                                                    left: { type: 'Literal', value: '', raw: '""' },
                                                    right: { type: 'Identifier', name: '_rep' } } ] } },
                                          { type: 'ExpressionStatement',
                                            expression: 
                                             { type: 'AssignmentExpression',
                                               operator: '+=',
                                               left: { type: 'Identifier', name: '_rep' },
                                               right: { type: 'Literal', value: 1, raw: '1' } } } ] },
                                    rest: null,
                                    generator: false,
                                    expression: false },
                                 index: 1 } ],
                            tainted: false,
                            stack: true,
                            scope: [Circular] } ],
                       references: 
                        [ { identifier: { type: 'Identifier', name: 'res' },
                            from: [Circular],
                            tainted: false,
                            resolved: 
                             { name: 'res',
                               identifiers: [ { type: 'Identifier', name: 'res' } ],
                               references: [ [Circular] ],
                               defs: 
                                [ { type: 'Parameter',
                                    name: { type: 'Identifier', name: 'res' },
                                    node: 
                                     { type: 'FunctionExpression',
                                       id: { type: 'Identifier', name: 'replyA' },
                                       params: 
                                        [ { type: 'Identifier', name: 'req' },
                                          { type: 'Identifier', name: 'res' } ],
                                       defaults: [],
                                       body: 
                                        { type: 'BlockStatement',
                                          body: 
                                           [ { type: 'ExpressionStatement',
                                               expression: 
                                                { type: 'CallExpression',
                                                  callee: 
                                                   { type: 'MemberExpression',
                                                     computed: false,
                                                     object: { type: 'Identifier', name: 'res' },
                                                     property: { type: 'Identifier', name: 'send' } },
                                                  arguments: 
                                                   [ { type: 'BinaryExpression',
                                                       operator: '+',
                                                       left: { type: 'Literal', value: '', raw: '""' },
                                                       right: { type: 'Identifier', name: '_rep' } } ] } },
                                             { type: 'ExpressionStatement',
                                               expression: 
                                                { type: 'AssignmentExpression',
                                                  operator: '+=',
                                                  left: { type: 'Identifier', name: '_rep' },
                                                  right: { type: 'Literal', value: 1, raw: '1' } } } ] },
                                       rest: null,
                                       generator: false,
                                       expression: false },
                                    index: 1 } ],
                               tainted: false,
                               stack: true,
                               scope: [Circular] },
                            flag: 1,
                            __maybeImplicitGlobal: undefined },
                          { identifier: { type: 'Identifier', name: '_rep' },
                            from: [Circular],
                            tainted: false,
                            resolved: null,
                            flag: 1,
                            __maybeImplicitGlobal: undefined },
                          [Circular] ],
                       left: null,
                       variableScope: [Circular],
                       functionExpressionScope: false,
                       directCallToEvalScope: false,
                       thisFound: false,
                       upper: [Circular],
                       isStrict: false,
                       childScopes: [] },
                    tainted: false,
                    resolved: null,
                    flag: 3,
                    writeExpr: { type: 'Literal', value: 1, raw: '1' },
                    __maybeImplicitGlobal: undefined } ],
               variables: 
                [ { name: 'replyA',
                    identifiers: [ { type: 'Identifier', name: 'replyA' } ],
                    references: [],
                    defs: 
                     [ { type: 'FunctionName',
                         name: { type: 'Identifier', name: 'replyA' },
                         node: 
                          { type: 'FunctionExpression',
                            id: { type: 'Identifier', name: 'replyA' },
                            params: 
                             [ { type: 'Identifier', name: 'req' },
                               { type: 'Identifier', name: 'res' } ],
                            defaults: [],
                            body: 
                             { type: 'BlockStatement',
                               body: 
                                [ { type: 'ExpressionStatement',
                                    expression: 
                                     { type: 'CallExpression',
                                       callee: 
                                        { type: 'MemberExpression',
                                          computed: false,
                                          object: { type: 'Identifier', name: 'res' },
                                          property: { type: 'Identifier', name: 'send' } },
                                       arguments: 
                                        [ { type: 'BinaryExpression',
                                            operator: '+',
                                            left: { type: 'Literal', value: '', raw: '""' },
                                            right: { type: 'Identifier', name: '_rep' } } ] } },
                                  { type: 'ExpressionStatement',
                                    expression: 
                                     { type: 'AssignmentExpression',
                                       operator: '+=',
                                       left: { type: 'Identifier', name: '_rep' },
                                       right: { type: 'Literal', value: 1, raw: '1' } } } ] },
                            rest: null,
                            generator: false,
                            expression: false } } ],
                    tainted: false,
                    stack: true,
                    scope: [Circular] } ],
               references: [],
               left: null,
               variableScope: [Circular],
               functionExpressionScope: true,
               directCallToEvalScope: false,
               thisFound: false,
               upper: [Circular],
               isStrict: false,
               childScopes: 
                [ { type: 'function',
                    set: 
                     { __data: 
                        { '$arguments': 
                           { name: 'arguments',
                             identifiers: [],
                             references: [],
                             defs: [],
                             tainted: false,
                             stack: true,
                             scope: [Circular] },
                          '$req': 
                           { name: 'req',
                             identifiers: [ { type: 'Identifier', name: 'req' } ],
                             references: [],
                             defs: 
                              [ { type: 'Parameter',
                                  name: { type: 'Identifier', name: 'req' },
                                  node: 
                                   { type: 'FunctionExpression',
                                     id: { type: 'Identifier', name: 'replyA' },
                                     params: 
                                      [ { type: 'Identifier', name: 'req' },
                                        { type: 'Identifier', name: 'res' } ],
                                     defaults: [],
                                     body: 
                                      { type: 'BlockStatement',
                                        body: 
                                         [ { type: 'ExpressionStatement',
                                             expression: 
                                              { type: 'CallExpression',
                                                callee: 
                                                 { type: 'MemberExpression',
                                                   computed: false,
                                                   object: { type: 'Identifier', name: 'res' },
                                                   property: { type: 'Identifier', name: 'send' } },
                                                arguments: 
                                                 [ { type: 'BinaryExpression',
                                                     operator: '+',
                                                     left: { type: 'Literal', value: '', raw: '""' },
                                                     right: { type: 'Identifier', name: '_rep' } } ] } },
                                           { type: 'ExpressionStatement',
                                             expression: 
                                              { type: 'AssignmentExpression',
                                                operator: '+=',
                                                left: { type: 'Identifier', name: '_rep' },
                                                right: { type: 'Literal', value: 1, raw: '1' } } } ] },
                                     rest: null,
                                     generator: false,
                                     expression: false },
                                  index: 0 } ],
                             tainted: false,
                             stack: true,
                             scope: [Circular] },
                          '$res': 
                           { name: 'res',
                             identifiers: [ { type: 'Identifier', name: 'res' } ],
                             references: 
                              [ { identifier: { type: 'Identifier', name: 'res' },
                                  from: [Circular],
                                  tainted: false,
                                  resolved: [Circular],
                                  flag: 1,
                                  __maybeImplicitGlobal: undefined } ],
                             defs: 
                              [ { type: 'Parameter',
                                  name: { type: 'Identifier', name: 'res' },
                                  node: 
                                   { type: 'FunctionExpression',
                                     id: { type: 'Identifier', name: 'replyA' },
                                     params: 
                                      [ { type: 'Identifier', name: 'req' },
                                        { type: 'Identifier', name: 'res' } ],
                                     defaults: [],
                                     body: 
                                      { type: 'BlockStatement',
                                        body: 
                                         [ { type: 'ExpressionStatement',
                                             expression: 
                                              { type: 'CallExpression',
                                                callee: 
                                                 { type: 'MemberExpression',
                                                   computed: false,
                                                   object: { type: 'Identifier', name: 'res' },
                                                   property: { type: 'Identifier', name: 'send' } },
                                                arguments: 
                                                 [ { type: 'BinaryExpression',
                                                     operator: '+',
                                                     left: { type: 'Literal', value: '', raw: '""' },
                                                     right: { type: 'Identifier', name: '_rep' } } ] } },
                                           { type: 'ExpressionStatement',
                                             expression: 
                                              { type: 'AssignmentExpression',
                                                operator: '+=',
                                                left: { type: 'Identifier', name: '_rep' },
                                                right: { type: 'Literal', value: 1, raw: '1' } } } ] },
                                     rest: null,
                                     generator: false,
                                     expression: false },
                                  index: 1 } ],
                             tainted: false,
                             stack: true,
                             scope: [Circular] } } },
                    taints: { __data: { '$arguments': true } },
                    dynamic: false,
                    block: 
                     { type: 'FunctionExpression',
                       id: { type: 'Identifier', name: 'replyA' },
                       params: 
                        [ { type: 'Identifier', name: 'req' },
                          { type: 'Identifier', name: 'res' } ],
                       defaults: [],
                       body: 
                        { type: 'BlockStatement',
                          body: 
                           [ { type: 'ExpressionStatement',
                               expression: 
                                { type: 'CallExpression',
                                  callee: 
                                   { type: 'MemberExpression',
                                     computed: false,
                                     object: { type: 'Identifier', name: 'res' },
                                     property: { type: 'Identifier', name: 'send' } },
                                  arguments: 
                                   [ { type: 'BinaryExpression',
                                       operator: '+',
                                       left: { type: 'Literal', value: '', raw: '""' },
                                       right: { type: 'Identifier', name: '_rep' } } ] } },
                             { type: 'ExpressionStatement',
                               expression: 
                                { type: 'AssignmentExpression',
                                  operator: '+=',
                                  left: { type: 'Identifier', name: '_rep' },
                                  right: { type: 'Literal', value: 1, raw: '1' } } } ] },
                       rest: null,
                       generator: false,
                       expression: false },
                    through: 
                     [ { identifier: { type: 'Identifier', name: '_rep' },
                         from: [Circular],
                         tainted: false,
                         resolved: null,
                         flag: 1,
                         __maybeImplicitGlobal: undefined },
                       { identifier: { type: 'Identifier', name: '_rep' },
                         from: [Circular],
                         tainted: false,
                         resolved: null,
                         flag: 3,
                         writeExpr: { type: 'Literal', value: 1, raw: '1' },
                         __maybeImplicitGlobal: undefined } ],
                    variables: 
                     [ { name: 'arguments',
                         identifiers: [],
                         references: [],
                         defs: [],
                         tainted: false,
                         stack: true,
                         scope: [Circular] },
                       { name: 'req',
                         identifiers: [ { type: 'Identifier', name: 'req' } ],
                         references: [],
                         defs: 
                          [ { type: 'Parameter',
                              name: { type: 'Identifier', name: 'req' },
                              node: 
                               { type: 'FunctionExpression',
                                 id: { type: 'Identifier', name: 'replyA' },
                                 params: 
                                  [ { type: 'Identifier', name: 'req' },
                                    { type: 'Identifier', name: 'res' } ],
                                 defaults: [],
                                 body: 
                                  { type: 'BlockStatement',
                                    body: 
                                     [ { type: 'ExpressionStatement',
                                         expression: 
                                          { type: 'CallExpression',
                                            callee: 
                                             { type: 'MemberExpression',
                                               computed: false,
                                               object: { type: 'Identifier', name: 'res' },
                                               property: { type: 'Identifier', name: 'send' } },
                                            arguments: 
                                             [ { type: 'BinaryExpression',
                                                 operator: '+',
                                                 left: { type: 'Literal', value: '', raw: '""' },
                                                 right: { type: 'Identifier', name: '_rep' } } ] } },
                                       { type: 'ExpressionStatement',
                                         expression: 
                                          { type: 'AssignmentExpression',
                                            operator: '+=',
                                            left: { type: 'Identifier', name: '_rep' },
                                            right: { type: 'Literal', value: 1, raw: '1' } } } ] },
                                 rest: null,
                                 generator: false,
                                 expression: false },
                              index: 0 } ],
                         tainted: false,
                         stack: true,
                         scope: [Circular] },
                       { name: 'res',
                         identifiers: [ { type: 'Identifier', name: 'res' } ],
                         references: 
                          [ { identifier: { type: 'Identifier', name: 'res' },
                              from: [Circular],
                              tainted: false,
                              resolved: [Circular],
                              flag: 1,
                              __maybeImplicitGlobal: undefined } ],
                         defs: 
                          [ { type: 'Parameter',
                              name: { type: 'Identifier', name: 'res' },
                              node: 
                               { type: 'FunctionExpression',
                                 id: { type: 'Identifier', name: 'replyA' },
                                 params: 
                                  [ { type: 'Identifier', name: 'req' },
                                    { type: 'Identifier', name: 'res' } ],
                                 defaults: [],
                                 body: 
                                  { type: 'BlockStatement',
                                    body: 
                                     [ { type: 'ExpressionStatement',
                                         expression: 
                                          { type: 'CallExpression',
                                            callee: 
                                             { type: 'MemberExpression',
                                               computed: false,
                                               object: { type: 'Identifier', name: 'res' },
                                               property: { type: 'Identifier', name: 'send' } },
                                            arguments: 
                                             [ { type: 'BinaryExpression',
                                                 operator: '+',
                                                 left: { type: 'Literal', value: '', raw: '""' },
                                                 right: { type: 'Identifier', name: '_rep' } } ] } },
                                       { type: 'ExpressionStatement',
                                         expression: 
                                          { type: 'AssignmentExpression',
                                            operator: '+=',
                                            left: { type: 'Identifier', name: '_rep' },
                                            right: { type: 'Literal', value: 1, raw: '1' } } } ] },
                                 rest: null,
                                 generator: false,
                                 expression: false },
                              index: 1 } ],
                         tainted: false,
                         stack: true,
                         scope: [Circular] } ],
                    references: 
                     [ { identifier: { type: 'Identifier', name: 'res' },
                         from: [Circular],
                         tainted: false,
                         resolved: 
                          { name: 'res',
                            identifiers: [ { type: 'Identifier', name: 'res' } ],
                            references: [ [Circular] ],
                            defs: 
                             [ { type: 'Parameter',
                                 name: { type: 'Identifier', name: 'res' },
                                 node: 
                                  { type: 'FunctionExpression',
                                    id: { type: 'Identifier', name: 'replyA' },
                                    params: 
                                     [ { type: 'Identifier', name: 'req' },
                                       { type: 'Identifier', name: 'res' } ],
                                    defaults: [],
                                    body: 
                                     { type: 'BlockStatement',
                                       body: 
                                        [ { type: 'ExpressionStatement',
                                            expression: 
                                             { type: 'CallExpression',
                                               callee: 
                                                { type: 'MemberExpression',
                                                  computed: false,
                                                  object: { type: 'Identifier', name: 'res' },
                                                  property: { type: 'Identifier', name: 'send' } },
                                               arguments: 
                                                [ { type: 'BinaryExpression',
                                                    operator: '+',
                                                    left: { type: 'Literal', value: '', raw: '""' },
                                                    right: { type: 'Identifier', name: '_rep' } } ] } },
                                          { type: 'ExpressionStatement',
                                            expression: 
                                             { type: 'AssignmentExpression',
                                               operator: '+=',
                                               left: { type: 'Identifier', name: '_rep' },
                                               right: { type: 'Literal', value: 1, raw: '1' } } } ] },
                                    rest: null,
                                    generator: false,
                                    expression: false },
                                 index: 1 } ],
                            tainted: false,
                            stack: true,
                            scope: [Circular] },
                         flag: 1,
                         __maybeImplicitGlobal: undefined },
                       { identifier: { type: 'Identifier', name: '_rep' },
                         from: [Circular],
                         tainted: false,
                         resolved: null,
                         flag: 1,
                         __maybeImplicitGlobal: undefined },
                       { identifier: { type: 'Identifier', name: '_rep' },
                         from: [Circular],
                         tainted: false,
                         resolved: null,
                         flag: 3,
                         writeExpr: { type: 'Literal', value: 1, raw: '1' },
                         __maybeImplicitGlobal: undefined } ],
                    left: null,
                    variableScope: [Circular],
                    functionExpressionScope: false,
                    directCallToEvalScope: false,
                    thisFound: false,
                    upper: [Circular],
                    isStrict: false,
                    childScopes: [] } ] },
             [Circular] ],
          implicit: { set: { __data: {} }, variables: [] } },
       isStrict: false,
       childScopes: 
        [ { type: 'function',
            set: 
             { __data: 
                { '$arguments': 
                   { name: 'arguments',
                     identifiers: [],
                     references: [],
                     defs: [],
                     tainted: false,
                     stack: true,
                     scope: [Circular] },
                  '$req': 
                   { name: 'req',
                     identifiers: [ { type: 'Identifier', name: 'req' } ],
                     references: [],
                     defs: 
                      [ { type: 'Parameter',
                          name: { type: 'Identifier', name: 'req' },
                          node: 
                           { type: 'FunctionExpression',
                             id: { type: 'Identifier', name: 'replyB' },
                             params: 
                              [ { type: 'Identifier', name: 'req' },
                                { type: 'Identifier', name: 'res' } ],
                             defaults: [],
                             body: 
                              { type: 'BlockStatement',
                                body: 
                                 [ { type: 'ExpressionStatement',
                                     expression: 
                                      { type: 'CallExpression',
                                        callee: 
                                         { type: 'MemberExpression',
                                           computed: false,
                                           object: { type: 'Identifier', name: 'res' },
                                           property: { type: 'Identifier', name: 'send' } },
                                        arguments: 
                                         [ { type: 'BinaryExpression',
                                             operator: '+',
                                             left: { type: 'Literal', value: '', raw: '""' },
                                             right: { type: 'Identifier', name: '_rep' } } ] } },
                                   { type: 'ExpressionStatement',
                                     expression: 
                                      { type: 'AssignmentExpression',
                                        operator: '+=',
                                        left: { type: 'Identifier', name: '_rep' },
                                        right: { type: 'Literal', value: 2, raw: '2' } } } ] },
                             rest: null,
                             generator: false,
                             expression: false },
                          index: 0 } ],
                     tainted: false,
                     stack: true,
                     scope: [Circular] },
                  '$res': 
                   { name: 'res',
                     identifiers: [ { type: 'Identifier', name: 'res' } ],
                     references: 
                      [ { identifier: { type: 'Identifier', name: 'res' },
                          from: [Circular],
                          tainted: false,
                          resolved: [Circular],
                          flag: 1,
                          __maybeImplicitGlobal: undefined } ],
                     defs: 
                      [ { type: 'Parameter',
                          name: { type: 'Identifier', name: 'res' },
                          node: 
                           { type: 'FunctionExpression',
                             id: { type: 'Identifier', name: 'replyB' },
                             params: 
                              [ { type: 'Identifier', name: 'req' },
                                { type: 'Identifier', name: 'res' } ],
                             defaults: [],
                             body: 
                              { type: 'BlockStatement',
                                body: 
                                 [ { type: 'ExpressionStatement',
                                     expression: 
                                      { type: 'CallExpression',
                                        callee: 
                                         { type: 'MemberExpression',
                                           computed: false,
                                           object: { type: 'Identifier', name: 'res' },
                                           property: { type: 'Identifier', name: 'send' } },
                                        arguments: 
                                         [ { type: 'BinaryExpression',
                                             operator: '+',
                                             left: { type: 'Literal', value: '', raw: '""' },
                                             right: { type: 'Identifier', name: '_rep' } } ] } },
                                   { type: 'ExpressionStatement',
                                     expression: 
                                      { type: 'AssignmentExpression',
                                        operator: '+=',
                                        left: { type: 'Identifier', name: '_rep' },
                                        right: { type: 'Literal', value: 2, raw: '2' } } } ] },
                             rest: null,
                             generator: false,
                             expression: false },
                          index: 1 } ],
                     tainted: false,
                     stack: true,
                     scope: [Circular] } } },
            taints: { __data: { '$arguments': true } },
            dynamic: false,
            block: 
             { type: 'FunctionExpression',
               id: { type: 'Identifier', name: 'replyB' },
               params: 
                [ { type: 'Identifier', name: 'req' },
                  { type: 'Identifier', name: 'res' } ],
               defaults: [],
               body: 
                { type: 'BlockStatement',
                  body: 
                   [ { type: 'ExpressionStatement',
                       expression: 
                        { type: 'CallExpression',
                          callee: 
                           { type: 'MemberExpression',
                             computed: false,
                             object: { type: 'Identifier', name: 'res' },
                             property: { type: 'Identifier', name: 'send' } },
                          arguments: 
                           [ { type: 'BinaryExpression',
                               operator: '+',
                               left: { type: 'Literal', value: '', raw: '""' },
                               right: { type: 'Identifier', name: '_rep' } } ] } },
                     { type: 'ExpressionStatement',
                       expression: 
                        { type: 'AssignmentExpression',
                          operator: '+=',
                          left: { type: 'Identifier', name: '_rep' },
                          right: { type: 'Literal', value: 2, raw: '2' } } } ] },
               rest: null,
               generator: false,
               expression: false },
            through: 
             [ { identifier: { type: 'Identifier', name: '_rep' },
                 from: [Circular],
                 tainted: false,
                 resolved: null,
                 flag: 1,
                 __maybeImplicitGlobal: undefined },
               { identifier: { type: 'Identifier', name: '_rep' },
                 from: [Circular],
                 tainted: false,
                 resolved: null,
                 flag: 3,
                 writeExpr: { type: 'Literal', value: 2, raw: '2' },
                 __maybeImplicitGlobal: undefined } ],
            variables: 
             [ { name: 'arguments',
                 identifiers: [],
                 references: [],
                 defs: [],
                 tainted: false,
                 stack: true,
                 scope: [Circular] },
               { name: 'req',
                 identifiers: [ { type: 'Identifier', name: 'req' } ],
                 references: [],
                 defs: 
                  [ { type: 'Parameter',
                      name: { type: 'Identifier', name: 'req' },
                      node: 
                       { type: 'FunctionExpression',
                         id: { type: 'Identifier', name: 'replyB' },
                         params: 
                          [ { type: 'Identifier', name: 'req' },
                            { type: 'Identifier', name: 'res' } ],
                         defaults: [],
                         body: 
                          { type: 'BlockStatement',
                            body: 
                             [ { type: 'ExpressionStatement',
                                 expression: 
                                  { type: 'CallExpression',
                                    callee: 
                                     { type: 'MemberExpression',
                                       computed: false,
                                       object: { type: 'Identifier', name: 'res' },
                                       property: { type: 'Identifier', name: 'send' } },
                                    arguments: 
                                     [ { type: 'BinaryExpression',
                                         operator: '+',
                                         left: { type: 'Literal', value: '', raw: '""' },
                                         right: { type: 'Identifier', name: '_rep' } } ] } },
                               { type: 'ExpressionStatement',
                                 expression: 
                                  { type: 'AssignmentExpression',
                                    operator: '+=',
                                    left: { type: 'Identifier', name: '_rep' },
                                    right: { type: 'Literal', value: 2, raw: '2' } } } ] },
                         rest: null,
                         generator: false,
                         expression: false },
                      index: 0 } ],
                 tainted: false,
                 stack: true,
                 scope: [Circular] },
               { name: 'res',
                 identifiers: [ { type: 'Identifier', name: 'res' } ],
                 references: 
                  [ { identifier: { type: 'Identifier', name: 'res' },
                      from: [Circular],
                      tainted: false,
                      resolved: [Circular],
                      flag: 1,
                      __maybeImplicitGlobal: undefined } ],
                 defs: 
                  [ { type: 'Parameter',
                      name: { type: 'Identifier', name: 'res' },
                      node: 
                       { type: 'FunctionExpression',
                         id: { type: 'Identifier', name: 'replyB' },
                         params: 
                          [ { type: 'Identifier', name: 'req' },
                            { type: 'Identifier', name: 'res' } ],
                         defaults: [],
                         body: 
                          { type: 'BlockStatement',
                            body: 
                             [ { type: 'ExpressionStatement',
                                 expression: 
                                  { type: 'CallExpression',
                                    callee: 
                                     { type: 'MemberExpression',
                                       computed: false,
                                       object: { type: 'Identifier', name: 'res' },
                                       property: { type: 'Identifier', name: 'send' } },
                                    arguments: 
                                     [ { type: 'BinaryExpression',
                                         operator: '+',
                                         left: { type: 'Literal', value: '', raw: '""' },
                                         right: { type: 'Identifier', name: '_rep' } } ] } },
                               { type: 'ExpressionStatement',
                                 expression: 
                                  { type: 'AssignmentExpression',
                                    operator: '+=',
                                    left: { type: 'Identifier', name: '_rep' },
                                    right: { type: 'Literal', value: 2, raw: '2' } } } ] },
                         rest: null,
                         generator: false,
                         expression: false },
                      index: 1 } ],
                 tainted: false,
                 stack: true,
                 scope: [Circular] } ],
            references: 
             [ { identifier: { type: 'Identifier', name: 'res' },
                 from: [Circular],
                 tainted: false,
                 resolved: 
                  { name: 'res',
                    identifiers: [ { type: 'Identifier', name: 'res' } ],
                    references: [ [Circular] ],
                    defs: 
                     [ { type: 'Parameter',
                         name: { type: 'Identifier', name: 'res' },
                         node: 
                          { type: 'FunctionExpression',
                            id: { type: 'Identifier', name: 'replyB' },
                            params: 
                             [ { type: 'Identifier', name: 'req' },
                               { type: 'Identifier', name: 'res' } ],
                            defaults: [],
                            body: 
                             { type: 'BlockStatement',
                               body: 
                                [ { type: 'ExpressionStatement',
                                    expression: 
                                     { type: 'CallExpression',
                                       callee: 
                                        { type: 'MemberExpression',
                                          computed: false,
                                          object: { type: 'Identifier', name: 'res' },
                                          property: { type: 'Identifier', name: 'send' } },
                                       arguments: 
                                        [ { type: 'BinaryExpression',
                                            operator: '+',
                                            left: { type: 'Literal', value: '', raw: '""' },
                                            right: { type: 'Identifier', name: '_rep' } } ] } },
                                  { type: 'ExpressionStatement',
                                    expression: 
                                     { type: 'AssignmentExpression',
                                       operator: '+=',
                                       left: { type: 'Identifier', name: '_rep' },
                                       right: { type: 'Literal', value: 2, raw: '2' } } } ] },
                            rest: null,
                            generator: false,
                            expression: false },
                         index: 1 } ],
                    tainted: false,
                    stack: true,
                    scope: [Circular] },
                 flag: 1,
                 __maybeImplicitGlobal: undefined },
               { identifier: { type: 'Identifier', name: '_rep' },
                 from: [Circular],
                 tainted: false,
                 resolved: null,
                 flag: 1,
                 __maybeImplicitGlobal: undefined },
               { identifier: { type: 'Identifier', name: '_rep' },
                 from: [Circular],
                 tainted: false,
                 resolved: null,
                 flag: 3,
                 writeExpr: { type: 'Literal', value: 2, raw: '2' },
                 __maybeImplicitGlobal: undefined } ],
            left: null,
            variableScope: [Circular],
            functionExpressionScope: false,
            directCallToEvalScope: false,
            thisFound: false,
            upper: [Circular],
            isStrict: false,
            childScopes: [] } ] },
     { type: 'function',
       set: 
        { __data: 
           { '$arguments': 
              { name: 'arguments',
                identifiers: [],
                references: [],
                defs: [],
                tainted: false,
                stack: true,
                scope: [Circular] },
             '$req': 
              { name: 'req',
                identifiers: [ { type: 'Identifier', name: 'req' } ],
                references: [],
                defs: 
                 [ { type: 'Parameter',
                     name: { type: 'Identifier', name: 'req' },
                     node: 
                      { type: 'FunctionExpression',
                        id: { type: 'Identifier', name: 'replyB' },
                        params: 
                         [ { type: 'Identifier', name: 'req' },
                           { type: 'Identifier', name: 'res' } ],
                        defaults: [],
                        body: 
                         { type: 'BlockStatement',
                           body: 
                            [ { type: 'ExpressionStatement',
                                expression: 
                                 { type: 'CallExpression',
                                   callee: 
                                    { type: 'MemberExpression',
                                      computed: false,
                                      object: { type: 'Identifier', name: 'res' },
                                      property: { type: 'Identifier', name: 'send' } },
                                   arguments: 
                                    [ { type: 'BinaryExpression',
                                        operator: '+',
                                        left: { type: 'Literal', value: '', raw: '""' },
                                        right: { type: 'Identifier', name: '_rep' } } ] } },
                              { type: 'ExpressionStatement',
                                expression: 
                                 { type: 'AssignmentExpression',
                                   operator: '+=',
                                   left: { type: 'Identifier', name: '_rep' },
                                   right: { type: 'Literal', value: 2, raw: '2' } } } ] },
                        rest: null,
                        generator: false,
                        expression: false },
                     index: 0 } ],
                tainted: false,
                stack: true,
                scope: [Circular] },
             '$res': 
              { name: 'res',
                identifiers: [ { type: 'Identifier', name: 'res' } ],
                references: 
                 [ { identifier: { type: 'Identifier', name: 'res' },
                     from: [Circular],
                     tainted: false,
                     resolved: [Circular],
                     flag: 1,
                     __maybeImplicitGlobal: undefined } ],
                defs: 
                 [ { type: 'Parameter',
                     name: { type: 'Identifier', name: 'res' },
                     node: 
                      { type: 'FunctionExpression',
                        id: { type: 'Identifier', name: 'replyB' },
                        params: 
                         [ { type: 'Identifier', name: 'req' },
                           { type: 'Identifier', name: 'res' } ],
                        defaults: [],
                        body: 
                         { type: 'BlockStatement',
                           body: 
                            [ { type: 'ExpressionStatement',
                                expression: 
                                 { type: 'CallExpression',
                                   callee: 
                                    { type: 'MemberExpression',
                                      computed: false,
                                      object: { type: 'Identifier', name: 'res' },
                                      property: { type: 'Identifier', name: 'send' } },
                                   arguments: 
                                    [ { type: 'BinaryExpression',
                                        operator: '+',
                                        left: { type: 'Literal', value: '', raw: '""' },
                                        right: { type: 'Identifier', name: '_rep' } } ] } },
                              { type: 'ExpressionStatement',
                                expression: 
                                 { type: 'AssignmentExpression',
                                   operator: '+=',
                                   left: { type: 'Identifier', name: '_rep' },
                                   right: { type: 'Literal', value: 2, raw: '2' } } } ] },
                        rest: null,
                        generator: false,
                        expression: false },
                     index: 1 } ],
                tainted: false,
                stack: true,
                scope: [Circular] } } },
       taints: { __data: { '$arguments': true } },
       dynamic: false,
       block: 
        { type: 'FunctionExpression',
          id: { type: 'Identifier', name: 'replyB' },
          params: 
           [ { type: 'Identifier', name: 'req' },
             { type: 'Identifier', name: 'res' } ],
          defaults: [],
          body: 
           { type: 'BlockStatement',
             body: 
              [ { type: 'ExpressionStatement',
                  expression: 
                   { type: 'CallExpression',
                     callee: 
                      { type: 'MemberExpression',
                        computed: false,
                        object: { type: 'Identifier', name: 'res' },
                        property: { type: 'Identifier', name: 'send' } },
                     arguments: 
                      [ { type: 'BinaryExpression',
                          operator: '+',
                          left: { type: 'Literal', value: '', raw: '""' },
                          right: { type: 'Identifier', name: '_rep' } } ] } },
                { type: 'ExpressionStatement',
                  expression: 
                   { type: 'AssignmentExpression',
                     operator: '+=',
                     left: { type: 'Identifier', name: '_rep' },
                     right: { type: 'Literal', value: 2, raw: '2' } } } ] },
          rest: null,
          generator: false,
          expression: false },
       through: 
        [ { identifier: { type: 'Identifier', name: '_rep' },
            from: [Circular],
            tainted: false,
            resolved: null,
            flag: 1,
            __maybeImplicitGlobal: undefined },
          { identifier: { type: 'Identifier', name: '_rep' },
            from: [Circular],
            tainted: false,
            resolved: null,
            flag: 3,
            writeExpr: { type: 'Literal', value: 2, raw: '2' },
            __maybeImplicitGlobal: undefined } ],
       variables: 
        [ { name: 'arguments',
            identifiers: [],
            references: [],
            defs: [],
            tainted: false,
            stack: true,
            scope: [Circular] },
          { name: 'req',
            identifiers: [ { type: 'Identifier', name: 'req' } ],
            references: [],
            defs: 
             [ { type: 'Parameter',
                 name: { type: 'Identifier', name: 'req' },
                 node: 
                  { type: 'FunctionExpression',
                    id: { type: 'Identifier', name: 'replyB' },
                    params: 
                     [ { type: 'Identifier', name: 'req' },
                       { type: 'Identifier', name: 'res' } ],
                    defaults: [],
                    body: 
                     { type: 'BlockStatement',
                       body: 
                        [ { type: 'ExpressionStatement',
                            expression: 
                             { type: 'CallExpression',
                               callee: 
                                { type: 'MemberExpression',
                                  computed: false,
                                  object: { type: 'Identifier', name: 'res' },
                                  property: { type: 'Identifier', name: 'send' } },
                               arguments: 
                                [ { type: 'BinaryExpression',
                                    operator: '+',
                                    left: { type: 'Literal', value: '', raw: '""' },
                                    right: { type: 'Identifier', name: '_rep' } } ] } },
                          { type: 'ExpressionStatement',
                            expression: 
                             { type: 'AssignmentExpression',
                               operator: '+=',
                               left: { type: 'Identifier', name: '_rep' },
                               right: { type: 'Literal', value: 2, raw: '2' } } } ] },
                    rest: null,
                    generator: false,
                    expression: false },
                 index: 0 } ],
            tainted: false,
            stack: true,
            scope: [Circular] },
          { name: 'res',
            identifiers: [ { type: 'Identifier', name: 'res' } ],
            references: 
             [ { identifier: { type: 'Identifier', name: 'res' },
                 from: [Circular],
                 tainted: false,
                 resolved: [Circular],
                 flag: 1,
                 __maybeImplicitGlobal: undefined } ],
            defs: 
             [ { type: 'Parameter',
                 name: { type: 'Identifier', name: 'res' },
                 node: 
                  { type: 'FunctionExpression',
                    id: { type: 'Identifier', name: 'replyB' },
                    params: 
                     [ { type: 'Identifier', name: 'req' },
                       { type: 'Identifier', name: 'res' } ],
                    defaults: [],
                    body: 
                     { type: 'BlockStatement',
                       body: 
                        [ { type: 'ExpressionStatement',
                            expression: 
                             { type: 'CallExpression',
                               callee: 
                                { type: 'MemberExpression',
                                  computed: false,
                                  object: { type: 'Identifier', name: 'res' },
                                  property: { type: 'Identifier', name: 'send' } },
                               arguments: 
                                [ { type: 'BinaryExpression',
                                    operator: '+',
                                    left: { type: 'Literal', value: '', raw: '""' },
                                    right: { type: 'Identifier', name: '_rep' } } ] } },
                          { type: 'ExpressionStatement',
                            expression: 
                             { type: 'AssignmentExpression',
                               operator: '+=',
                               left: { type: 'Identifier', name: '_rep' },
                               right: { type: 'Literal', value: 2, raw: '2' } } } ] },
                    rest: null,
                    generator: false,
                    expression: false },
                 index: 1 } ],
            tainted: false,
            stack: true,
            scope: [Circular] } ],
       references: 
        [ { identifier: { type: 'Identifier', name: 'res' },
            from: [Circular],
            tainted: false,
            resolved: 
             { name: 'res',
               identifiers: [ { type: 'Identifier', name: 'res' } ],
               references: [ [Circular] ],
               defs: 
                [ { type: 'Parameter',
                    name: { type: 'Identifier', name: 'res' },
                    node: 
                     { type: 'FunctionExpression',
                       id: { type: 'Identifier', name: 'replyB' },
                       params: 
                        [ { type: 'Identifier', name: 'req' },
                          { type: 'Identifier', name: 'res' } ],
                       defaults: [],
                       body: 
                        { type: 'BlockStatement',
                          body: 
                           [ { type: 'ExpressionStatement',
                               expression: 
                                { type: 'CallExpression',
                                  callee: 
                                   { type: 'MemberExpression',
                                     computed: false,
                                     object: { type: 'Identifier', name: 'res' },
                                     property: { type: 'Identifier', name: 'send' } },
                                  arguments: 
                                   [ { type: 'BinaryExpression',
                                       operator: '+',
                                       left: { type: 'Literal', value: '', raw: '""' },
                                       right: { type: 'Identifier', name: '_rep' } } ] } },
                             { type: 'ExpressionStatement',
                               expression: 
                                { type: 'AssignmentExpression',
                                  operator: '+=',
                                  left: { type: 'Identifier', name: '_rep' },
                                  right: { type: 'Literal', value: 2, raw: '2' } } } ] },
                       rest: null,
                       generator: false,
                       expression: false },
                    index: 1 } ],
               tainted: false,
               stack: true,
               scope: [Circular] },
            flag: 1,
            __maybeImplicitGlobal: undefined },
          { identifier: { type: 'Identifier', name: '_rep' },
            from: [Circular],
            tainted: false,
            resolved: null,
            flag: 1,
            __maybeImplicitGlobal: undefined },
          { identifier: { type: 'Identifier', name: '_rep' },
            from: [Circular],
            tainted: false,
            resolved: null,
            flag: 3,
            writeExpr: { type: 'Literal', value: 2, raw: '2' },
            __maybeImplicitGlobal: undefined } ],
       left: null,
       variableScope: [Circular],
       functionExpressionScope: false,
       directCallToEvalScope: false,
       thisFound: false,
       upper: 
        { type: 'function',
          set: 
           { __data: 
              { '$replyB': 
                 { name: 'replyB',
                   identifiers: [ { type: 'Identifier', name: 'replyB' } ],
                   references: [],
                   defs: 
                    [ { type: 'FunctionName',
                        name: { type: 'Identifier', name: 'replyB' },
                        node: 
                         { type: 'FunctionExpression',
                           id: { type: 'Identifier', name: 'replyB' },
                           params: 
                            [ { type: 'Identifier', name: 'req' },
                              { type: 'Identifier', name: 'res' } ],
                           defaults: [],
                           body: 
                            { type: 'BlockStatement',
                              body: 
                               [ { type: 'ExpressionStatement',
                                   expression: 
                                    { type: 'CallExpression',
                                      callee: 
                                       { type: 'MemberExpression',
                                         computed: false,
                                         object: { type: 'Identifier', name: 'res' },
                                         property: { type: 'Identifier', name: 'send' } },
                                      arguments: 
                                       [ { type: 'BinaryExpression',
                                           operator: '+',
                                           left: { type: 'Literal', value: '', raw: '""' },
                                           right: { type: 'Identifier', name: '_rep' } } ] } },
                                 { type: 'ExpressionStatement',
                                   expression: 
                                    { type: 'AssignmentExpression',
                                      operator: '+=',
                                      left: { type: 'Identifier', name: '_rep' },
                                      right: { type: 'Literal', value: 2, raw: '2' } } } ] },
                           rest: null,
                           generator: false,
                           expression: false } } ],
                   tainted: false,
                   stack: true,
                   scope: [Circular] } } },
          taints: { __data: {} },
          dynamic: false,
          block: 
           { type: 'FunctionExpression',
             id: { type: 'Identifier', name: 'replyB' },
             params: 
              [ { type: 'Identifier', name: 'req' },
                { type: 'Identifier', name: 'res' } ],
             defaults: [],
             body: 
              { type: 'BlockStatement',
                body: 
                 [ { type: 'ExpressionStatement',
                     expression: 
                      { type: 'CallExpression',
                        callee: 
                         { type: 'MemberExpression',
                           computed: false,
                           object: { type: 'Identifier', name: 'res' },
                           property: { type: 'Identifier', name: 'send' } },
                        arguments: 
                         [ { type: 'BinaryExpression',
                             operator: '+',
                             left: { type: 'Literal', value: '', raw: '""' },
                             right: { type: 'Identifier', name: '_rep' } } ] } },
                   { type: 'ExpressionStatement',
                     expression: 
                      { type: 'AssignmentExpression',
                        operator: '+=',
                        left: { type: 'Identifier', name: '_rep' },
                        right: { type: 'Literal', value: 2, raw: '2' } } } ] },
             rest: null,
             generator: false,
             expression: false },
          through: 
           [ { identifier: { type: 'Identifier', name: '_rep' },
               from: [Circular],
               tainted: false,
               resolved: null,
               flag: 1,
               __maybeImplicitGlobal: undefined },
             { identifier: { type: 'Identifier', name: '_rep' },
               from: [Circular],
               tainted: false,
               resolved: null,
               flag: 3,
               writeExpr: { type: 'Literal', value: 2, raw: '2' },
               __maybeImplicitGlobal: undefined } ],
          variables: 
           [ { name: 'replyB',
               identifiers: [ { type: 'Identifier', name: 'replyB' } ],
               references: [],
               defs: 
                [ { type: 'FunctionName',
                    name: { type: 'Identifier', name: 'replyB' },
                    node: 
                     { type: 'FunctionExpression',
                       id: { type: 'Identifier', name: 'replyB' },
                       params: 
                        [ { type: 'Identifier', name: 'req' },
                          { type: 'Identifier', name: 'res' } ],
                       defaults: [],
                       body: 
                        { type: 'BlockStatement',
                          body: 
                           [ { type: 'ExpressionStatement',
                               expression: 
                                { type: 'CallExpression',
                                  callee: 
                                   { type: 'MemberExpression',
                                     computed: false,
                                     object: { type: 'Identifier', name: 'res' },
                                     property: { type: 'Identifier', name: 'send' } },
                                  arguments: 
                                   [ { type: 'BinaryExpression',
                                       operator: '+',
                                       left: { type: 'Literal', value: '', raw: '""' },
                                       right: { type: 'Identifier', name: '_rep' } } ] } },
                             { type: 'ExpressionStatement',
                               expression: 
                                { type: 'AssignmentExpression',
                                  operator: '+=',
                                  left: { type: 'Identifier', name: '_rep' },
                                  right: { type: 'Literal', value: 2, raw: '2' } } } ] },
                       rest: null,
                       generator: false,
                       expression: false } } ],
               tainted: false,
               stack: true,
               scope: [Circular] } ],
          references: [],
          left: null,
          variableScope: [Circular],
          functionExpressionScope: true,
          directCallToEvalScope: false,
          thisFound: false,
          upper: 
           { type: 'global',
             set: 
              { __data: 
                 { '$app': 
                    { name: 'app',
                      identifiers: [ { type: 'Identifier', name: 'app' } ],
                      references: [],
                      defs: 
                       [ { type: 'Variable',
                           name: { type: 'Identifier', name: 'app' },
                           node: 
                            { type: 'VariableDeclarator',
                              id: { type: 'Identifier', name: 'app' },
                              init: 
                               { type: 'CallExpression',
                                 callee: 
                                  { type: 'CallExpression',
                                    callee: { type: 'Identifier', name: 'require' },
                                    arguments: [ { type: 'Literal', value: 'express', raw: '\'express\'' } ] },
                                 arguments: [] } },
                           index: 0,
                           parent: 
                            { type: 'VariableDeclaration',
                              declarations: 
                               [ { type: 'VariableDeclarator',
                                   id: { type: 'Identifier', name: 'app' },
                                   init: 
                                    { type: 'CallExpression',
                                      callee: 
                                       { type: 'CallExpression',
                                         callee: { type: 'Identifier', name: 'require' },
                                         arguments: [ { type: 'Literal', value: 'express', raw: '\'express\'' } ] },
                                      arguments: [] } } ],
                              kind: 'var' } } ],
                      tainted: false,
                      stack: true,
                      scope: [Circular] },
                   '$_rep': 
                    { name: '_rep',
                      identifiers: [ { type: 'Identifier', name: '_rep' } ],
                      references: [],
                      defs: 
                       [ { type: 'Variable',
                           name: { type: 'Identifier', name: '_rep' },
                           node: 
                            { type: 'VariableDeclarator',
                              id: { type: 'Identifier', name: '_rep' },
                              init: { type: 'Literal', value: 42, raw: '42' } },
                           index: 0,
                           parent: 
                            { type: 'VariableDeclaration',
                              declarations: 
                               [ { type: 'VariableDeclarator',
                                   id: { type: 'Identifier', name: '_rep' },
                                   init: { type: 'Literal', value: 42, raw: '42' } } ],
                              kind: 'var' } } ],
                      tainted: false,
                      stack: true,
                      scope: [Circular] } } },
             taints: { __data: {} },
             dynamic: true,
             block: 
              { type: 'Program',
                body: 
                 [ { type: 'VariableDeclaration',
                     declarations: 
                      [ { type: 'VariableDeclarator',
                          id: { type: 'Identifier', name: 'app' },
                          init: 
                           { type: 'CallExpression',
                             callee: 
                              { type: 'CallExpression',
                                callee: { type: 'Identifier', name: 'require' },
                                arguments: [ { type: 'Literal', value: 'express', raw: '\'express\'' } ] },
                             arguments: [] } } ],
                     kind: 'var' },
                   { type: 'VariableDeclaration',
                     declarations: 
                      [ { type: 'VariableDeclarator',
                          id: { type: 'Identifier', name: '_rep' },
                          init: { type: 'Literal', value: 42, raw: '42' } } ],
                     kind: 'var' },
                   { type: 'ExpressionStatement',
                     expression: 
                      { type: 'CallExpression',
                        callee: 
                         { type: 'MemberExpression',
                           computed: false,
                           object: { type: 'Identifier', name: 'app' },
                           property: { type: 'Identifier', name: 'get' } },
                        arguments: 
                         [ { type: 'Literal', value: '/A', raw: '"/A"' },
                           { type: 'FunctionExpression',
                             id: { type: 'Identifier', name: 'replyA' },
                             params: 
                              [ { type: 'Identifier', name: 'req' },
                                { type: 'Identifier', name: 'res' } ],
                             defaults: [],
                             body: 
                              { type: 'BlockStatement',
                                body: 
                                 [ { type: 'ExpressionStatement',
                                     expression: 
                                      { type: 'CallExpression',
                                        callee: 
                                         { type: 'MemberExpression',
                                           computed: false,
                                           object: { type: 'Identifier', name: 'res' },
                                           property: { type: 'Identifier', name: 'send' } },
                                        arguments: 
                                         [ { type: 'BinaryExpression',
                                             operator: '+',
                                             left: { type: 'Literal', value: '', raw: '""' },
                                             right: { type: 'Identifier', name: '_rep' } } ] } },
                                   { type: 'ExpressionStatement',
                                     expression: 
                                      { type: 'AssignmentExpression',
                                        operator: '+=',
                                        left: { type: 'Identifier', name: '_rep' },
                                        right: { type: 'Literal', value: 1, raw: '1' } } } ] },
                             rest: null,
                             generator: false,
                             expression: false } ] } },
                   { type: 'ExpressionStatement',
                     expression: 
                      { type: 'CallExpression',
                        callee: 
                         { type: 'MemberExpression',
                           computed: false,
                           object: { type: 'Identifier', name: 'app' },
                           property: { type: 'Identifier', name: 'get' } },
                        arguments: 
                         [ { type: 'Literal', value: '/B', raw: '"/B"' },
                           { type: 'FunctionExpression',
                             id: { type: 'Identifier', name: 'replyB' },
                             params: 
                              [ { type: 'Identifier', name: 'req' },
                                { type: 'Identifier', name: 'res' } ],
                             defaults: [],
                             body: 
                              { type: 'BlockStatement',
                                body: 
                                 [ { type: 'ExpressionStatement',
                                     expression: 
                                      { type: 'CallExpression',
                                        callee: 
                                         { type: 'MemberExpression',
                                           computed: false,
                                           object: { type: 'Identifier', name: 'res' },
                                           property: { type: 'Identifier', name: 'send' } },
                                        arguments: 
                                         [ { type: 'BinaryExpression',
                                             operator: '+',
                                             left: { type: 'Literal', value: '', raw: '""' },
                                             right: { type: 'Identifier', name: '_rep' } } ] } },
                                   { type: 'ExpressionStatement',
                                     expression: 
                                      { type: 'AssignmentExpression',
                                        operator: '+=',
                                        left: { type: 'Identifier', name: '_rep' },
                                        right: { type: 'Literal', value: 2, raw: '2' } } } ] },
                             rest: null,
                             generator: false,
                             expression: false } ] } },
                   { type: 'IfStatement',
                     test: 
                      { type: 'UnaryExpression',
                        operator: '!',
                        argument: 
                         { type: 'MemberExpression',
                           computed: false,
                           object: { type: 'Identifier', name: 'module' },
                           property: { type: 'Identifier', name: 'parent' } },
                        prefix: true },
                     consequent: 
                      { type: 'BlockStatement',
                        body: 
                         [ { type: 'ExpressionStatement',
                             expression: 
                              { type: 'CallExpression',
                                callee: 
                                 { type: 'MemberExpression',
                                   computed: false,
                                   object: { type: 'Identifier', name: 'app' },
                                   property: { type: 'Identifier', name: 'listen' } },
                                arguments: [ { type: 'Literal', value: 8080, raw: '8080' } ] } },
                           { type: 'ExpressionStatement',
                             expression: 
                              { type: 'CallExpression',
                                callee: 
                                 { type: 'MemberExpression',
                                   computed: false,
                                   object: { type: 'Identifier', name: 'console' },
                                   property: { type: 'Identifier', name: 'log' } },
                                arguments: 
                                 [ { type: 'Literal',
                                     value: '>> listening 8080',
                                     raw: '">> listening 8080"' } ] } } ] },
                     alternate: null },
                   { type: 'ExpressionStatement',
                     expression: 
                      { type: 'AssignmentExpression',
                        operator: '=',
                        left: 
                         { type: 'MemberExpression',
                           computed: false,
                           object: { type: 'Identifier', name: 'exports' },
                           property: { type: 'Identifier', name: 'app' } },
                        right: { type: 'Identifier', name: 'app' } } } ] },
             through: 
              [ { identifier: { type: 'Identifier', name: 'app' },
                  from: [Circular],
                  tainted: false,
                  resolved: null,
                  flag: 2,
                  writeExpr: 
                   { type: 'CallExpression',
                     callee: 
                      { type: 'CallExpression',
                        callee: { type: 'Identifier', name: 'require' },
                        arguments: [ { type: 'Literal', value: 'express', raw: '\'express\'' } ] },
                     arguments: [] },
                  __maybeImplicitGlobal: false },
                { identifier: { type: 'Identifier', name: 'require' },
                  from: [Circular],
                  tainted: false,
                  resolved: null,
                  flag: 1,
                  __maybeImplicitGlobal: undefined },
                { identifier: { type: 'Identifier', name: '_rep' },
                  from: [Circular],
                  tainted: false,
                  resolved: null,
                  flag: 2,
                  writeExpr: { type: 'Literal', value: 42, raw: '42' },
                  __maybeImplicitGlobal: false },
                { identifier: { type: 'Identifier', name: 'app' },
                  from: [Circular],
                  tainted: false,
                  resolved: null,
                  flag: 1,
                  __maybeImplicitGlobal: undefined },
                { identifier: { type: 'Identifier', name: '_rep' },
                  from: 
                   { type: 'function',
                     set: 
                      { __data: 
                         { '$arguments': 
                            { name: 'arguments',
                              identifiers: [],
                              references: [],
                              defs: [],
                              tainted: false,
                              stack: true,
                              scope: [Circular] },
                           '$req': 
                            { name: 'req',
                              identifiers: [ { type: 'Identifier', name: 'req' } ],
                              references: [],
                              defs: 
                               [ { type: 'Parameter',
                                   name: { type: 'Identifier', name: 'req' },
                                   node: 
                                    { type: 'FunctionExpression',
                                      id: { type: 'Identifier', name: 'replyA' },
                                      params: 
                                       [ { type: 'Identifier', name: 'req' },
                                         { type: 'Identifier', name: 'res' } ],
                                      defaults: [],
                                      body: 
                                       { type: 'BlockStatement',
                                         body: 
                                          [ { type: 'ExpressionStatement',
                                              expression: 
                                               { type: 'CallExpression',
                                                 callee: 
                                                  { type: 'MemberExpression',
                                                    computed: false,
                                                    object: { type: 'Identifier', name: 'res' },
                                                    property: { type: 'Identifier', name: 'send' } },
                                                 arguments: 
                                                  [ { type: 'BinaryExpression',
                                                      operator: '+',
                                                      left: { type: 'Literal', value: '', raw: '""' },
                                                      right: { type: 'Identifier', name: '_rep' } } ] } },
                                            { type: 'ExpressionStatement',
                                              expression: 
                                               { type: 'AssignmentExpression',
                                                 operator: '+=',
                                                 left: { type: 'Identifier', name: '_rep' },
                                                 right: { type: 'Literal', value: 1, raw: '1' } } } ] },
                                      rest: null,
                                      generator: false,
                                      expression: false },
                                   index: 0 } ],
                              tainted: false,
                              stack: true,
                              scope: [Circular] },
                           '$res': 
                            { name: 'res',
                              identifiers: [ { type: 'Identifier', name: 'res' } ],
                              references: 
                               [ { identifier: { type: 'Identifier', name: 'res' },
                                   from: [Circular],
                                   tainted: false,
                                   resolved: [Circular],
                                   flag: 1,
                                   __maybeImplicitGlobal: undefined } ],
                              defs: 
                               [ { type: 'Parameter',
                                   name: { type: 'Identifier', name: 'res' },
                                   node: 
                                    { type: 'FunctionExpression',
                                      id: { type: 'Identifier', name: 'replyA' },
                                      params: 
                                       [ { type: 'Identifier', name: 'req' },
                                         { type: 'Identifier', name: 'res' } ],
                                      defaults: [],
                                      body: 
                                       { type: 'BlockStatement',
                                         body: 
                                          [ { type: 'ExpressionStatement',
                                              expression: 
                                               { type: 'CallExpression',
                                                 callee: 
                                                  { type: 'MemberExpression',
                                                    computed: false,
                                                    object: { type: 'Identifier', name: 'res' },
                                                    property: { type: 'Identifier', name: 'send' } },
                                                 arguments: 
                                                  [ { type: 'BinaryExpression',
                                                      operator: '+',
                                                      left: { type: 'Literal', value: '', raw: '""' },
                                                      right: { type: 'Identifier', name: '_rep' } } ] } },
                                            { type: 'ExpressionStatement',
                                              expression: 
                                               { type: 'AssignmentExpression',
                                                 operator: '+=',
                                                 left: { type: 'Identifier', name: '_rep' },
                                                 right: { type: 'Literal', value: 1, raw: '1' } } } ] },
                                      rest: null,
                                      generator: false,
                                      expression: false },
                                   index: 1 } ],
                              tainted: false,
                              stack: true,
                              scope: [Circular] } } },
                     taints: { __data: { '$arguments': true } },
                     dynamic: false,
                     block: 
                      { type: 'FunctionExpression',
                        id: { type: 'Identifier', name: 'replyA' },
                        params: 
                         [ { type: 'Identifier', name: 'req' },
                           { type: 'Identifier', name: 'res' } ],
                        defaults: [],
                        body: 
                         { type: 'BlockStatement',
                           body: 
                            [ { type: 'ExpressionStatement',
                                expression: 
                                 { type: 'CallExpression',
                                   callee: 
                                    { type: 'MemberExpression',
                                      computed: false,
                                      object: { type: 'Identifier', name: 'res' },
                                      property: { type: 'Identifier', name: 'send' } },
                                   arguments: 
                                    [ { type: 'BinaryExpression',
                                        operator: '+',
                                        left: { type: 'Literal', value: '', raw: '""' },
                                        right: { type: 'Identifier', name: '_rep' } } ] } },
                              { type: 'ExpressionStatement',
                                expression: 
                                 { type: 'AssignmentExpression',
                                   operator: '+=',
                                   left: { type: 'Identifier', name: '_rep' },
                                   right: { type: 'Literal', value: 1, raw: '1' } } } ] },
                        rest: null,
                        generator: false,
                        expression: false },
                     through: 
                      [ [Circular],
                        { identifier: { type: 'Identifier', name: '_rep' },
                          from: [Circular],
                          tainted: false,
                          resolved: null,
                          flag: 3,
                          writeExpr: { type: 'Literal', value: 1, raw: '1' },
                          __maybeImplicitGlobal: undefined } ],
                     variables: 
                      [ { name: 'arguments',
                          identifiers: [],
                          references: [],
                          defs: [],
                          tainted: false,
                          stack: true,
                          scope: [Circular] },
                        { name: 'req',
                          identifiers: [ { type: 'Identifier', name: 'req' } ],
                          references: [],
                          defs: 
                           [ { type: 'Parameter',
                               name: { type: 'Identifier', name: 'req' },
                               node: 
                                { type: 'FunctionExpression',
                                  id: { type: 'Identifier', name: 'replyA' },
                                  params: 
                                   [ { type: 'Identifier', name: 'req' },
                                     { type: 'Identifier', name: 'res' } ],
                                  defaults: [],
                                  body: 
                                   { type: 'BlockStatement',
                                     body: 
                                      [ { type: 'ExpressionStatement',
                                          expression: 
                                           { type: 'CallExpression',
                                             callee: 
                                              { type: 'MemberExpression',
                                                computed: false,
                                                object: { type: 'Identifier', name: 'res' },
                                                property: { type: 'Identifier', name: 'send' } },
                                             arguments: 
                                              [ { type: 'BinaryExpression',
                                                  operator: '+',
                                                  left: { type: 'Literal', value: '', raw: '""' },
                                                  right: { type: 'Identifier', name: '_rep' } } ] } },
                                        { type: 'ExpressionStatement',
                                          expression: 
                                           { type: 'AssignmentExpression',
                                             operator: '+=',
                                             left: { type: 'Identifier', name: '_rep' },
                                             right: { type: 'Literal', value: 1, raw: '1' } } } ] },
                                  rest: null,
                                  generator: false,
                                  expression: false },
                               index: 0 } ],
                          tainted: false,
                          stack: true,
                          scope: [Circular] },
                        { name: 'res',
                          identifiers: [ { type: 'Identifier', name: 'res' } ],
                          references: 
                           [ { identifier: { type: 'Identifier', name: 'res' },
                               from: [Circular],
                               tainted: false,
                               resolved: [Circular],
                               flag: 1,
                               __maybeImplicitGlobal: undefined } ],
                          defs: 
                           [ { type: 'Parameter',
                               name: { type: 'Identifier', name: 'res' },
                               node: 
                                { type: 'FunctionExpression',
                                  id: { type: 'Identifier', name: 'replyA' },
                                  params: 
                                   [ { type: 'Identifier', name: 'req' },
                                     { type: 'Identifier', name: 'res' } ],
                                  defaults: [],
                                  body: 
                                   { type: 'BlockStatement',
                                     body: 
                                      [ { type: 'ExpressionStatement',
                                          expression: 
                                           { type: 'CallExpression',
                                             callee: 
                                              { type: 'MemberExpression',
                                                computed: false,
                                                object: { type: 'Identifier', name: 'res' },
                                                property: { type: 'Identifier', name: 'send' } },
                                             arguments: 
                                              [ { type: 'BinaryExpression',
                                                  operator: '+',
                                                  left: { type: 'Literal', value: '', raw: '""' },
                                                  right: { type: 'Identifier', name: '_rep' } } ] } },
                                        { type: 'ExpressionStatement',
                                          expression: 
                                           { type: 'AssignmentExpression',
                                             operator: '+=',
                                             left: { type: 'Identifier', name: '_rep' },
                                             right: { type: 'Literal', value: 1, raw: '1' } } } ] },
                                  rest: null,
                                  generator: false,
                                  expression: false },
                               index: 1 } ],
                          tainted: false,
                          stack: true,
                          scope: [Circular] } ],
                     references: 
                      [ { identifier: { type: 'Identifier', name: 'res' },
                          from: [Circular],
                          tainted: false,
                          resolved: 
                           { name: 'res',
                             identifiers: [ { type: 'Identifier', name: 'res' } ],
                             references: [ [Circular] ],
                             defs: 
                              [ { type: 'Parameter',
                                  name: { type: 'Identifier', name: 'res' },
                                  node: 
                                   { type: 'FunctionExpression',
                                     id: { type: 'Identifier', name: 'replyA' },
                                     params: 
                                      [ { type: 'Identifier', name: 'req' },
                                        { type: 'Identifier', name: 'res' } ],
                                     defaults: [],
                                     body: 
                                      { type: 'BlockStatement',
                                        body: 
                                         [ { type: 'ExpressionStatement',
                                             expression: 
                                              { type: 'CallExpression',
                                                callee: 
                                                 { type: 'MemberExpression',
                                                   computed: false,
                                                   object: { type: 'Identifier', name: 'res' },
                                                   property: { type: 'Identifier', name: 'send' } },
                                                arguments: 
                                                 [ { type: 'BinaryExpression',
                                                     operator: '+',
                                                     left: { type: 'Literal', value: '', raw: '""' },
                                                     right: { type: 'Identifier', name: '_rep' } } ] } },
                                           { type: 'ExpressionStatement',
                                             expression: 
                                              { type: 'AssignmentExpression',
                                                operator: '+=',
                                                left: { type: 'Identifier', name: '_rep' },
                                                right: { type: 'Literal', value: 1, raw: '1' } } } ] },
                                     rest: null,
                                     generator: false,
                                     expression: false },
                                  index: 1 } ],
                             tainted: false,
                             stack: true,
                             scope: [Circular] },
                          flag: 1,
                          __maybeImplicitGlobal: undefined },
                        [Circular],
                        { identifier: { type: 'Identifier', name: '_rep' },
                          from: [Circular],
                          tainted: false,
                          resolved: null,
                          flag: 3,
                          writeExpr: { type: 'Literal', value: 1, raw: '1' },
                          __maybeImplicitGlobal: undefined } ],
                     left: null,
                     variableScope: [Circular],
                     functionExpressionScope: false,
                     directCallToEvalScope: false,
                     thisFound: false,
                     upper: 
                      { type: 'function',
                        set: 
                         { __data: 
                            { '$replyA': 
                               { name: 'replyA',
                                 identifiers: [ { type: 'Identifier', name: 'replyA' } ],
                                 references: [],
                                 defs: 
                                  [ { type: 'FunctionName',
                                      name: { type: 'Identifier', name: 'replyA' },
                                      node: 
                                       { type: 'FunctionExpression',
                                         id: { type: 'Identifier', name: 'replyA' },
                                         params: 
                                          [ { type: 'Identifier', name: 'req' },
                                            { type: 'Identifier', name: 'res' } ],
                                         defaults: [],
                                         body: 
                                          { type: 'BlockStatement',
                                            body: 
                                             [ { type: 'ExpressionStatement',
                                                 expression: 
                                                  { type: 'CallExpression',
                                                    callee: 
                                                     { type: 'MemberExpression',
                                                       computed: false,
                                                       object: { type: 'Identifier', name: 'res' },
                                                       property: { type: 'Identifier', name: 'send' } },
                                                    arguments: 
                                                     [ { type: 'BinaryExpression',
                                                         operator: '+',
                                                         left: { type: 'Literal', value: '', raw: '""' },
                                                         right: { type: 'Identifier', name: '_rep' } } ] } },
                                               { type: 'ExpressionStatement',
                                                 expression: 
                                                  { type: 'AssignmentExpression',
                                                    operator: '+=',
                                                    left: { type: 'Identifier', name: '_rep' },
                                                    right: { type: 'Literal', value: 1, raw: '1' } } } ] },
                                         rest: null,
                                         generator: false,
                                         expression: false } } ],
                                 tainted: false,
                                 stack: true,
                                 scope: [Circular] } } },
                        taints: { __data: {} },
                        dynamic: false,
                        block: 
                         { type: 'FunctionExpression',
                           id: { type: 'Identifier', name: 'replyA' },
                           params: 
                            [ { type: 'Identifier', name: 'req' },
                              { type: 'Identifier', name: 'res' } ],
                           defaults: [],
                           body: 
                            { type: 'BlockStatement',
                              body: 
                               [ { type: 'ExpressionStatement',
                                   expression: 
                                    { type: 'CallExpression',
                                      callee: 
                                       { type: 'MemberExpression',
                                         computed: false,
                                         object: { type: 'Identifier', name: 'res' },
                                         property: { type: 'Identifier', name: 'send' } },
                                      arguments: 
                                       [ { type: 'BinaryExpression',
                                           operator: '+',
                                           left: { type: 'Literal', value: '', raw: '""' },
                                           right: { type: 'Identifier', name: '_rep' } } ] } },
                                 { type: 'ExpressionStatement',
                                   expression: 
                                    { type: 'AssignmentExpression',
                                      operator: '+=',
                                      left: { type: 'Identifier', name: '_rep' },
                                      right: { type: 'Literal', value: 1, raw: '1' } } } ] },
                           rest: null,
                           generator: false,
                           expression: false },
                        through: 
                         [ [Circular],
                           { identifier: { type: 'Identifier', name: '_rep' },
                             from: [Circular],
                             tainted: false,
                             resolved: null,
                             flag: 3,
                             writeExpr: { type: 'Literal', value: 1, raw: '1' },
                             __maybeImplicitGlobal: undefined } ],
                        variables: 
                         [ { name: 'replyA',
                             identifiers: [ { type: 'Identifier', name: 'replyA' } ],
                             references: [],
                             defs: 
                              [ { type: 'FunctionName',
                                  name: { type: 'Identifier', name: 'replyA' },
                                  node: 
                                   { type: 'FunctionExpression',
                                     id: { type: 'Identifier', name: 'replyA' },
                                     params: 
                                      [ { type: 'Identifier', name: 'req' },
                                        { type: 'Identifier', name: 'res' } ],
                                     defaults: [],
                                     body: 
                                      { type: 'BlockStatement',
                                        body: 
                                         [ { type: 'ExpressionStatement',
                                             expression: 
                                              { type: 'CallExpression',
                                                callee: 
                                                 { type: 'MemberExpression',
                                                   computed: false,
                                                   object: { type: 'Identifier', name: 'res' },
                                                   property: { type: 'Identifier', name: 'send' } },
                                                arguments: 
                                                 [ { type: 'BinaryExpression',
                                                     operator: '+',
                                                     left: { type: 'Literal', value: '', raw: '""' },
                                                     right: { type: 'Identifier', name: '_rep' } } ] } },
                                           { type: 'ExpressionStatement',
                                             expression: 
                                              { type: 'AssignmentExpression',
                                                operator: '+=',
                                                left: { type: 'Identifier', name: '_rep' },
                                                right: { type: 'Literal', value: 1, raw: '1' } } } ] },
                                     rest: null,
                                     generator: false,
                                     expression: false } } ],
                             tainted: false,
                             stack: true,
                             scope: [Circular] } ],
                        references: [],
                        left: null,
                        variableScope: [Circular],
                        functionExpressionScope: true,
                        directCallToEvalScope: false,
                        thisFound: false,
                        upper: [Circular],
                        isStrict: false,
                        childScopes: [ [Circular] ] },
                     isStrict: false,
                     childScopes: [] },
                  tainted: false,
                  resolved: null,
                  flag: 1,
                  __maybeImplicitGlobal: undefined },
                { identifier: { type: 'Identifier', name: '_rep' },
                  from: 
                   { type: 'function',
                     set: 
                      { __data: 
                         { '$arguments': 
                            { name: 'arguments',
                              identifiers: [],
                              references: [],
                              defs: [],
                              tainted: false,
                              stack: true,
                              scope: [Circular] },
                           '$req': 
                            { name: 'req',
                              identifiers: [ { type: 'Identifier', name: 'req' } ],
                              references: [],
                              defs: 
                               [ { type: 'Parameter',
                                   name: { type: 'Identifier', name: 'req' },
                                   node: 
                                    { type: 'FunctionExpression',
                                      id: { type: 'Identifier', name: 'replyA' },
                                      params: 
                                       [ { type: 'Identifier', name: 'req' },
                                         { type: 'Identifier', name: 'res' } ],
                                      defaults: [],
                                      body: 
                                       { type: 'BlockStatement',
                                         body: 
                                          [ { type: 'ExpressionStatement',
                                              expression: 
                                               { type: 'CallExpression',
                                                 callee: 
                                                  { type: 'MemberExpression',
                                                    computed: false,
                                                    object: { type: 'Identifier', name: 'res' },
                                                    property: { type: 'Identifier', name: 'send' } },
                                                 arguments: 
                                                  [ { type: 'BinaryExpression',
                                                      operator: '+',
                                                      left: { type: 'Literal', value: '', raw: '""' },
                                                      right: { type: 'Identifier', name: '_rep' } } ] } },
                                            { type: 'ExpressionStatement',
                                              expression: 
                                               { type: 'AssignmentExpression',
                                                 operator: '+=',
                                                 left: { type: 'Identifier', name: '_rep' },
                                                 right: { type: 'Literal', value: 1, raw: '1' } } } ] },
                                      rest: null,
                                      generator: false,
                                      expression: false },
                                   index: 0 } ],
                              tainted: false,
                              stack: true,
                              scope: [Circular] },
                           '$res': 
                            { name: 'res',
                              identifiers: [ { type: 'Identifier', name: 'res' } ],
                              references: 
                               [ { identifier: { type: 'Identifier', name: 'res' },
                                   from: [Circular],
                                   tainted: false,
                                   resolved: [Circular],
                                   flag: 1,
                                   __maybeImplicitGlobal: undefined } ],
                              defs: 
                               [ { type: 'Parameter',
                                   name: { type: 'Identifier', name: 'res' },
                                   node: 
                                    { type: 'FunctionExpression',
                                      id: { type: 'Identifier', name: 'replyA' },
                                      params: 
                                       [ { type: 'Identifier', name: 'req' },
                                         { type: 'Identifier', name: 'res' } ],
                                      defaults: [],
                                      body: 
                                       { type: 'BlockStatement',
                                         body: 
                                          [ { type: 'ExpressionStatement',
                                              expression: 
                                               { type: 'CallExpression',
                                                 callee: 
                                                  { type: 'MemberExpression',
                                                    computed: false,
                                                    object: { type: 'Identifier', name: 'res' },
                                                    property: { type: 'Identifier', name: 'send' } },
                                                 arguments: 
                                                  [ { type: 'BinaryExpression',
                                                      operator: '+',
                                                      left: { type: 'Literal', value: '', raw: '""' },
                                                      right: { type: 'Identifier', name: '_rep' } } ] } },
                                            { type: 'ExpressionStatement',
                                              expression: 
                                               { type: 'AssignmentExpression',
                                                 operator: '+=',
                                                 left: { type: 'Identifier', name: '_rep' },
                                                 right: { type: 'Literal', value: 1, raw: '1' } } } ] },
                                      rest: null,
                                      generator: false,
                                      expression: false },
                                   index: 1 } ],
                              tainted: false,
                              stack: true,
                              scope: [Circular] } } },
                     taints: { __data: { '$arguments': true } },
                     dynamic: false,
                     block: 
                      { type: 'FunctionExpression',
                        id: { type: 'Identifier', name: 'replyA' },
                        params: 
                         [ { type: 'Identifier', name: 'req' },
                           { type: 'Identifier', name: 'res' } ],
                        defaults: [],
                        body: 
                         { type: 'BlockStatement',
                           body: 
                            [ { type: 'ExpressionStatement',
                                expression: 
                                 { type: 'CallExpression',
                                   callee: 
                                    { type: 'MemberExpression',
                                      computed: false,
                                      object: { type: 'Identifier', name: 'res' },
                                      property: { type: 'Identifier', name: 'send' } },
                                   arguments: 
                                    [ { type: 'BinaryExpression',
                                        operator: '+',
                                        left: { type: 'Literal', value: '', raw: '""' },
                                        right: { type: 'Identifier', name: '_rep' } } ] } },
                              { type: 'ExpressionStatement',
                                expression: 
                                 { type: 'AssignmentExpression',
                                   operator: '+=',
                                   left: { type: 'Identifier', name: '_rep' },
                                   right: { type: 'Literal', value: 1, raw: '1' } } } ] },
                        rest: null,
                        generator: false,
                        expression: false },
                     through: 
                      [ { identifier: { type: 'Identifier', name: '_rep' },
                          from: [Circular],
                          tainted: false,
                          resolved: null,
                          flag: 1,
                          __maybeImplicitGlobal: undefined },
                        [Circular] ],
                     variables: 
                      [ { name: 'arguments',
                          identifiers: [],
                          references: [],
                          defs: [],
                          tainted: false,
                          stack: true,
                          scope: [Circular] },
                        { name: 'req',
                          identifiers: [ { type: 'Identifier', name: 'req' } ],
                          references: [],
                          defs: 
                           [ { type: 'Parameter',
                               name: { type: 'Identifier', name: 'req' },
                               node: 
                                { type: 'FunctionExpression',
                                  id: { type: 'Identifier', name: 'replyA' },
                                  params: 
                                   [ { type: 'Identifier', name: 'req' },
                                     { type: 'Identifier', name: 'res' } ],
                                  defaults: [],
                                  body: 
                                   { type: 'BlockStatement',
                                     body: 
                                      [ { type: 'ExpressionStatement',
                                          expression: 
                                           { type: 'CallExpression',
                                             callee: 
                                              { type: 'MemberExpression',
                                                computed: false,
                                                object: { type: 'Identifier', name: 'res' },
                                                property: { type: 'Identifier', name: 'send' } },
                                             arguments: 
                                              [ { type: 'BinaryExpression',
                                                  operator: '+',
                                                  left: { type: 'Literal', value: '', raw: '""' },
                                                  right: { type: 'Identifier', name: '_rep' } } ] } },
                                        { type: 'ExpressionStatement',
                                          expression: 
                                           { type: 'AssignmentExpression',
                                             operator: '+=',
                                             left: { type: 'Identifier', name: '_rep' },
                                             right: { type: 'Literal', value: 1, raw: '1' } } } ] },
                                  rest: null,
                                  generator: false,
                                  expression: false },
                               index: 0 } ],
                          tainted: false,
                          stack: true,
                          scope: [Circular] },
                        { name: 'res',
                          identifiers: [ { type: 'Identifier', name: 'res' } ],
                          references: 
                           [ { identifier: { type: 'Identifier', name: 'res' },
                               from: [Circular],
                               tainted: false,
                               resolved: [Circular],
                               flag: 1,
                               __maybeImplicitGlobal: undefined } ],
                          defs: 
                           [ { type: 'Parameter',
                               name: { type: 'Identifier', name: 'res' },
                               node: 
                                { type: 'FunctionExpression',
                                  id: { type: 'Identifier', name: 'replyA' },
                                  params: 
                                   [ { type: 'Identifier', name: 'req' },
                                     { type: 'Identifier', name: 'res' } ],
                                  defaults: [],
                                  body: 
                                   { type: 'BlockStatement',
                                     body: 
                                      [ { type: 'ExpressionStatement',
                                          expression: 
                                           { type: 'CallExpression',
                                             callee: 
                                              { type: 'MemberExpression',
                                                computed: false,
                                                object: { type: 'Identifier', name: 'res' },
                                                property: { type: 'Identifier', name: 'send' } },
                                             arguments: 
                                              [ { type: 'BinaryExpression',
                                                  operator: '+',
                                                  left: { type: 'Literal', value: '', raw: '""' },
                                                  right: { type: 'Identifier', name: '_rep' } } ] } },
                                        { type: 'ExpressionStatement',
                                          expression: 
                                           { type: 'AssignmentExpression',
                                             operator: '+=',
                                             left: { type: 'Identifier', name: '_rep' },
                                             right: { type: 'Literal', value: 1, raw: '1' } } } ] },
                                  rest: null,
                                  generator: false,
                                  expression: false },
                               index: 1 } ],
                          tainted: false,
                          stack: true,
                          scope: [Circular] } ],
                     references: 
                      [ { identifier: { type: 'Identifier', name: 'res' },
                          from: [Circular],
                          tainted: false,
                          resolved: 
                           { name: 'res',
                             identifiers: [ { type: 'Identifier', name: 'res' } ],
                             references: [ [Circular] ],
                             defs: 
                              [ { type: 'Parameter',
                                  name: { type: 'Identifier', name: 'res' },
                                  node: 
                                   { type: 'FunctionExpression',
                                     id: { type: 'Identifier', name: 'replyA' },
                                     params: 
                                      [ { type: 'Identifier', name: 'req' },
                                        { type: 'Identifier', name: 'res' } ],
                                     defaults: [],
                                     body: 
                                      { type: 'BlockStatement',
                                        body: 
                                         [ { type: 'ExpressionStatement',
                                             expression: 
                                              { type: 'CallExpression',
                                                callee: 
                                                 { type: 'MemberExpression',
                                                   computed: false,
                                                   object: { type: 'Identifier', name: 'res' },
                                                   property: { type: 'Identifier', name: 'send' } },
                                                arguments: 
                                                 [ { type: 'BinaryExpression',
                                                     operator: '+',
                                                     left: { type: 'Literal', value: '', raw: '""' },
                                                     right: { type: 'Identifier', name: '_rep' } } ] } },
                                           { type: 'ExpressionStatement',
                                             expression: 
                                              { type: 'AssignmentExpression',
                                                operator: '+=',
                                                left: { type: 'Identifier', name: '_rep' },
                                                right: { type: 'Literal', value: 1, raw: '1' } } } ] },
                                     rest: null,
                                     generator: false,
                                     expression: false },
                                  index: 1 } ],
                             tainted: false,
                             stack: true,
                             scope: [Circular] },
                          flag: 1,
                          __maybeImplicitGlobal: undefined },
                        { identifier: { type: 'Identifier', name: '_rep' },
                          from: [Circular],
                          tainted: false,
                          resolved: null,
                          flag: 1,
                          __maybeImplicitGlobal: undefined },
                        [Circular] ],
                     left: null,
                     variableScope: [Circular],
                     functionExpressionScope: false,
                     directCallToEvalScope: false,
                     thisFound: false,
                     upper: 
                      { type: 'function',
                        set: 
                         { __data: 
                            { '$replyA': 
                               { name: 'replyA',
                                 identifiers: [ { type: 'Identifier', name: 'replyA' } ],
                                 references: [],
                                 defs: 
                                  [ { type: 'FunctionName',
                                      name: { type: 'Identifier', name: 'replyA' },
                                      node: 
                                       { type: 'FunctionExpression',
                                         id: { type: 'Identifier', name: 'replyA' },
                                         params: 
                                          [ { type: 'Identifier', name: 'req' },
                                            { type: 'Identifier', name: 'res' } ],
                                         defaults: [],
                                         body: 
                                          { type: 'BlockStatement',
                                            body: 
                                             [ { type: 'ExpressionStatement',
                                                 expression: 
                                                  { type: 'CallExpression',
                                                    callee: 
                                                     { type: 'MemberExpression',
                                                       computed: false,
                                                       object: { type: 'Identifier', name: 'res' },
                                                       property: { type: 'Identifier', name: 'send' } },
                                                    arguments: 
                                                     [ { type: 'BinaryExpression',
                                                         operator: '+',
                                                         left: { type: 'Literal', value: '', raw: '""' },
                                                         right: { type: 'Identifier', name: '_rep' } } ] } },
                                               { type: 'ExpressionStatement',
                                                 expression: 
                                                  { type: 'AssignmentExpression',
                                                    operator: '+=',
                                                    left: { type: 'Identifier', name: '_rep' },
                                                    right: { type: 'Literal', value: 1, raw: '1' } } } ] },
                                         rest: null,
                                         generator: false,
                                         expression: false } } ],
                                 tainted: false,
                                 stack: true,
                                 scope: [Circular] } } },
                        taints: { __data: {} },
                        dynamic: false,
                        block: 
                         { type: 'FunctionExpression',
                           id: { type: 'Identifier', name: 'replyA' },
                           params: 
                            [ { type: 'Identifier', name: 'req' },
                              { type: 'Identifier', name: 'res' } ],
                           defaults: [],
                           body: 
                            { type: 'BlockStatement',
                              body: 
                               [ { type: 'ExpressionStatement',
                                   expression: 
                                    { type: 'CallExpression',
                                      callee: 
                                       { type: 'MemberExpression',
                                         computed: false,
                                         object: { type: 'Identifier', name: 'res' },
                                         property: { type: 'Identifier', name: 'send' } },
                                      arguments: 
                                       [ { type: 'BinaryExpression',
                                           operator: '+',
                                           left: { type: 'Literal', value: '', raw: '""' },
                                           right: { type: 'Identifier', name: '_rep' } } ] } },
                                 { type: 'ExpressionStatement',
                                   expression: 
                                    { type: 'AssignmentExpression',
                                      operator: '+=',
                                      left: { type: 'Identifier', name: '_rep' },
                                      right: { type: 'Literal', value: 1, raw: '1' } } } ] },
                           rest: null,
                           generator: false,
                           expression: false },
                        through: 
                         [ { identifier: { type: 'Identifier', name: '_rep' },
                             from: [Circular],
                             tainted: false,
                             resolved: null,
                             flag: 1,
                             __maybeImplicitGlobal: undefined },
                           [Circular] ],
                        variables: 
                         [ { name: 'replyA',
                             identifiers: [ { type: 'Identifier', name: 'replyA' } ],
                             references: [],
                             defs: 
                              [ { type: 'FunctionName',
                                  name: { type: 'Identifier', name: 'replyA' },
                                  node: 
                                   { type: 'FunctionExpression',
                                     id: { type: 'Identifier', name: 'replyA' },
                                     params: 
                                      [ { type: 'Identifier', name: 'req' },
                                        { type: 'Identifier', name: 'res' } ],
                                     defaults: [],
                                     body: 
                                      { type: 'BlockStatement',
                                        body: 
                                         [ { type: 'ExpressionStatement',
                                             expression: 
                                              { type: 'CallExpression',
                                                callee: 
                                                 { type: 'MemberExpression',
                                                   computed: false,
                                                   object: { type: 'Identifier', name: 'res' },
                                                   property: { type: 'Identifier', name: 'send' } },
                                                arguments: 
                                                 [ { type: 'BinaryExpression',
                                                     operator: '+',
                                                     left: { type: 'Literal', value: '', raw: '""' },
                                                     right: { type: 'Identifier', name: '_rep' } } ] } },
                                           { type: 'ExpressionStatement',
                                             expression: 
                                              { type: 'AssignmentExpression',
                                                operator: '+=',
                                                left: { type: 'Identifier', name: '_rep' },
                                                right: { type: 'Literal', value: 1, raw: '1' } } } ] },
                                     rest: null,
                                     generator: false,
                                     expression: false } } ],
                             tainted: false,
                             stack: true,
                             scope: [Circular] } ],
                        references: [],
                        left: null,
                        variableScope: [Circular],
                        functionExpressionScope: true,
                        directCallToEvalScope: false,
                        thisFound: false,
                        upper: [Circular],
                        isStrict: false,
                        childScopes: [ [Circular] ] },
                     isStrict: false,
                     childScopes: [] },
                  tainted: false,
                  resolved: null,
                  flag: 3,
                  writeExpr: { type: 'Literal', value: 1, raw: '1' },
                  __maybeImplicitGlobal: undefined },
                { identifier: { type: 'Identifier', name: 'app' },
                  from: [Circular],
                  tainted: false,
                  resolved: null,
                  flag: 1,
                  __maybeImplicitGlobal: undefined },
                { identifier: { type: 'Identifier', name: '_rep' },
                  from: [Circular],
                  tainted: false,
                  resolved: null,
                  flag: 1,
                  __maybeImplicitGlobal: undefined },
                { identifier: { type: 'Identifier', name: '_rep' },
                  from: [Circular],
                  tainted: false,
                  resolved: null,
                  flag: 3,
                  writeExpr: { type: 'Literal', value: 2, raw: '2' },
                  __maybeImplicitGlobal: undefined },
                { identifier: { type: 'Identifier', name: 'module' },
                  from: [Circular],
                  tainted: false,
                  resolved: null,
                  flag: 1,
                  __maybeImplicitGlobal: undefined },
                { identifier: { type: 'Identifier', name: 'app' },
                  from: [Circular],
                  tainted: false,
                  resolved: null,
                  flag: 1,
                  __maybeImplicitGlobal: undefined },
                { identifier: { type: 'Identifier', name: 'console' },
                  from: [Circular],
                  tainted: false,
                  resolved: null,
                  flag: 1,
                  __maybeImplicitGlobal: undefined },
                { identifier: { type: 'Identifier', name: 'app' },
                  from: [Circular],
                  tainted: false,
                  resolved: null,
                  flag: 1,
                  __maybeImplicitGlobal: undefined },
                { identifier: { type: 'Identifier', name: 'exports' },
                  from: [Circular],
                  tainted: false,
                  resolved: null,
                  flag: 1,
                  __maybeImplicitGlobal: undefined } ],
             variables: 
              [ { name: 'app',
                  identifiers: [ { type: 'Identifier', name: 'app' } ],
                  references: [],
                  defs: 
                   [ { type: 'Variable',
                       name: { type: 'Identifier', name: 'app' },
                       node: 
                        { type: 'VariableDeclarator',
                          id: { type: 'Identifier', name: 'app' },
                          init: 
                           { type: 'CallExpression',
                             callee: 
                              { type: 'CallExpression',
                                callee: { type: 'Identifier', name: 'require' },
                                arguments: [ { type: 'Literal', value: 'express', raw: '\'express\'' } ] },
                             arguments: [] } },
                       index: 0,
                       parent: 
                        { type: 'VariableDeclaration',
                          declarations: 
                           [ { type: 'VariableDeclarator',
                               id: { type: 'Identifier', name: 'app' },
                               init: 
                                { type: 'CallExpression',
                                  callee: 
                                   { type: 'CallExpression',
                                     callee: { type: 'Identifier', name: 'require' },
                                     arguments: [ { type: 'Literal', value: 'express', raw: '\'express\'' } ] },
                                  arguments: [] } } ],
                          kind: 'var' } } ],
                  tainted: false,
                  stack: true,
                  scope: [Circular] },
                { name: '_rep',
                  identifiers: [ { type: 'Identifier', name: '_rep' } ],
                  references: [],
                  defs: 
                   [ { type: 'Variable',
                       name: { type: 'Identifier', name: '_rep' },
                       node: 
                        { type: 'VariableDeclarator',
                          id: { type: 'Identifier', name: '_rep' },
                          init: { type: 'Literal', value: 42, raw: '42' } },
                       index: 0,
                       parent: 
                        { type: 'VariableDeclaration',
                          declarations: 
                           [ { type: 'VariableDeclarator',
                               id: { type: 'Identifier', name: '_rep' },
                               init: { type: 'Literal', value: 42, raw: '42' } } ],
                          kind: 'var' } } ],
                  tainted: false,
                  stack: true,
                  scope: [Circular] } ],
             references: 
              [ { identifier: { type: 'Identifier', name: 'app' },
                  from: [Circular],
                  tainted: false,
                  resolved: null,
                  flag: 2,
                  writeExpr: 
                   { type: 'CallExpression',
                     callee: 
                      { type: 'CallExpression',
                        callee: { type: 'Identifier', name: 'require' },
                        arguments: [ { type: 'Literal', value: 'express', raw: '\'express\'' } ] },
                     arguments: [] },
                  __maybeImplicitGlobal: false },
                { identifier: { type: 'Identifier', name: 'require' },
                  from: [Circular],
                  tainted: false,
                  resolved: null,
                  flag: 1,
                  __maybeImplicitGlobal: undefined },
                { identifier: { type: 'Identifier', name: '_rep' },
                  from: [Circular],
                  tainted: false,
                  resolved: null,
                  flag: 2,
                  writeExpr: { type: 'Literal', value: 42, raw: '42' },
                  __maybeImplicitGlobal: false },
                { identifier: { type: 'Identifier', name: 'app' },
                  from: [Circular],
                  tainted: false,
                  resolved: null,
                  flag: 1,
                  __maybeImplicitGlobal: undefined },
                { identifier: { type: 'Identifier', name: 'app' },
                  from: [Circular],
                  tainted: false,
                  resolved: null,
                  flag: 1,
                  __maybeImplicitGlobal: undefined },
                { identifier: { type: 'Identifier', name: 'module' },
                  from: [Circular],
                  tainted: false,
                  resolved: null,
                  flag: 1,
                  __maybeImplicitGlobal: undefined },
                { identifier: { type: 'Identifier', name: 'app' },
                  from: [Circular],
                  tainted: false,
                  resolved: null,
                  flag: 1,
                  __maybeImplicitGlobal: undefined },
                { identifier: { type: 'Identifier', name: 'console' },
                  from: [Circular],
                  tainted: false,
                  resolved: null,
                  flag: 1,
                  __maybeImplicitGlobal: undefined },
                { identifier: { type: 'Identifier', name: 'app' },
                  from: [Circular],
                  tainted: false,
                  resolved: null,
                  flag: 1,
                  __maybeImplicitGlobal: undefined },
                { identifier: { type: 'Identifier', name: 'exports' },
                  from: [Circular],
                  tainted: false,
                  resolved: null,
                  flag: 1,
                  __maybeImplicitGlobal: undefined } ],
             left: null,
             variableScope: [Circular],
             functionExpressionScope: false,
             directCallToEvalScope: false,
             thisFound: false,
             upper: null,
             isStrict: false,
             childScopes: 
              [ { type: 'function',
                  set: 
                   { __data: 
                      { '$replyA': 
                         { name: 'replyA',
                           identifiers: [ { type: 'Identifier', name: 'replyA' } ],
                           references: [],
                           defs: 
                            [ { type: 'FunctionName',
                                name: { type: 'Identifier', name: 'replyA' },
                                node: 
                                 { type: 'FunctionExpression',
                                   id: { type: 'Identifier', name: 'replyA' },
                                   params: 
                                    [ { type: 'Identifier', name: 'req' },
                                      { type: 'Identifier', name: 'res' } ],
                                   defaults: [],
                                   body: 
                                    { type: 'BlockStatement',
                                      body: 
                                       [ { type: 'ExpressionStatement',
                                           expression: 
                                            { type: 'CallExpression',
                                              callee: 
                                               { type: 'MemberExpression',
                                                 computed: false,
                                                 object: { type: 'Identifier', name: 'res' },
                                                 property: { type: 'Identifier', name: 'send' } },
                                              arguments: 
                                               [ { type: 'BinaryExpression',
                                                   operator: '+',
                                                   left: { type: 'Literal', value: '', raw: '""' },
                                                   right: { type: 'Identifier', name: '_rep' } } ] } },
                                         { type: 'ExpressionStatement',
                                           expression: 
                                            { type: 'AssignmentExpression',
                                              operator: '+=',
                                              left: { type: 'Identifier', name: '_rep' },
                                              right: { type: 'Literal', value: 1, raw: '1' } } } ] },
                                   rest: null,
                                   generator: false,
                                   expression: false } } ],
                           tainted: false,
                           stack: true,
                           scope: [Circular] } } },
                  taints: { __data: {} },
                  dynamic: false,
                  block: 
                   { type: 'FunctionExpression',
                     id: { type: 'Identifier', name: 'replyA' },
                     params: 
                      [ { type: 'Identifier', name: 'req' },
                        { type: 'Identifier', name: 'res' } ],
                     defaults: [],
                     body: 
                      { type: 'BlockStatement',
                        body: 
                         [ { type: 'ExpressionStatement',
                             expression: 
                              { type: 'CallExpression',
                                callee: 
                                 { type: 'MemberExpression',
                                   computed: false,
                                   object: { type: 'Identifier', name: 'res' },
                                   property: { type: 'Identifier', name: 'send' } },
                                arguments: 
                                 [ { type: 'BinaryExpression',
                                     operator: '+',
                                     left: { type: 'Literal', value: '', raw: '""' },
                                     right: { type: 'Identifier', name: '_rep' } } ] } },
                           { type: 'ExpressionStatement',
                             expression: 
                              { type: 'AssignmentExpression',
                                operator: '+=',
                                left: { type: 'Identifier', name: '_rep' },
                                right: { type: 'Literal', value: 1, raw: '1' } } } ] },
                     rest: null,
                     generator: false,
                     expression: false },
                  through: 
                   [ { identifier: { type: 'Identifier', name: '_rep' },
                       from: 
                        { type: 'function',
                          set: 
                           { __data: 
                              { '$arguments': 
                                 { name: 'arguments',
                                   identifiers: [],
                                   references: [],
                                   defs: [],
                                   tainted: false,
                                   stack: true,
                                   scope: [Circular] },
                                '$req': 
                                 { name: 'req',
                                   identifiers: [ { type: 'Identifier', name: 'req' } ],
                                   references: [],
                                   defs: 
                                    [ { type: 'Parameter',
                                        name: { type: 'Identifier', name: 'req' },
                                        node: 
                                         { type: 'FunctionExpression',
                                           id: { type: 'Identifier', name: 'replyA' },
                                           params: 
                                            [ { type: 'Identifier', name: 'req' },
                                              { type: 'Identifier', name: 'res' } ],
                                           defaults: [],
                                           body: 
                                            { type: 'BlockStatement',
                                              body: 
                                               [ { type: 'ExpressionStatement',
                                                   expression: 
                                                    { type: 'CallExpression',
                                                      callee: 
                                                       { type: 'MemberExpression',
                                                         computed: false,
                                                         object: { type: 'Identifier', name: 'res' },
                                                         property: { type: 'Identifier', name: 'send' } },
                                                      arguments: 
                                                       [ { type: 'BinaryExpression',
                                                           operator: '+',
                                                           left: { type: 'Literal', value: '', raw: '""' },
                                                           right: { type: 'Identifier', name: '_rep' } } ] } },
                                                 { type: 'ExpressionStatement',
                                                   expression: 
                                                    { type: 'AssignmentExpression',
                                                      operator: '+=',
                                                      left: { type: 'Identifier', name: '_rep' },
                                                      right: { type: 'Literal', value: 1, raw: '1' } } } ] },
                                           rest: null,
                                           generator: false,
                                           expression: false },
                                        index: 0 } ],
                                   tainted: false,
                                   stack: true,
                                   scope: [Circular] },
                                '$res': 
                                 { name: 'res',
                                   identifiers: [ { type: 'Identifier', name: 'res' } ],
                                   references: 
                                    [ { identifier: { type: 'Identifier', name: 'res' },
                                        from: [Circular],
                                        tainted: false,
                                        resolved: [Circular],
                                        flag: 1,
                                        __maybeImplicitGlobal: undefined } ],
                                   defs: 
                                    [ { type: 'Parameter',
                                        name: { type: 'Identifier', name: 'res' },
                                        node: 
                                         { type: 'FunctionExpression',
                                           id: { type: 'Identifier', name: 'replyA' },
                                           params: 
                                            [ { type: 'Identifier', name: 'req' },
                                              { type: 'Identifier', name: 'res' } ],
                                           defaults: [],
                                           body: 
                                            { type: 'BlockStatement',
                                              body: 
                                               [ { type: 'ExpressionStatement',
                                                   expression: 
                                                    { type: 'CallExpression',
                                                      callee: 
                                                       { type: 'MemberExpression',
                                                         computed: false,
                                                         object: { type: 'Identifier', name: 'res' },
                                                         property: { type: 'Identifier', name: 'send' } },
                                                      arguments: 
                                                       [ { type: 'BinaryExpression',
                                                           operator: '+',
                                                           left: { type: 'Literal', value: '', raw: '""' },
                                                           right: { type: 'Identifier', name: '_rep' } } ] } },
                                                 { type: 'ExpressionStatement',
                                                   expression: 
                                                    { type: 'AssignmentExpression',
                                                      operator: '+=',
                                                      left: { type: 'Identifier', name: '_rep' },
                                                      right: { type: 'Literal', value: 1, raw: '1' } } } ] },
                                           rest: null,
                                           generator: false,
                                           expression: false },
                                        index: 1 } ],
                                   tainted: false,
                                   stack: true,
                                   scope: [Circular] } } },
                          taints: { __data: { '$arguments': true } },
                          dynamic: false,
                          block: 
                           { type: 'FunctionExpression',
                             id: { type: 'Identifier', name: 'replyA' },
                             params: 
                              [ { type: 'Identifier', name: 'req' },
                                { type: 'Identifier', name: 'res' } ],
                             defaults: [],
                             body: 
                              { type: 'BlockStatement',
                                body: 
                                 [ { type: 'ExpressionStatement',
                                     expression: 
                                      { type: 'CallExpression',
                                        callee: 
                                         { type: 'MemberExpression',
                                           computed: false,
                                           object: { type: 'Identifier', name: 'res' },
                                           property: { type: 'Identifier', name: 'send' } },
                                        arguments: 
                                         [ { type: 'BinaryExpression',
                                             operator: '+',
                                             left: { type: 'Literal', value: '', raw: '""' },
                                             right: { type: 'Identifier', name: '_rep' } } ] } },
                                   { type: 'ExpressionStatement',
                                     expression: 
                                      { type: 'AssignmentExpression',
                                        operator: '+=',
                                        left: { type: 'Identifier', name: '_rep' },
                                        right: { type: 'Literal', value: 1, raw: '1' } } } ] },
                             rest: null,
                             generator: false,
                             expression: false },
                          through: 
                           [ [Circular],
                             { identifier: { type: 'Identifier', name: '_rep' },
                               from: [Circular],
                               tainted: false,
                               resolved: null,
                               flag: 3,
                               writeExpr: { type: 'Literal', value: 1, raw: '1' },
                               __maybeImplicitGlobal: undefined } ],
                          variables: 
                           [ { name: 'arguments',
                               identifiers: [],
                               references: [],
                               defs: [],
                               tainted: false,
                               stack: true,
                               scope: [Circular] },
                             { name: 'req',
                               identifiers: [ { type: 'Identifier', name: 'req' } ],
                               references: [],
                               defs: 
                                [ { type: 'Parameter',
                                    name: { type: 'Identifier', name: 'req' },
                                    node: 
                                     { type: 'FunctionExpression',
                                       id: { type: 'Identifier', name: 'replyA' },
                                       params: 
                                        [ { type: 'Identifier', name: 'req' },
                                          { type: 'Identifier', name: 'res' } ],
                                       defaults: [],
                                       body: 
                                        { type: 'BlockStatement',
                                          body: 
                                           [ { type: 'ExpressionStatement',
                                               expression: 
                                                { type: 'CallExpression',
                                                  callee: 
                                                   { type: 'MemberExpression',
                                                     computed: false,
                                                     object: { type: 'Identifier', name: 'res' },
                                                     property: { type: 'Identifier', name: 'send' } },
                                                  arguments: 
                                                   [ { type: 'BinaryExpression',
                                                       operator: '+',
                                                       left: { type: 'Literal', value: '', raw: '""' },
                                                       right: { type: 'Identifier', name: '_rep' } } ] } },
                                             { type: 'ExpressionStatement',
                                               expression: 
                                                { type: 'AssignmentExpression',
                                                  operator: '+=',
                                                  left: { type: 'Identifier', name: '_rep' },
                                                  right: { type: 'Literal', value: 1, raw: '1' } } } ] },
                                       rest: null,
                                       generator: false,
                                       expression: false },
                                    index: 0 } ],
                               tainted: false,
                               stack: true,
                               scope: [Circular] },
                             { name: 'res',
                               identifiers: [ { type: 'Identifier', name: 'res' } ],
                               references: 
                                [ { identifier: { type: 'Identifier', name: 'res' },
                                    from: [Circular],
                                    tainted: false,
                                    resolved: [Circular],
                                    flag: 1,
                                    __maybeImplicitGlobal: undefined } ],
                               defs: 
                                [ { type: 'Parameter',
                                    name: { type: 'Identifier', name: 'res' },
                                    node: 
                                     { type: 'FunctionExpression',
                                       id: { type: 'Identifier', name: 'replyA' },
                                       params: 
                                        [ { type: 'Identifier', name: 'req' },
                                          { type: 'Identifier', name: 'res' } ],
                                       defaults: [],
                                       body: 
                                        { type: 'BlockStatement',
                                          body: 
                                           [ { type: 'ExpressionStatement',
                                               expression: 
                                                { type: 'CallExpression',
                                                  callee: 
                                                   { type: 'MemberExpression',
                                                     computed: false,
                                                     object: { type: 'Identifier', name: 'res' },
                                                     property: { type: 'Identifier', name: 'send' } },
                                                  arguments: 
                                                   [ { type: 'BinaryExpression',
                                                       operator: '+',
                                                       left: { type: 'Literal', value: '', raw: '""' },
                                                       right: { type: 'Identifier', name: '_rep' } } ] } },
                                             { type: 'ExpressionStatement',
                                               expression: 
                                                { type: 'AssignmentExpression',
                                                  operator: '+=',
                                                  left: { type: 'Identifier', name: '_rep' },
                                                  right: { type: 'Literal', value: 1, raw: '1' } } } ] },
                                       rest: null,
                                       generator: false,
                                       expression: false },
                                    index: 1 } ],
                               tainted: false,
                               stack: true,
                               scope: [Circular] } ],
                          references: 
                           [ { identifier: { type: 'Identifier', name: 'res' },
                               from: [Circular],
                               tainted: false,
                               resolved: 
                                { name: 'res',
                                  identifiers: [ { type: 'Identifier', name: 'res' } ],
                                  references: [ [Circular] ],
                                  defs: 
                                   [ { type: 'Parameter',
                                       name: { type: 'Identifier', name: 'res' },
                                       node: 
                                        { type: 'FunctionExpression',
                                          id: { type: 'Identifier', name: 'replyA' },
                                          params: 
                                           [ { type: 'Identifier', name: 'req' },
                                             { type: 'Identifier', name: 'res' } ],
                                          defaults: [],
                                          body: 
                                           { type: 'BlockStatement',
                                             body: 
                                              [ { type: 'ExpressionStatement',
                                                  expression: 
                                                   { type: 'CallExpression',
                                                     callee: 
                                                      { type: 'MemberExpression',
                                                        computed: false,
                                                        object: { type: 'Identifier', name: 'res' },
                                                        property: { type: 'Identifier', name: 'send' } },
                                                     arguments: 
                                                      [ { type: 'BinaryExpression',
                                                          operator: '+',
                                                          left: { type: 'Literal', value: '', raw: '""' },
                                                          right: { type: 'Identifier', name: '_rep' } } ] } },
                                                { type: 'ExpressionStatement',
                                                  expression: 
                                                   { type: 'AssignmentExpression',
                                                     operator: '+=',
                                                     left: { type: 'Identifier', name: '_rep' },
                                                     right: { type: 'Literal', value: 1, raw: '1' } } } ] },
                                          rest: null,
                                          generator: false,
                                          expression: false },
                                       index: 1 } ],
                                  tainted: false,
                                  stack: true,
                                  scope: [Circular] },
                               flag: 1,
                               __maybeImplicitGlobal: undefined },
                             [Circular],
                             { identifier: { type: 'Identifier', name: '_rep' },
                               from: [Circular],
                               tainted: false,
                               resolved: null,
                               flag: 3,
                               writeExpr: { type: 'Literal', value: 1, raw: '1' },
                               __maybeImplicitGlobal: undefined } ],
                          left: null,
                          variableScope: [Circular],
                          functionExpressionScope: false,
                          directCallToEvalScope: false,
                          thisFound: false,
                          upper: [Circular],
                          isStrict: false,
                          childScopes: [] },
                       tainted: false,
                       resolved: null,
                       flag: 1,
                       __maybeImplicitGlobal: undefined },
                     { identifier: { type: 'Identifier', name: '_rep' },
                       from: 
                        { type: 'function',
                          set: 
                           { __data: 
                              { '$arguments': 
                                 { name: 'arguments',
                                   identifiers: [],
                                   references: [],
                                   defs: [],
                                   tainted: false,
                                   stack: true,
                                   scope: [Circular] },
                                '$req': 
                                 { name: 'req',
                                   identifiers: [ { type: 'Identifier', name: 'req' } ],
                                   references: [],
                                   defs: 
                                    [ { type: 'Parameter',
                                        name: { type: 'Identifier', name: 'req' },
                                        node: 
                                         { type: 'FunctionExpression',
                                           id: { type: 'Identifier', name: 'replyA' },
                                           params: 
                                            [ { type: 'Identifier', name: 'req' },
                                              { type: 'Identifier', name: 'res' } ],
                                           defaults: [],
                                           body: 
                                            { type: 'BlockStatement',
                                              body: 
                                               [ { type: 'ExpressionStatement',
                                                   expression: 
                                                    { type: 'CallExpression',
                                                      callee: 
                                                       { type: 'MemberExpression',
                                                         computed: false,
                                                         object: { type: 'Identifier', name: 'res' },
                                                         property: { type: 'Identifier', name: 'send' } },
                                                      arguments: 
                                                       [ { type: 'BinaryExpression',
                                                           operator: '+',
                                                           left: { type: 'Literal', value: '', raw: '""' },
                                                           right: { type: 'Identifier', name: '_rep' } } ] } },
                                                 { type: 'ExpressionStatement',
                                                   expression: 
                                                    { type: 'AssignmentExpression',
                                                      operator: '+=',
                                                      left: { type: 'Identifier', name: '_rep' },
                                                      right: { type: 'Literal', value: 1, raw: '1' } } } ] },
                                           rest: null,
                                           generator: false,
                                           expression: false },
                                        index: 0 } ],
                                   tainted: false,
                                   stack: true,
                                   scope: [Circular] },
                                '$res': 
                                 { name: 'res',
                                   identifiers: [ { type: 'Identifier', name: 'res' } ],
                                   references: 
                                    [ { identifier: { type: 'Identifier', name: 'res' },
                                        from: [Circular],
                                        tainted: false,
                                        resolved: [Circular],
                                        flag: 1,
                                        __maybeImplicitGlobal: undefined } ],
                                   defs: 
                                    [ { type: 'Parameter',
                                        name: { type: 'Identifier', name: 'res' },
                                        node: 
                                         { type: 'FunctionExpression',
                                           id: { type: 'Identifier', name: 'replyA' },
                                           params: 
                                            [ { type: 'Identifier', name: 'req' },
                                              { type: 'Identifier', name: 'res' } ],
                                           defaults: [],
                                           body: 
                                            { type: 'BlockStatement',
                                              body: 
                                               [ { type: 'ExpressionStatement',
                                                   expression: 
                                                    { type: 'CallExpression',
                                                      callee: 
                                                       { type: 'MemberExpression',
                                                         computed: false,
                                                         object: { type: 'Identifier', name: 'res' },
                                                         property: { type: 'Identifier', name: 'send' } },
                                                      arguments: 
                                                       [ { type: 'BinaryExpression',
                                                           operator: '+',
                                                           left: { type: 'Literal', value: '', raw: '""' },
                                                           right: { type: 'Identifier', name: '_rep' } } ] } },
                                                 { type: 'ExpressionStatement',
                                                   expression: 
                                                    { type: 'AssignmentExpression',
                                                      operator: '+=',
                                                      left: { type: 'Identifier', name: '_rep' },
                                                      right: { type: 'Literal', value: 1, raw: '1' } } } ] },
                                           rest: null,
                                           generator: false,
                                           expression: false },
                                        index: 1 } ],
                                   tainted: false,
                                   stack: true,
                                   scope: [Circular] } } },
                          taints: { __data: { '$arguments': true } },
                          dynamic: false,
                          block: 
                           { type: 'FunctionExpression',
                             id: { type: 'Identifier', name: 'replyA' },
                             params: 
                              [ { type: 'Identifier', name: 'req' },
                                { type: 'Identifier', name: 'res' } ],
                             defaults: [],
                             body: 
                              { type: 'BlockStatement',
                                body: 
                                 [ { type: 'ExpressionStatement',
                                     expression: 
                                      { type: 'CallExpression',
                                        callee: 
                                         { type: 'MemberExpression',
                                           computed: false,
                                           object: { type: 'Identifier', name: 'res' },
                                           property: { type: 'Identifier', name: 'send' } },
                                        arguments: 
                                         [ { type: 'BinaryExpression',
                                             operator: '+',
                                             left: { type: 'Literal', value: '', raw: '""' },
                                             right: { type: 'Identifier', name: '_rep' } } ] } },
                                   { type: 'ExpressionStatement',
                                     expression: 
                                      { type: 'AssignmentExpression',
                                        operator: '+=',
                                        left: { type: 'Identifier', name: '_rep' },
                                        right: { type: 'Literal', value: 1, raw: '1' } } } ] },
                             rest: null,
                             generator: false,
                             expression: false },
                          through: 
                           [ { identifier: { type: 'Identifier', name: '_rep' },
                               from: [Circular],
                               tainted: false,
                               resolved: null,
                               flag: 1,
                               __maybeImplicitGlobal: undefined },
                             [Circular] ],
                          variables: 
                           [ { name: 'arguments',
                               identifiers: [],
                               references: [],
                               defs: [],
                               tainted: false,
                               stack: true,
                               scope: [Circular] },
                             { name: 'req',
                               identifiers: [ { type: 'Identifier', name: 'req' } ],
                               references: [],
                               defs: 
                                [ { type: 'Parameter',
                                    name: { type: 'Identifier', name: 'req' },
                                    node: 
                                     { type: 'FunctionExpression',
                                       id: { type: 'Identifier', name: 'replyA' },
                                       params: 
                                        [ { type: 'Identifier', name: 'req' },
                                          { type: 'Identifier', name: 'res' } ],
                                       defaults: [],
                                       body: 
                                        { type: 'BlockStatement',
                                          body: 
                                           [ { type: 'ExpressionStatement',
                                               expression: 
                                                { type: 'CallExpression',
                                                  callee: 
                                                   { type: 'MemberExpression',
                                                     computed: false,
                                                     object: { type: 'Identifier', name: 'res' },
                                                     property: { type: 'Identifier', name: 'send' } },
                                                  arguments: 
                                                   [ { type: 'BinaryExpression',
                                                       operator: '+',
                                                       left: { type: 'Literal', value: '', raw: '""' },
                                                       right: { type: 'Identifier', name: '_rep' } } ] } },
                                             { type: 'ExpressionStatement',
                                               expression: 
                                                { type: 'AssignmentExpression',
                                                  operator: '+=',
                                                  left: { type: 'Identifier', name: '_rep' },
                                                  right: { type: 'Literal', value: 1, raw: '1' } } } ] },
                                       rest: null,
                                       generator: false,
                                       expression: false },
                                    index: 0 } ],
                               tainted: false,
                               stack: true,
                               scope: [Circular] },
                             { name: 'res',
                               identifiers: [ { type: 'Identifier', name: 'res' } ],
                               references: 
                                [ { identifier: { type: 'Identifier', name: 'res' },
                                    from: [Circular],
                                    tainted: false,
                                    resolved: [Circular],
                                    flag: 1,
                                    __maybeImplicitGlobal: undefined } ],
                               defs: 
                                [ { type: 'Parameter',
                                    name: { type: 'Identifier', name: 'res' },
                                    node: 
                                     { type: 'FunctionExpression',
                                       id: { type: 'Identifier', name: 'replyA' },
                                       params: 
                                        [ { type: 'Identifier', name: 'req' },
                                          { type: 'Identifier', name: 'res' } ],
                                       defaults: [],
                                       body: 
                                        { type: 'BlockStatement',
                                          body: 
                                           [ { type: 'ExpressionStatement',
                                               expression: 
                                                { type: 'CallExpression',
                                                  callee: 
                                                   { type: 'MemberExpression',
                                                     computed: false,
                                                     object: { type: 'Identifier', name: 'res' },
                                                     property: { type: 'Identifier', name: 'send' } },
                                                  arguments: 
                                                   [ { type: 'BinaryExpression',
                                                       operator: '+',
                                                       left: { type: 'Literal', value: '', raw: '""' },
                                                       right: { type: 'Identifier', name: '_rep' } } ] } },
                                             { type: 'ExpressionStatement',
                                               expression: 
                                                { type: 'AssignmentExpression',
                                                  operator: '+=',
                                                  left: { type: 'Identifier', name: '_rep' },
                                                  right: { type: 'Literal', value: 1, raw: '1' } } } ] },
                                       rest: null,
                                       generator: false,
                                       expression: false },
                                    index: 1 } ],
                               tainted: false,
                               stack: true,
                               scope: [Circular] } ],
                          references: 
                           [ { identifier: { type: 'Identifier', name: 'res' },
                               from: [Circular],
                               tainted: false,
                               resolved: 
                                { name: 'res',
                                  identifiers: [ { type: 'Identifier', name: 'res' } ],
                                  references: [ [Circular] ],
                                  defs: 
                                   [ { type: 'Parameter',
                                       name: { type: 'Identifier', name: 'res' },
                                       node: 
                                        { type: 'FunctionExpression',
                                          id: { type: 'Identifier', name: 'replyA' },
                                          params: 
                                           [ { type: 'Identifier', name: 'req' },
                                             { type: 'Identifier', name: 'res' } ],
                                          defaults: [],
                                          body: 
                                           { type: 'BlockStatement',
                                             body: 
                                              [ { type: 'ExpressionStatement',
                                                  expression: 
                                                   { type: 'CallExpression',
                                                     callee: 
                                                      { type: 'MemberExpression',
                                                        computed: false,
                                                        object: { type: 'Identifier', name: 'res' },
                                                        property: { type: 'Identifier', name: 'send' } },
                                                     arguments: 
                                                      [ { type: 'BinaryExpression',
                                                          operator: '+',
                                                          left: { type: 'Literal', value: '', raw: '""' },
                                                          right: { type: 'Identifier', name: '_rep' } } ] } },
                                                { type: 'ExpressionStatement',
                                                  expression: 
                                                   { type: 'AssignmentExpression',
                                                     operator: '+=',
                                                     left: { type: 'Identifier', name: '_rep' },
                                                     right: { type: 'Literal', value: 1, raw: '1' } } } ] },
                                          rest: null,
                                          generator: false,
                                          expression: false },
                                       index: 1 } ],
                                  tainted: false,
                                  stack: true,
                                  scope: [Circular] },
                               flag: 1,
                               __maybeImplicitGlobal: undefined },
                             { identifier: { type: 'Identifier', name: '_rep' },
                               from: [Circular],
                               tainted: false,
                               resolved: null,
                               flag: 1,
                               __maybeImplicitGlobal: undefined },
                             [Circular] ],
                          left: null,
                          variableScope: [Circular],
                          functionExpressionScope: false,
                          directCallToEvalScope: false,
                          thisFound: false,
                          upper: [Circular],
                          isStrict: false,
                          childScopes: [] },
                       tainted: false,
                       resolved: null,
                       flag: 3,
                       writeExpr: { type: 'Literal', value: 1, raw: '1' },
                       __maybeImplicitGlobal: undefined } ],
                  variables: 
                   [ { name: 'replyA',
                       identifiers: [ { type: 'Identifier', name: 'replyA' } ],
                       references: [],
                       defs: 
                        [ { type: 'FunctionName',
                            name: { type: 'Identifier', name: 'replyA' },
                            node: 
                             { type: 'FunctionExpression',
                               id: { type: 'Identifier', name: 'replyA' },
                               params: 
                                [ { type: 'Identifier', name: 'req' },
                                  { type: 'Identifier', name: 'res' } ],
                               defaults: [],
                               body: 
                                { type: 'BlockStatement',
                                  body: 
                                   [ { type: 'ExpressionStatement',
                                       expression: 
                                        { type: 'CallExpression',
                                          callee: 
                                           { type: 'MemberExpression',
                                             computed: false,
                                             object: { type: 'Identifier', name: 'res' },
                                             property: { type: 'Identifier', name: 'send' } },
                                          arguments: 
                                           [ { type: 'BinaryExpression',
                                               operator: '+',
                                               left: { type: 'Literal', value: '', raw: '""' },
                                               right: { type: 'Identifier', name: '_rep' } } ] } },
                                     { type: 'ExpressionStatement',
                                       expression: 
                                        { type: 'AssignmentExpression',
                                          operator: '+=',
                                          left: { type: 'Identifier', name: '_rep' },
                                          right: { type: 'Literal', value: 1, raw: '1' } } } ] },
                               rest: null,
                               generator: false,
                               expression: false } } ],
                       tainted: false,
                       stack: true,
                       scope: [Circular] } ],
                  references: [],
                  left: null,
                  variableScope: [Circular],
                  functionExpressionScope: true,
                  directCallToEvalScope: false,
                  thisFound: false,
                  upper: [Circular],
                  isStrict: false,
                  childScopes: 
                   [ { type: 'function',
                       set: 
                        { __data: 
                           { '$arguments': 
                              { name: 'arguments',
                                identifiers: [],
                                references: [],
                                defs: [],
                                tainted: false,
                                stack: true,
                                scope: [Circular] },
                             '$req': 
                              { name: 'req',
                                identifiers: [ { type: 'Identifier', name: 'req' } ],
                                references: [],
                                defs: 
                                 [ { type: 'Parameter',
                                     name: { type: 'Identifier', name: 'req' },
                                     node: 
                                      { type: 'FunctionExpression',
                                        id: { type: 'Identifier', name: 'replyA' },
                                        params: 
                                         [ { type: 'Identifier', name: 'req' },
                                           { type: 'Identifier', name: 'res' } ],
                                        defaults: [],
                                        body: 
                                         { type: 'BlockStatement',
                                           body: 
                                            [ { type: 'ExpressionStatement',
                                                expression: 
                                                 { type: 'CallExpression',
                                                   callee: 
                                                    { type: 'MemberExpression',
                                                      computed: false,
                                                      object: { type: 'Identifier', name: 'res' },
                                                      property: { type: 'Identifier', name: 'send' } },
                                                   arguments: 
                                                    [ { type: 'BinaryExpression',
                                                        operator: '+',
                                                        left: { type: 'Literal', value: '', raw: '""' },
                                                        right: { type: 'Identifier', name: '_rep' } } ] } },
                                              { type: 'ExpressionStatement',
                                                expression: 
                                                 { type: 'AssignmentExpression',
                                                   operator: '+=',
                                                   left: { type: 'Identifier', name: '_rep' },
                                                   right: { type: 'Literal', value: 1, raw: '1' } } } ] },
                                        rest: null,
                                        generator: false,
                                        expression: false },
                                     index: 0 } ],
                                tainted: false,
                                stack: true,
                                scope: [Circular] },
                             '$res': 
                              { name: 'res',
                                identifiers: [ { type: 'Identifier', name: 'res' } ],
                                references: 
                                 [ { identifier: { type: 'Identifier', name: 'res' },
                                     from: [Circular],
                                     tainted: false,
                                     resolved: [Circular],
                                     flag: 1,
                                     __maybeImplicitGlobal: undefined } ],
                                defs: 
                                 [ { type: 'Parameter',
                                     name: { type: 'Identifier', name: 'res' },
                                     node: 
                                      { type: 'FunctionExpression',
                                        id: { type: 'Identifier', name: 'replyA' },
                                        params: 
                                         [ { type: 'Identifier', name: 'req' },
                                           { type: 'Identifier', name: 'res' } ],
                                        defaults: [],
                                        body: 
                                         { type: 'BlockStatement',
                                           body: 
                                            [ { type: 'ExpressionStatement',
                                                expression: 
                                                 { type: 'CallExpression',
                                                   callee: 
                                                    { type: 'MemberExpression',
                                                      computed: false,
                                                      object: { type: 'Identifier', name: 'res' },
                                                      property: { type: 'Identifier', name: 'send' } },
                                                   arguments: 
                                                    [ { type: 'BinaryExpression',
                                                        operator: '+',
                                                        left: { type: 'Literal', value: '', raw: '""' },
                                                        right: { type: 'Identifier', name: '_rep' } } ] } },
                                              { type: 'ExpressionStatement',
                                                expression: 
                                                 { type: 'AssignmentExpression',
                                                   operator: '+=',
                                                   left: { type: 'Identifier', name: '_rep' },
                                                   right: { type: 'Literal', value: 1, raw: '1' } } } ] },
                                        rest: null,
                                        generator: false,
                                        expression: false },
                                     index: 1 } ],
                                tainted: false,
                                stack: true,
                                scope: [Circular] } } },
                       taints: { __data: { '$arguments': true } },
                       dynamic: false,
                       block: 
                        { type: 'FunctionExpression',
                          id: { type: 'Identifier', name: 'replyA' },
                          params: 
                           [ { type: 'Identifier', name: 'req' },
                             { type: 'Identifier', name: 'res' } ],
                          defaults: [],
                          body: 
                           { type: 'BlockStatement',
                             body: 
                              [ { type: 'ExpressionStatement',
                                  expression: 
                                   { type: 'CallExpression',
                                     callee: 
                                      { type: 'MemberExpression',
                                        computed: false,
                                        object: { type: 'Identifier', name: 'res' },
                                        property: { type: 'Identifier', name: 'send' } },
                                     arguments: 
                                      [ { type: 'BinaryExpression',
                                          operator: '+',
                                          left: { type: 'Literal', value: '', raw: '""' },
                                          right: { type: 'Identifier', name: '_rep' } } ] } },
                                { type: 'ExpressionStatement',
                                  expression: 
                                   { type: 'AssignmentExpression',
                                     operator: '+=',
                                     left: { type: 'Identifier', name: '_rep' },
                                     right: { type: 'Literal', value: 1, raw: '1' } } } ] },
                          rest: null,
                          generator: false,
                          expression: false },
                       through: 
                        [ { identifier: { type: 'Identifier', name: '_rep' },
                            from: [Circular],
                            tainted: false,
                            resolved: null,
                            flag: 1,
                            __maybeImplicitGlobal: undefined },
                          { identifier: { type: 'Identifier', name: '_rep' },
                            from: [Circular],
                            tainted: false,
                            resolved: null,
                            flag: 3,
                            writeExpr: { type: 'Literal', value: 1, raw: '1' },
                            __maybeImplicitGlobal: undefined } ],
                       variables: 
                        [ { name: 'arguments',
                            identifiers: [],
                            references: [],
                            defs: [],
                            tainted: false,
                            stack: true,
                            scope: [Circular] },
                          { name: 'req',
                            identifiers: [ { type: 'Identifier', name: 'req' } ],
                            references: [],
                            defs: 
                             [ { type: 'Parameter',
                                 name: { type: 'Identifier', name: 'req' },
                                 node: 
                                  { type: 'FunctionExpression',
                                    id: { type: 'Identifier', name: 'replyA' },
                                    params: 
                                     [ { type: 'Identifier', name: 'req' },
                                       { type: 'Identifier', name: 'res' } ],
                                    defaults: [],
                                    body: 
                                     { type: 'BlockStatement',
                                       body: 
                                        [ { type: 'ExpressionStatement',
                                            expression: 
                                             { type: 'CallExpression',
                                               callee: 
                                                { type: 'MemberExpression',
                                                  computed: false,
                                                  object: { type: 'Identifier', name: 'res' },
                                                  property: { type: 'Identifier', name: 'send' } },
                                               arguments: 
                                                [ { type: 'BinaryExpression',
                                                    operator: '+',
                                                    left: { type: 'Literal', value: '', raw: '""' },
                                                    right: { type: 'Identifier', name: '_rep' } } ] } },
                                          { type: 'ExpressionStatement',
                                            expression: 
                                             { type: 'AssignmentExpression',
                                               operator: '+=',
                                               left: { type: 'Identifier', name: '_rep' },
                                               right: { type: 'Literal', value: 1, raw: '1' } } } ] },
                                    rest: null,
                                    generator: false,
                                    expression: false },
                                 index: 0 } ],
                            tainted: false,
                            stack: true,
                            scope: [Circular] },
                          { name: 'res',
                            identifiers: [ { type: 'Identifier', name: 'res' } ],
                            references: 
                             [ { identifier: { type: 'Identifier', name: 'res' },
                                 from: [Circular],
                                 tainted: false,
                                 resolved: [Circular],
                                 flag: 1,
                                 __maybeImplicitGlobal: undefined } ],
                            defs: 
                             [ { type: 'Parameter',
                                 name: { type: 'Identifier', name: 'res' },
                                 node: 
                                  { type: 'FunctionExpression',
                                    id: { type: 'Identifier', name: 'replyA' },
                                    params: 
                                     [ { type: 'Identifier', name: 'req' },
                                       { type: 'Identifier', name: 'res' } ],
                                    defaults: [],
                                    body: 
                                     { type: 'BlockStatement',
                                       body: 
                                        [ { type: 'ExpressionStatement',
                                            expression: 
                                             { type: 'CallExpression',
                                               callee: 
                                                { type: 'MemberExpression',
                                                  computed: false,
                                                  object: { type: 'Identifier', name: 'res' },
                                                  property: { type: 'Identifier', name: 'send' } },
                                               arguments: 
                                                [ { type: 'BinaryExpression',
                                                    operator: '+',
                                                    left: { type: 'Literal', value: '', raw: '""' },
                                                    right: { type: 'Identifier', name: '_rep' } } ] } },
                                          { type: 'ExpressionStatement',
                                            expression: 
                                             { type: 'AssignmentExpression',
                                               operator: '+=',
                                               left: { type: 'Identifier', name: '_rep' },
                                               right: { type: 'Literal', value: 1, raw: '1' } } } ] },
                                    rest: null,
                                    generator: false,
                                    expression: false },
                                 index: 1 } ],
                            tainted: false,
                            stack: true,
                            scope: [Circular] } ],
                       references: 
                        [ { identifier: { type: 'Identifier', name: 'res' },
                            from: [Circular],
                            tainted: false,
                            resolved: 
                             { name: 'res',
                               identifiers: [ { type: 'Identifier', name: 'res' } ],
                               references: [ [Circular] ],
                               defs: 
                                [ { type: 'Parameter',
                                    name: { type: 'Identifier', name: 'res' },
                                    node: 
                                     { type: 'FunctionExpression',
                                       id: { type: 'Identifier', name: 'replyA' },
                                       params: 
                                        [ { type: 'Identifier', name: 'req' },
                                          { type: 'Identifier', name: 'res' } ],
                                       defaults: [],
                                       body: 
                                        { type: 'BlockStatement',
                                          body: 
                                           [ { type: 'ExpressionStatement',
                                               expression: 
                                                { type: 'CallExpression',
                                                  callee: 
                                                   { type: 'MemberExpression',
                                                     computed: false,
                                                     object: { type: 'Identifier', name: 'res' },
                                                     property: { type: 'Identifier', name: 'send' } },
                                                  arguments: 
                                                   [ { type: 'BinaryExpression',
                                                       operator: '+',
                                                       left: { type: 'Literal', value: '', raw: '""' },
                                                       right: { type: 'Identifier', name: '_rep' } } ] } },
                                             { type: 'ExpressionStatement',
                                               expression: 
                                                { type: 'AssignmentExpression',
                                                  operator: '+=',
                                                  left: { type: 'Identifier', name: '_rep' },
                                                  right: { type: 'Literal', value: 1, raw: '1' } } } ] },
                                       rest: null,
                                       generator: false,
                                       expression: false },
                                    index: 1 } ],
                               tainted: false,
                               stack: true,
                               scope: [Circular] },
                            flag: 1,
                            __maybeImplicitGlobal: undefined },
                          { identifier: { type: 'Identifier', name: '_rep' },
                            from: [Circular],
                            tainted: false,
                            resolved: null,
                            flag: 1,
                            __maybeImplicitGlobal: undefined },
                          { identifier: { type: 'Identifier', name: '_rep' },
                            from: [Circular],
                            tainted: false,
                            resolved: null,
                            flag: 3,
                            writeExpr: { type: 'Literal', value: 1, raw: '1' },
                            __maybeImplicitGlobal: undefined } ],
                       left: null,
                       variableScope: [Circular],
                       functionExpressionScope: false,
                       directCallToEvalScope: false,
                       thisFound: false,
                       upper: [Circular],
                       isStrict: false,
                       childScopes: [] } ] },
                [Circular] ],
             implicit: { set: { __data: {} }, variables: [] } },
          isStrict: false,
          childScopes: [ [Circular] ] },
       isStrict: false,
       childScopes: [] } ],
  attached: false }